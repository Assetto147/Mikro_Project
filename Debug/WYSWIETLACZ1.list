
WYSWIETLACZ1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  08007fd8  08007fd8  00017fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008650  08008650  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008650  08008650  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008650  08008650  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008650  08008650  00018650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008654  08008654  00018654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  200001dc  08008834  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  08008834  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca99  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002133  00000000  00000000  0002cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  0002edd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  0002faf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018436  00000000  00000000  00030718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c1ed  00000000  00000000  00048b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b41f  00000000  00000000  00054d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e015a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f0  00000000  00000000  000e01d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fbc 	.word	0x08007fbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007fbc 	.word	0x08007fbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b40      	ldr	r3, [pc, #256]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a3f      	ldr	r2, [pc, #252]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a39      	ldr	r2, [pc, #228]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000c86:	f043 0320 	orr.w	r3, r3, #32
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0320 	and.w	r3, r3, #32
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a33      	ldr	r2, [pc, #204]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <MX_GPIO_Init+0x118>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Clk_Pin|Din_Pin|DC_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	21e0      	movs	r1, #224	; 0xe0
 8000ccc:	4828      	ldr	r0, [pc, #160]	; (8000d70 <MX_GPIO_Init+0x11c>)
 8000cce:	f001 fd1f 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	4827      	ldr	r0, [pc, #156]	; (8000d74 <MX_GPIO_Init+0x120>)
 8000cd8:	f001 fd1a 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	4825      	ldr	r0, [pc, #148]	; (8000d78 <MX_GPIO_Init+0x124>)
 8000ce2:	f001 fd15 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_GPIO_Init+0x128>)
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	481e      	ldr	r0, [pc, #120]	; (8000d74 <MX_GPIO_Init+0x120>)
 8000cfc:	f001 fbae 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Clk_Pin|Din_Pin|DC_Pin;
 8000d00:	23e0      	movs	r3, #224	; 0xe0
 8000d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4816      	ldr	r0, [pc, #88]	; (8000d70 <MX_GPIO_Init+0x11c>)
 8000d18:	f001 fba0 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	4810      	ldr	r0, [pc, #64]	; (8000d74 <MX_GPIO_Init+0x120>)
 8000d34:	f001 fb92 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000d38:	2340      	movs	r3, #64	; 0x40
 8000d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480a      	ldr	r0, [pc, #40]	; (8000d78 <MX_GPIO_Init+0x124>)
 8000d50:	f001 fb84 	bl	800245c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	2028      	movs	r0, #40	; 0x28
 8000d5a:	f001 fad2 	bl	8002302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d5e:	2028      	movs	r0, #40	; 0x28
 8000d60:	f001 faeb 	bl	800233a <HAL_NVIC_EnableIRQ>

}
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40011000 	.word	0x40011000
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	10110000 	.word	0x10110000

08000d80 <HAL_TIM_IC_CaptureCallback>:
//Clk --> PA5



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim2)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	f6ad 0d44 	subw	sp, sp, #2116	; 0x844
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	6018      	str	r0, [r3, #0]
	if (htim2->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // tim 2 i channel 3 jest aktywny
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	7f1b      	ldrb	r3, [r3, #28]
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	f040 80e9 	bne.w	8000f6a <HAL_TIM_IC_CaptureCallback+0x1ea>
	{
		if (Is_First_Captured==0)  // jeśli flaga jest równa zero to wykonujemy:
 8000d98:	4b79      	ldr	r3, [pc, #484]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x200>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	f083 0301 	eor.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00c      	beq.n	8000dc0 <HAL_TIM_IC_CaptureCallback+0x40>
		{
			value_1 = HAL_TIM_ReadCapturedValue(htim2, TIM_CHANNEL_3);  // pobieramy pierwszą wartość
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2108      	movs	r1, #8
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	f002 fcfe 	bl	80037ac <HAL_TIM_ReadCapturedValue>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b73      	ldr	r3, [pc, #460]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x204>)
 8000db6:	601a      	str	r2, [r3, #0]
			Is_First_Captured =1;  // ustawiamy naszą flagę na 1 (true)
 8000db8:	4b71      	ldr	r3, [pc, #452]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x200>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e031      	b.n	8000e24 <HAL_TIM_IC_CaptureCallback+0xa4>
		}

		else if (Is_First_Captured)  // jeśli flaga jest podniesiona to:
 8000dc0:	4b6f      	ldr	r3, [pc, #444]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x200>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d02d      	beq.n	8000e24 <HAL_TIM_IC_CaptureCallback+0xa4>
		{
			value_2 = HAL_TIM_ReadCapturedValue(htim2, TIM_CHANNEL_3);  // pobieramy drugą wartość:
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2108      	movs	r1, #8
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	f002 fced 	bl	80037ac <HAL_TIM_ReadCapturedValue>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b6c      	ldr	r3, [pc, #432]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000dd8:	601a      	str	r2, [r3, #0]

			if (value_2 > value_1)
 8000dda:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b69      	ldr	r3, [pc, #420]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x204>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dd07      	ble.n	8000df6 <HAL_TIM_IC_CaptureCallback+0x76>
			{
				Difference = value_2-value_1;   // Wyliczenie różnicy
 8000de6:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b66      	ldr	r3, [pc, #408]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x204>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	4a66      	ldr	r2, [pc, #408]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e013      	b.n	8000e1e <HAL_TIM_IC_CaptureCallback+0x9e>
			}

			else if (value_2 < value_1)
 8000df6:	4b64      	ldr	r3, [pc, #400]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b62      	ldr	r3, [pc, #392]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x204>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	da0b      	bge.n	8000e1a <HAL_TIM_IC_CaptureCallback+0x9a>
			{
				Difference = ((0xffff-value_1)+value_2) +1; // to samo tylko jeśli value_1 jest większy od 0xffff to nasz prescaler (maksymalna wartość)
 8000e02:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x204>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000e0a:	33ff      	adds	r3, #255	; 0xff
 8000e0c:	4a5e      	ldr	r2, [pc, #376]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	3301      	adds	r3, #1
 8000e14:	4a5d      	ldr	r2, [pc, #372]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	e001      	b.n	8000e1e <HAL_TIM_IC_CaptureCallback+0x9e>
			}

			else
			{
				Error_Handler(); //jeśli coś innego to error
 8000e1a:	f000 fd1f 	bl	800185c <Error_Handler>
			}


			//CPM = ((HAL_RCC_GetPCLK1Freq()/1000)/Difference);  // liczenie wartości CPM
			Is_First_Captured = 0;  // resetowanie flagi naszej.
 8000e1e:	4b58      	ldr	r3, [pc, #352]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x200>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]


		}


		CPM = 400000 / Difference;
 8000e24:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a59      	ldr	r2, [pc, #356]	; (8000f90 <HAL_TIM_IC_CaptureCallback+0x210>)
 8000e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2e:	4a59      	ldr	r2, [pc, #356]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000e30:	6013      	str	r3, [r2, #0]
		//CPM = ((HAL_RCC_GetPCLK1Freq()/1000)/Difference);  // liczenie wartości CPM


		LCD_clrScr();
 8000e32:	f000 fe93 	bl	8001b5c <LCD_clrScr>

		uSperH = ((CPM * 0.006666));   // Konwertowanie wartości
 8000e36:	4b57      	ldr	r3, [pc, #348]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fae2 	bl	8000404 <__aeabi_i2d>
 8000e40:	a34d      	add	r3, pc, #308	; (adr r3, 8000f78 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	f7ff fb47 	bl	80004d8 <__aeabi_dmul>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460c      	mov	r4, r1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	4621      	mov	r1, r4
 8000e52:	f7ff fe39 	bl	8000ac8 <__aeabi_d2f>
 8000e56:	4602      	mov	r2, r0
 8000e58:	4b4f      	ldr	r3, [pc, #316]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x218>)
 8000e5a:	601a      	str	r2, [r3, #0]
		if (uSperH > uSperHmax) {
 8000e5c:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x218>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b4e      	ldr	r3, [pc, #312]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	4610      	mov	r0, r2
 8000e68:	f7ff feea 	bl	8000c40 <__aeabi_fcmpgt>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_TIM_IC_CaptureCallback+0xfa>
			  uSperHmax = uSperH;
 8000e72:	4b49      	ldr	r3, [pc, #292]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x218>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a49      	ldr	r2, [pc, #292]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000e78:	6013      	str	r3, [r2, #0]
			}
		char res[1000];
		sprintf(res, "uSH: %.4f", uSperH);
 8000e7a:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x218>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fad2 	bl	8000428 <__aeabi_f2d>
 8000e84:	4603      	mov	r3, r0
 8000e86:	460c      	mov	r4, r1
 8000e88:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	4943      	ldr	r1, [pc, #268]	; (8000fa0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000e92:	f004 f989 	bl	80051a8 <siprintf>
		LCD_print(res,0,3);
 8000e96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fe3e 	bl	8001b20 <LCD_print>
		for (int i = 0; i < numReadings; i++) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8000eaa:	e00a      	b.n	8000ec2 <HAL_TIM_IC_CaptureCallback+0x142>
			  readings[i] = 0;
 8000eac:	4a3d      	ldr	r2, [pc, #244]	; (8000fa4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8000eae:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < numReadings; i++) {
 8000eb8:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8000ec2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8000ec6:	2b1d      	cmp	r3, #29
 8000ec8:	ddf0      	ble.n	8000eac <HAL_TIM_IC_CaptureCallback+0x12c>
			}


		total -= readings[indeks];
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4934      	ldr	r1, [pc, #208]	; (8000fa4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8000ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	4a33      	ldr	r2, [pc, #204]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000edc:	6013      	str	r3, [r2, #0]
		readings[indeks] = CPM;
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a2c      	ldr	r2, [pc, #176]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000ee4:	6812      	ldr	r2, [r2, #0]
 8000ee6:	492f      	ldr	r1, [pc, #188]	; (8000fa4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		total += readings[indeks];
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8000ef2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000efe:	6013      	str	r3, [r2, #0]
		indeks = (indeks + 1);
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a29      	ldr	r2, [pc, #164]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000f08:	6013      	str	r3, [r2, #0]

		if (indeks >= numReadings){
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b1d      	cmp	r3, #29
 8000f10:	dd02      	ble.n	8000f18 <HAL_TIM_IC_CaptureCallback+0x198>
			indeks = 0;
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
		}


		meanCPM = total / numReadings;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f22:	441a      	add	r2, r3
 8000f24:	1112      	asrs	r2, r2, #4
 8000f26:	17db      	asrs	r3, r3, #31
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8000f2c:	6013      	str	r3, [r2, #0]


		 char tab_cpm[1000];
		 sprintf(tab_cpm, "CPM: %d", CPM);
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8000f36:	4920      	ldr	r1, [pc, #128]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 f935 	bl	80051a8 <siprintf>
		 LCD_print(tab_cpm,0,2);
 8000f3e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8000f42:	2202      	movs	r2, #2
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fdea 	bl	8001b20 <LCD_print>

		 char tab_meancpm[100];
		 sprintf(tab_meancpm, "MCPM: %d", meanCPM);
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	4919      	ldr	r1, [pc, #100]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 f926 	bl	80051a8 <siprintf>
		 LCD_print(tab_meancpm,0,4);
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	2204      	movs	r2, #4
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fddb 	bl	8001b20 <LCD_print>
	}

}
 8000f6a:	bf00      	nop
 8000f6c:	f607 0744 	addw	r7, r7, #2116	; 0x844
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	f3af 8000 	nop.w
 8000f78:	bfec13ba 	.word	0xbfec13ba
 8000f7c:	3f7b4dce 	.word	0x3f7b4dce
 8000f80:	20000214 	.word	0x20000214
 8000f84:	20000204 	.word	0x20000204
 8000f88:	20000208 	.word	0x20000208
 8000f8c:	2000020c 	.word	0x2000020c
 8000f90:	00061a80 	.word	0x00061a80
 8000f94:	20000210 	.word	0x20000210
 8000f98:	20000304 	.word	0x20000304
 8000f9c:	20000220 	.word	0x20000220
 8000fa0:	08007fd8 	.word	0x08007fd8
 8000fa4:	20000308 	.word	0x20000308
 8000fa8:	20000218 	.word	0x20000218
 8000fac:	20000200 	.word	0x20000200
 8000fb0:	88888889 	.word	0x88888889
 8000fb4:	2000021c 	.word	0x2000021c
 8000fb8:	08007fe4 	.word	0x08007fe4
 8000fbc:	08007fec 	.word	0x08007fec

08000fc0 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { // odbiór i zapis danych na przerwaniach
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
			if (huart->Instance == USART2) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_UART_RxCpltCallback+0x4c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d117      	bne.n	8001002 <HAL_UART_RxCpltCallback+0x42>
				if (rx_e == 199)
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_UART_RxCpltCallback+0x50>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2bc7      	cmp	r3, #199	; 0xc7
 8000fd8:	d103      	bne.n	8000fe2 <HAL_UART_RxCpltCallback+0x22>
					rx_e = 0;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_UART_RxCpltCallback+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e005      	b.n	8000fee <HAL_UART_RxCpltCallback+0x2e>
				else
					rx_e++;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_UART_RxCpltCallback+0x50>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_UART_RxCpltCallback+0x50>)
 8000fec:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, &RxBUF[rx_e], 1);
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_UART_RxCpltCallback+0x50>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_UART_RxCpltCallback+0x54>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4806      	ldr	r0, [pc, #24]	; (8001018 <HAL_UART_RxCpltCallback+0x58>)
 8000ffe:	f002 ff68 	bl	8003ed2 <HAL_UART_Receive_IT>
	}
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40004400 	.word	0x40004400
 8001010:	200001f8 	.word	0x200001f8
 8001014:	200003ec 	.word	0x200003ec
 8001018:	20000768 	.word	0x20000768

0800101c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) { // wysyłanie danych na przerwaniach
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_UART_TxCpltCallback+0x5c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d120      	bne.n	8001070 <HAL_UART_TxCpltCallback+0x54>
		uint8_t temp = TxBUF[tx_f]; // znak do wysłania
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_UART_TxCpltCallback+0x60>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_UART_TxCpltCallback+0x64>)
 8001036:	5c9b      	ldrb	r3, [r3, r2]
 8001038:	73fb      	strb	r3, [r7, #15]
		if (tx_f != tx_e) {
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_UART_TxCpltCallback+0x60>)
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_UART_TxCpltCallback+0x68>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d014      	beq.n	8001070 <HAL_UART_TxCpltCallback+0x54>
			if (tx_f == 199)
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_UART_TxCpltCallback+0x60>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2bc7      	cmp	r3, #199	; 0xc7
 800104c:	d103      	bne.n	8001056 <HAL_UART_TxCpltCallback+0x3a>
				tx_f = 0;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_UART_TxCpltCallback+0x60>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e005      	b.n	8001062 <HAL_UART_TxCpltCallback+0x46>
			else
				tx_f++;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_UART_TxCpltCallback+0x60>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_UART_TxCpltCallback+0x60>)
 8001060:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8001062:	f107 030f 	add.w	r3, r7, #15
 8001066:	2201      	movs	r2, #1
 8001068:	4619      	mov	r1, r3
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <HAL_UART_TxCpltCallback+0x6c>)
 800106c:	f002 feed 	bl	8003e4a <HAL_UART_Transmit_IT>
		}
	}
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40004400 	.word	0x40004400
 800107c:	200001fb 	.word	0x200001fb
 8001080:	2000023c 	.word	0x2000023c
 8001084:	200001fa 	.word	0x200001fa
 8001088:	20000768 	.word	0x20000768

0800108c <put>:

void put(char ch[]) { // dodawanie komend do bufora nadawczego
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	uint8_t index = tx_e; // zapamiętanie wartości wskaźnika tx_e
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <put+0xb4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(ch); i++) { // dodawanie znaków do bufora
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	e012      	b.n	80010c6 <put+0x3a>
		TxBUF[index] = ch[i];
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	441a      	add	r2, r3
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	7811      	ldrb	r1, [r2, #0]
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <put+0xb8>)
 80010ac:	54d1      	strb	r1, [r2, r3]

		if (index == 199)
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	2bc7      	cmp	r3, #199	; 0xc7
 80010b2:	d102      	bne.n	80010ba <put+0x2e>
			index = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	75fb      	strb	r3, [r7, #23]
 80010b8:	e002      	b.n	80010c0 <put+0x34>
		else
			index++;
 80010ba:	7dfb      	ldrb	r3, [r7, #23]
 80010bc:	3301      	adds	r3, #1
 80010be:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(ch); i++) { // dodawanie znaków do bufora
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	3301      	adds	r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff f842 	bl	8000150 <strlen>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8e5      	bhi.n	80010a0 <put+0x14>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
	}
	__disable_irq();
	if((tx_e == tx_f) && // jeżeli bufor wysyłający był pusty przed dodaniem znaków łańcucha
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <put+0xb4>)
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <put+0xbc>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d125      	bne.n	800112e <put+0xa2>
			(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <put+0xc0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
	if((tx_e == tx_f) && // jeżeli bufor wysyłający był pusty przed dodaniem znaków łańcucha
 80010ec:	2b80      	cmp	r3, #128	; 0x80
 80010ee:	d11e      	bne.n	800112e <put+0xa2>
		tx_e = index; // przesunięcie wskaźnika na puste miejsce po dodaniu znaków łańcucha
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <put+0xb4>)
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	7013      	strb	r3, [r2, #0]
		uint8_t tmp = TxBUF[tx_f]; // zapamiętanie znaku do wysłania
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <put+0xbc>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <put+0xb8>)
 80010fe:	5c9b      	ldrb	r3, [r3, r2]
 8001100:	73fb      	strb	r3, [r7, #15]
		if (tx_f == 199)
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <put+0xbc>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2bc7      	cmp	r3, #199	; 0xc7
 8001108:	d103      	bne.n	8001112 <put+0x86>
			tx_f = 0;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <put+0xbc>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e005      	b.n	800111e <put+0x92>
		else
			tx_f++;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <put+0xbc>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <put+0xbc>)
 800111c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800111e:	f107 030f 	add.w	r3, r7, #15
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	4809      	ldr	r0, [pc, #36]	; (800114c <put+0xc0>)
 8001128:	f002 fe8f 	bl	8003e4a <HAL_UART_Transmit_IT>
			(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 800112c:	e002      	b.n	8001134 <put+0xa8>
	} else // jeżel w buforze są dane
		tx_e = index; // znaki łańcucha czekają w kolejce w buforze
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <put+0xb4>)
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001134:	b662      	cpsie	i
	__enable_irq();
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200001fa 	.word	0x200001fa
 8001144:	2000023c 	.word	0x2000023c
 8001148:	200001fb 	.word	0x200001fb
 800114c:	20000768 	.word	0x20000768

08001150 <readChar>:


void readChar() {
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8001156:	af00      	add	r7, sp, #0

	if (RxBUF[rx_f] == 0xEE) { // znak początku ramki
 8001158:	4ba0      	ldr	r3, [pc, #640]	; (80013dc <readChar+0x28c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4ba0      	ldr	r3, [pc, #640]	; (80013e0 <readChar+0x290>)
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	2bee      	cmp	r3, #238	; 0xee
 8001164:	d124      	bne.n	80011b0 <readChar+0x60>
		counter = 0; // ustawienie wartości startowych zmiennych
 8001166:	4b9f      	ldr	r3, [pc, #636]	; (80013e4 <readChar+0x294>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
		frameStarted = true;  // wskaźnik czy ramka się zaczęła
 800116c:	4b9e      	ldr	r3, [pc, #632]	; (80013e8 <readChar+0x298>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
		frameCompleted = false; //wskaźnik czy ramka się skończyła
 8001172:	4b9e      	ldr	r3, [pc, #632]	; (80013ec <readChar+0x29c>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
		dataLength = 0;  // długość pola danych
 8001178:	4b9d      	ldr	r3, [pc, #628]	; (80013f0 <readChar+0x2a0>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
		sign0xEAIsRead = false;
 800117e:	4b9d      	ldr	r3, [pc, #628]	; (80013f4 <readChar+0x2a4>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 14; i++){
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800118a:	e00a      	b.n	80011a2 <readChar+0x52>
			frame[i] = 0x00;
 800118c:	4a9a      	ldr	r2, [pc, #616]	; (80013f8 <readChar+0x2a8>)
 800118e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8001192:	4413      	add	r3, r2
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 14; i++){
 8001198:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800119c:	3301      	adds	r3, #1
 800119e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80011a2:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80011a6:	2b0d      	cmp	r3, #13
 80011a8:	ddf0      	ble.n	800118c <readChar+0x3c>
		}
		error = 0;
 80011aa:	4b94      	ldr	r3, [pc, #592]	; (80013fc <readChar+0x2ac>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
	}

	if (!frameStarted) {
 80011b0:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <readChar+0x298>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00e      	beq.n	80011dc <readChar+0x8c>
		if (rx_f == 199)
 80011be:	4b87      	ldr	r3, [pc, #540]	; (80013dc <readChar+0x28c>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2bc7      	cmp	r3, #199	; 0xc7
 80011c4:	d103      	bne.n	80011ce <readChar+0x7e>
				rx_f = 0;
 80011c6:	4b85      	ldr	r3, [pc, #532]	; (80013dc <readChar+0x28c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
		else
				rx_f++;
		return;
 80011cc:	e16f      	b.n	80014ae <readChar+0x35e>
				rx_f++;
 80011ce:	4b83      	ldr	r3, [pc, #524]	; (80013dc <readChar+0x28c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b81      	ldr	r3, [pc, #516]	; (80013dc <readChar+0x28c>)
 80011d8:	701a      	strb	r2, [r3, #0]
		return;
 80011da:	e168      	b.n	80014ae <readChar+0x35e>
	}

	frame[counter] = RxBUF[rx_f]; // przepisanie znaku bufora
 80011dc:	4b7f      	ldr	r3, [pc, #508]	; (80013dc <readChar+0x28c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4b80      	ldr	r3, [pc, #512]	; (80013e4 <readChar+0x294>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b7d      	ldr	r3, [pc, #500]	; (80013e0 <readChar+0x290>)
 80011ea:	5c59      	ldrb	r1, [r3, r1]
 80011ec:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <readChar+0x2a8>)
 80011ee:	5499      	strb	r1, [r3, r2]

	if (counter == 5 + dataLength) { // sprawdzenie, czy odczytano ostatni znak ramki
 80011f0:	4b7c      	ldr	r3, [pc, #496]	; (80013e4 <readChar+0x294>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b7e      	ldr	r3, [pc, #504]	; (80013f0 <readChar+0x2a0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3305      	adds	r3, #5
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d102      	bne.n	8001206 <readChar+0xb6>
		frameCompleted = true;
 8001200:	4b7a      	ldr	r3, [pc, #488]	; (80013ec <readChar+0x29c>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
	}

	if (!frameCompleted) {
 8001206:	4b79      	ldr	r3, [pc, #484]	; (80013ec <readChar+0x29c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	f083 0301 	eor.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d07e      	beq.n	8001312 <readChar+0x1c2>
		if (counter == 1) {
 8001214:	4b73      	ldr	r3, [pc, #460]	; (80013e4 <readChar+0x294>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d10e      	bne.n	800123a <readChar+0xea>
			if (frame[1] > 0x08) { // błędna zawartośc pola LENGTH
 800121c:	4b76      	ldr	r3, [pc, #472]	; (80013f8 <readChar+0x2a8>)
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	2b08      	cmp	r3, #8
 8001222:	d905      	bls.n	8001230 <readChar+0xe0>

				error = 0x09;
 8001224:	4b75      	ldr	r3, [pc, #468]	; (80013fc <readChar+0x2ac>)
 8001226:	2209      	movs	r2, #9
 8001228:	701a      	strb	r2, [r3, #0]
				my_Error_Handler();
 800122a:	f000 fa97 	bl	800175c <my_Error_Handler>
				return;
 800122e:	e13e      	b.n	80014ae <readChar+0x35e>
			}
			else
				dataLength = frame[1];  // długośc pola DATA przed ew. przekodowaniem
 8001230:	4b71      	ldr	r3, [pc, #452]	; (80013f8 <readChar+0x2a8>)
 8001232:	785b      	ldrb	r3, [r3, #1]
 8001234:	461a      	mov	r2, r3
 8001236:	4b6e      	ldr	r3, [pc, #440]	; (80013f0 <readChar+0x2a0>)
 8001238:	601a      	str	r2, [r3, #0]
		}
		if (counter == 2) {
 800123a:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <readChar+0x294>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d110      	bne.n	8001264 <readChar+0x114>
			char test = frame[2] ^ frame[1];
 8001242:	4b6d      	ldr	r3, [pc, #436]	; (80013f8 <readChar+0x2a8>)
 8001244:	789a      	ldrb	r2, [r3, #2]
 8001246:	4b6c      	ldr	r3, [pc, #432]	; (80013f8 <readChar+0x2a8>)
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	4053      	eors	r3, r2
 800124c:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
			if (test != 0xFF)  { // błędna zawartośc pola NOT_LENGTH
 8001250:	f897 33eb 	ldrb.w	r3, [r7, #1003]	; 0x3eb
 8001254:	2bff      	cmp	r3, #255	; 0xff
 8001256:	d005      	beq.n	8001264 <readChar+0x114>
				error = 0x08;
 8001258:	4b68      	ldr	r3, [pc, #416]	; (80013fc <readChar+0x2ac>)
 800125a:	2208      	movs	r2, #8
 800125c:	701a      	strb	r2, [r3, #0]
				my_Error_Handler();
 800125e:	f000 fa7d 	bl	800175c <my_Error_Handler>
				return;
 8001262:	e124      	b.n	80014ae <readChar+0x35e>
			}
		}
		if (dataLength > 0) {  //sprawdza wtedy kiedy dataLengt jest większe od zera
 8001264:	4b62      	ldr	r3, [pc, #392]	; (80013f0 <readChar+0x2a0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	dd47      	ble.n	80012fc <readChar+0x1ac>
			if (counter > 3 && counter <= counter + dataLength) { // pole DATA
 800126c:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <readChar+0x294>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d943      	bls.n	80012fc <readChar+0x1ac>
 8001274:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <readChar+0x294>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <readChar+0x294>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <readChar+0x2a0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	440b      	add	r3, r1
 8001286:	429a      	cmp	r2, r3
 8001288:	dc38      	bgt.n	80012fc <readChar+0x1ac>
				if (sign0xEAIsRead) { // sprawdzenie czy poprzedni znak to 0xEA
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <readChar+0x2a4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d024      	beq.n	80012dc <readChar+0x18c>
					sign0xEAIsRead = false;
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <readChar+0x2a4>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
					if (RxBUF[rx_f] == 0xEB)
 8001298:	4b50      	ldr	r3, [pc, #320]	; (80013dc <readChar+0x28c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <readChar+0x290>)
 80012a0:	5c9b      	ldrb	r3, [r3, r2]
 80012a2:	2beb      	cmp	r3, #235	; 0xeb
 80012a4:	d106      	bne.n	80012b4 <readChar+0x164>
						frame[counter] = 0xEE; // dekodowanie znaku 0xEE
 80012a6:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <readChar+0x294>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <readChar+0x2a8>)
 80012ae:	21ee      	movs	r1, #238	; 0xee
 80012b0:	5499      	strb	r1, [r3, r2]
 80012b2:	e013      	b.n	80012dc <readChar+0x18c>
					else if (RxBUF[rx_f] == 0xEC)
 80012b4:	4b49      	ldr	r3, [pc, #292]	; (80013dc <readChar+0x28c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <readChar+0x290>)
 80012bc:	5c9b      	ldrb	r3, [r3, r2]
 80012be:	2bec      	cmp	r3, #236	; 0xec
 80012c0:	d106      	bne.n	80012d0 <readChar+0x180>
						frame[counter] = 0xEA; // dekodowanie znaku 0xEA
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <readChar+0x294>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b4b      	ldr	r3, [pc, #300]	; (80013f8 <readChar+0x2a8>)
 80012ca:	21ea      	movs	r1, #234	; 0xea
 80012cc:	5499      	strb	r1, [r3, r2]
 80012ce:	e005      	b.n	80012dc <readChar+0x18c>
					else {
						error = 0x07;
 80012d0:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <readChar+0x2ac>)
 80012d2:	2207      	movs	r2, #7
 80012d4:	701a      	strb	r2, [r3, #0]
						my_Error_Handler();
 80012d6:	f000 fa41 	bl	800175c <my_Error_Handler>
						return;
 80012da:	e0e8      	b.n	80014ae <readChar+0x35e>
					}
				}
				if (frame[counter] == 0xEA) {
 80012dc:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <readChar+0x294>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <readChar+0x2a8>)
 80012e4:	5c9b      	ldrb	r3, [r3, r2]
 80012e6:	2bea      	cmp	r3, #234	; 0xea
 80012e8:	d108      	bne.n	80012fc <readChar+0x1ac>
					sign0xEAIsRead = true;
 80012ea:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <readChar+0x2a4>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
					counter--;  // w celu przykrycia bieżącego znaku przez następny
 80012f0:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <readChar+0x294>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <readChar+0x294>)
 80012fa:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (counter == 5 + dataLength)
 80012fc:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <readChar+0x294>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <readChar+0x2a0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3305      	adds	r3, #5
 8001308:	429a      	cmp	r2, r3
 800130a:	d102      	bne.n	8001312 <readChar+0x1c2>
			frameCompleted = true; // przeczytano wszystkie znaki ramki
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <readChar+0x29c>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
	}

	if (frameCompleted) {    // jeżeli ramka jest przeczytana to sprawdzamy CRC
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <readChar+0x29c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80b5 	beq.w	8001486 <readChar+0x336>
		checkCRC();
 800131c:	f000 f8e2 	bl	80014e4 <checkCRC>
		if (!crcCorrect) {  // jeśli jest zła to wyświetlamy błąd
 8001320:	4b37      	ldr	r3, [pc, #220]	; (8001400 <readChar+0x2b0>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	f083 0301 	eor.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <readChar+0x1ea>
			error = 0x06;
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <readChar+0x2ac>)
 8001330:	2206      	movs	r2, #6
 8001332:	701a      	strb	r2, [r3, #0]
			my_Error_Handler();
 8001334:	f000 fa12 	bl	800175c <my_Error_Handler>
			return;
 8001338:	e0b9      	b.n	80014ae <readChar+0x35e>
		} else          // jeśli wszystko jest dobrze to możemy zacząć analizować ramkę (sprawdzamy polecenia)
			if (frame[3] != 0x11 && frame[3] != 0x22 && frame[3] != 0x33
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <readChar+0x2a8>)
 800133c:	78db      	ldrb	r3, [r3, #3]
 800133e:	2b11      	cmp	r3, #17
 8001340:	d029      	beq.n	8001396 <readChar+0x246>
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <readChar+0x2a8>)
 8001344:	78db      	ldrb	r3, [r3, #3]
 8001346:	2b22      	cmp	r3, #34	; 0x22
 8001348:	d025      	beq.n	8001396 <readChar+0x246>
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <readChar+0x2a8>)
 800134c:	78db      	ldrb	r3, [r3, #3]
 800134e:	2b33      	cmp	r3, #51	; 0x33
 8001350:	d021      	beq.n	8001396 <readChar+0x246>
					&& frame[3] != 0x44 && frame[3] != 0x01 && frame[3] != 0x02
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <readChar+0x2a8>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	2b44      	cmp	r3, #68	; 0x44
 8001358:	d01d      	beq.n	8001396 <readChar+0x246>
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <readChar+0x2a8>)
 800135c:	78db      	ldrb	r3, [r3, #3]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d019      	beq.n	8001396 <readChar+0x246>
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <readChar+0x2a8>)
 8001364:	78db      	ldrb	r3, [r3, #3]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d015      	beq.n	8001396 <readChar+0x246>
					&& frame[3] != 0x03 && frame[3] != 0x04 && frame[3] != 0x66 && frame[3] != 0x55) {
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <readChar+0x2a8>)
 800136c:	78db      	ldrb	r3, [r3, #3]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d011      	beq.n	8001396 <readChar+0x246>
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <readChar+0x2a8>)
 8001374:	78db      	ldrb	r3, [r3, #3]
 8001376:	2b04      	cmp	r3, #4
 8001378:	d00d      	beq.n	8001396 <readChar+0x246>
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <readChar+0x2a8>)
 800137c:	78db      	ldrb	r3, [r3, #3]
 800137e:	2b66      	cmp	r3, #102	; 0x66
 8001380:	d009      	beq.n	8001396 <readChar+0x246>
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <readChar+0x2a8>)
 8001384:	78db      	ldrb	r3, [r3, #3]
 8001386:	2b55      	cmp	r3, #85	; 0x55
 8001388:	d005      	beq.n	8001396 <readChar+0x246>
				error = 0x05;  // nierozpoznane polecenie
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <readChar+0x2ac>)
 800138c:	2205      	movs	r2, #5
 800138e:	701a      	strb	r2, [r3, #0]
				my_Error_Handler();
 8001390:	f000 f9e4 	bl	800175c <my_Error_Handler>
				return;
 8001394:	e08b      	b.n	80014ae <readChar+0x35e>
			}


		//Wybór komendy oraz obsługa błędu
		switch(frame[3]){ // komendy
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <readChar+0x2a8>)
 8001398:	78db      	ldrb	r3, [r3, #3]
 800139a:	2b33      	cmp	r3, #51	; 0x33
 800139c:	d06f      	beq.n	800147e <readChar+0x32e>
 800139e:	2b33      	cmp	r3, #51	; 0x33
 80013a0:	dc04      	bgt.n	80013ac <readChar+0x25c>
 80013a2:	2b11      	cmp	r3, #17
 80013a4:	d04d      	beq.n	8001442 <readChar+0x2f2>
 80013a6:	2b22      	cmp	r3, #34	; 0x22
 80013a8:	d032      	beq.n	8001410 <readChar+0x2c0>
 80013aa:	e06c      	b.n	8001486 <readChar+0x336>
 80013ac:	2b55      	cmp	r3, #85	; 0x55
 80013ae:	d002      	beq.n	80013b6 <readChar+0x266>
 80013b0:	2b66      	cmp	r3, #102	; 0x66
 80013b2:	d059      	beq.n	8001468 <readChar+0x318>
 80013b4:	e067      	b.n	8001486 <readChar+0x336>
					case  0x55:
						put("\nkomenda 0x55");
 80013b6:	4813      	ldr	r0, [pc, #76]	; (8001404 <readChar+0x2b4>)
 80013b8:	f7ff fe68 	bl	800108c <put>

						LCD_clrScr();
 80013bc:	f000 fbce 	bl	8001b5c <LCD_clrScr>
						char tab_meancpm[100];
						sprintf(tab_meancpm, "MCPM: %d", meanCPM);
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <readChar+0x2b8>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	463b      	mov	r3, r7
 80013c6:	4911      	ldr	r1, [pc, #68]	; (800140c <readChar+0x2bc>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 feed 	bl	80051a8 <siprintf>
						LCD_print(tab_meancpm,0,4);
 80013ce:	463b      	mov	r3, r7
 80013d0:	2204      	movs	r2, #4
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fba3 	bl	8001b20 <LCD_print>

						break;
 80013da:	e054      	b.n	8001486 <readChar+0x336>
 80013dc:	200001f9 	.word	0x200001f9
 80013e0:	200003ec 	.word	0x200003ec
 80013e4:	200001fc 	.word	0x200001fc
 80013e8:	200001fd 	.word	0x200001fd
 80013ec:	200001fe 	.word	0x200001fe
 80013f0:	200003e8 	.word	0x200003e8
 80013f4:	200001ff 	.word	0x200001ff
 80013f8:	20000380 	.word	0x20000380
 80013fc:	200003e4 	.word	0x200003e4
 8001400:	20000230 	.word	0x20000230
 8001404:	08007ff8 	.word	0x08007ff8
 8001408:	2000021c 	.word	0x2000021c
 800140c:	08007fec 	.word	0x08007fec

					case 0x22:
						put("\nkomenda 0x22");
 8001410:	4829      	ldr	r0, [pc, #164]	; (80014b8 <readChar+0x368>)
 8001412:	f7ff fe3b 	bl	800108c <put>

						LCD_clrScr();
 8001416:	f000 fba1 	bl	8001b5c <LCD_clrScr>
						char res[1000];
						sprintf(res, "uSH: %.4f", uSperH);
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <readChar+0x36c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f802 	bl	8000428 <__aeabi_f2d>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4638      	mov	r0, r7
 800142a:	461a      	mov	r2, r3
 800142c:	4623      	mov	r3, r4
 800142e:	4924      	ldr	r1, [pc, #144]	; (80014c0 <readChar+0x370>)
 8001430:	f003 feba 	bl	80051a8 <siprintf>
						LCD_print(res,0,1);
 8001434:	463b      	mov	r3, r7
 8001436:	2201      	movs	r2, #1
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fb70 	bl	8001b20 <LCD_print>

						break;
 8001440:	e021      	b.n	8001486 <readChar+0x336>
					case 0x11:
						put("\nkomenda 0x11");
 8001442:	4820      	ldr	r0, [pc, #128]	; (80014c4 <readChar+0x374>)
 8001444:	f7ff fe22 	bl	800108c <put>

						LCD_clrScr();
 8001448:	f000 fb88 	bl	8001b5c <LCD_clrScr>
						char tab_cpm[1000];
						sprintf(tab_cpm, "CPM: %d", CPM);
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <readChar+0x378>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	463b      	mov	r3, r7
 8001452:	491e      	ldr	r1, [pc, #120]	; (80014cc <readChar+0x37c>)
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fea7 	bl	80051a8 <siprintf>
						LCD_print(tab_cpm,0,2);
 800145a:	463b      	mov	r3, r7
 800145c:	2202      	movs	r2, #2
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fb5d 	bl	8001b20 <LCD_print>

						break;
 8001466:	e00e      	b.n	8001486 <readChar+0x336>
					case 0x66:
						put("\nkomenda 0x66");
 8001468:	4819      	ldr	r0, [pc, #100]	; (80014d0 <readChar+0x380>)
 800146a:	f7ff fe0f 	bl	800108c <put>
						LCD_clrScr();
 800146e:	f000 fb75 	bl	8001b5c <LCD_clrScr>
						LCD_print("Milo Mi!",0,0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	4817      	ldr	r0, [pc, #92]	; (80014d4 <readChar+0x384>)
 8001478:	f000 fb52 	bl	8001b20 <LCD_print>

						break;
 800147c:	e003      	b.n	8001486 <readChar+0x336>
					case 0x33:
						put("\nkomenda 0x33");
 800147e:	4816      	ldr	r0, [pc, #88]	; (80014d8 <readChar+0x388>)
 8001480:	f7ff fe04 	bl	800108c <put>
						break;
 8001484:	bf00      	nop
		}
	}
	if (rx_f == 199)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <readChar+0x38c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2bc7      	cmp	r3, #199	; 0xc7
 800148c:	d103      	bne.n	8001496 <readChar+0x346>
			rx_f = 0;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <readChar+0x38c>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
 8001494:	e005      	b.n	80014a2 <readChar+0x352>
	else
			rx_f++;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <readChar+0x38c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <readChar+0x38c>)
 80014a0:	701a      	strb	r2, [r3, #0]
	counter++;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <readChar+0x390>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <readChar+0x390>)
 80014ac:	701a      	strb	r2, [r3, #0]
}
 80014ae:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	08008008 	.word	0x08008008
 80014bc:	20000304 	.word	0x20000304
 80014c0:	08007fd8 	.word	0x08007fd8
 80014c4:	08008018 	.word	0x08008018
 80014c8:	20000210 	.word	0x20000210
 80014cc:	08007fe4 	.word	0x08007fe4
 80014d0:	08008028 	.word	0x08008028
 80014d4:	08008038 	.word	0x08008038
 80014d8:	08008044 	.word	0x08008044
 80014dc:	200001f9 	.word	0x200001f9
 80014e0:	200001fc 	.word	0x200001fc

080014e4 <checkCRC>:

void checkCRC() {//Obliczanie CRC
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
	crc[0] = crc[1] = 0x00;
 80014ea:	4b4e      	ldr	r3, [pc, #312]	; (8001624 <checkCRC+0x140>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	705a      	strb	r2, [r3, #1]
 80014f0:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <checkCRC+0x140>)
 80014f2:	785a      	ldrb	r2, [r3, #1]
 80014f4:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <checkCRC+0x140>)
 80014f6:	701a      	strb	r2, [r3, #0]
	int frameLength = 4 + dataLength; // długość ramki to znak  początka, leng, notg i komenda dlatego 4+)
 80014f8:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <checkCRC+0x144>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3304      	adds	r3, #4
 80014fe:	603b      	str	r3, [r7, #0]
 	for(int i = 0; i < frameLength; i++) { // sprawdzanie kolejnych bajtów ramki
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e048      	b.n	8001598 <checkCRC+0xb4>
 		char byte = frame[i];
 8001506:	4a49      	ldr	r2, [pc, #292]	; (800162c <checkCRC+0x148>)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	74fb      	strb	r3, [r7, #19]
 		int numberOf1 = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
 		for(int j = 0; j < 8; j++){ // zliczanie jedynek w bitach kolejnego bajtu
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	e00d      	b.n	8001536 <checkCRC+0x52>
 			if (byte & 0x01)
 800151a:	7cfb      	ldrb	r3, [r7, #19]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <checkCRC+0x46>
 				numberOf1++;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3301      	adds	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
 			byte >>= 1;
 800152a:	7cfb      	ldrb	r3, [r7, #19]
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	74fb      	strb	r3, [r7, #19]
 		for(int j = 0; j < 8; j++){ // zliczanie jedynek w bitach kolejnego bajtu
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	3301      	adds	r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2b07      	cmp	r3, #7
 800153a:	ddee      	ble.n	800151a <checkCRC+0x36>
 		}
 		if (numberOf1 == 1 || numberOf1 == 3 || numberOf1 == 5 || numberOf1 == 7)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d008      	beq.n	8001554 <checkCRC+0x70>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d005      	beq.n	8001554 <checkCRC+0x70>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b05      	cmp	r3, #5
 800154c:	d002      	beq.n	8001554 <checkCRC+0x70>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b07      	cmp	r3, #7
 8001552:	d106      	bne.n	8001562 <checkCRC+0x7e>
 			crc[1] |= 0x01; // ustawienie najmłodszego bitu kodu crc
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <checkCRC+0x140>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <checkCRC+0x140>)
 8001560:	705a      	strb	r2, [r3, #1]

 		crc[0] <<= 1;		// przesunięcie bitowe słowa 16-bitowego
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <checkCRC+0x140>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <checkCRC+0x140>)
 800156c:	701a      	strb	r2, [r3, #0]
 		if (crc[1] & 0x80)
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <checkCRC+0x140>)
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	b25b      	sxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	da06      	bge.n	8001586 <checkCRC+0xa2>
 			crc[0] |= 0x01;
 8001578:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <checkCRC+0x140>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <checkCRC+0x140>)
 8001584:	701a      	strb	r2, [r3, #0]
 		crc[1] <<= 1;
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <checkCRC+0x140>)
 8001588:	785b      	ldrb	r3, [r3, #1]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <checkCRC+0x140>)
 8001590:	705a      	strb	r2, [r3, #1]
 	for(int i = 0; i < frameLength; i++) { // sprawdzanie kolejnych bajtów ramki
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbb2      	blt.n	8001506 <checkCRC+0x22>
 	}
 	for(int i = 0; i < 15 - frameLength; i++) { // przesunięcie do najstarszego bitu
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	e01a      	b.n	80015dc <checkCRC+0xf8>
 		crc[0] <<= 1;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <checkCRC+0x140>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <checkCRC+0x140>)
 80015b0:	701a      	strb	r2, [r3, #0]
 		if (crc[1] & 0x80)
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <checkCRC+0x140>)
 80015b4:	785b      	ldrb	r3, [r3, #1]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da06      	bge.n	80015ca <checkCRC+0xe6>
 			crc[0] |= 0x01;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <checkCRC+0x140>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <checkCRC+0x140>)
 80015c8:	701a      	strb	r2, [r3, #0]
 		crc[1] <<= 1;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <checkCRC+0x140>)
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <checkCRC+0x140>)
 80015d4:	705a      	strb	r2, [r3, #1]
 	for(int i = 0; i < 15 - frameLength; i++) { // przesunięcie do najstarszego bitu
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3301      	adds	r3, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f1c3 030f 	rsb	r3, r3, #15
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbde      	blt.n	80015a6 <checkCRC+0xc2>
 	}
 	// Porównanie otrzymanego CRC z obliczonym
 	if (frame[counter - 1] == crc[0] && frame[counter] == crc[1])
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <checkCRC+0x14c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <checkCRC+0x148>)
 80015f0:	5cd2      	ldrb	r2, [r2, r3]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <checkCRC+0x140>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d10c      	bne.n	8001614 <checkCRC+0x130>
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <checkCRC+0x14c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <checkCRC+0x148>)
 8001602:	5c9a      	ldrb	r2, [r3, r2]
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <checkCRC+0x140>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	429a      	cmp	r2, r3
 800160a:	d103      	bne.n	8001614 <checkCRC+0x130>
 		crcCorrect = true;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <checkCRC+0x150>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e002      	b.n	800161a <checkCRC+0x136>
 	else
 		crcCorrect = false;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <checkCRC+0x150>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
}
 800161a:	bf00      	nop
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	20000238 	.word	0x20000238
 8001628:	200003e8 	.word	0x200003e8
 800162c:	20000380 	.word	0x20000380
 8001630:	200001fc 	.word	0x200001fc
 8001634:	20000230 	.word	0x20000230

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	LCD_setRST(RST_GPIO_Port, RST_Pin);
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	481d      	ldr	r0, [pc, #116]	; (80016b4 <main+0x7c>)
 8001640:	f000 f910 	bl	8001864 <LCD_setRST>
	LCD_setCE(CE_GPIO_Port, CE_Pin);
 8001644:	2140      	movs	r1, #64	; 0x40
 8001646:	481c      	ldr	r0, [pc, #112]	; (80016b8 <main+0x80>)
 8001648:	f000 f920 	bl	800188c <LCD_setCE>
	LCD_setDC(DC_GPIO_Port, DC_Pin);
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	481b      	ldr	r0, [pc, #108]	; (80016bc <main+0x84>)
 8001650:	f000 f930 	bl	80018b4 <LCD_setDC>
	LCD_setDIN(Din_GPIO_Port, Din_Pin);
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	4819      	ldr	r0, [pc, #100]	; (80016bc <main+0x84>)
 8001658:	f000 f940 	bl	80018dc <LCD_setDIN>
	LCD_setCLK(Clk_GPIO_Port, Clk_Pin);
 800165c:	2120      	movs	r1, #32
 800165e:	4817      	ldr	r0, [pc, #92]	; (80016bc <main+0x84>)
 8001660:	f000 f950 	bl	8001904 <LCD_setCLK>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001664:	f000 fd14 	bl	8002090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001668:	f000 f836 	bl	80016d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166c:	f7ff faf2 	bl	8000c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001670:	f000 fc78 	bl	8001f64 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001674:	f000 fbac 	bl	8001dd0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001678:	f000 fb5a 	bl	8001d30 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800167c:	2108      	movs	r1, #8
 800167e:	4810      	ldr	r0, [pc, #64]	; (80016c0 <main+0x88>)
 8001680:	f001 fd3a 	bl	80030f8 <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive_IT(&huart2, &RxBUF[rx_e], 1);
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <main+0x8c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <main+0x90>)
 800168c:	4413      	add	r3, r2
 800168e:	2201      	movs	r2, #1
 8001690:	4619      	mov	r1, r3
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <main+0x94>)
 8001694:	f002 fc1d 	bl	8003ed2 <HAL_UART_Receive_IT>

  put("\nWpisz ramke: ");
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <main+0x98>)
 800169a:	f7ff fcf7 	bl	800108c <put>

  LCD_init();
 800169e:	f000 f9c7 	bl	8001a30 <LCD_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (rx_e != rx_f)
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <main+0x8c>)
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <main+0x9c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d0f9      	beq.n	80016a2 <main+0x6a>
		  readChar();
 80016ae:	f7ff fd4f 	bl	8001150 <readChar>
	  if (rx_e != rx_f)
 80016b2:	e7f6      	b.n	80016a2 <main+0x6a>
 80016b4:	40011000 	.word	0x40011000
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	40010800 	.word	0x40010800
 80016c0:	20000720 	.word	0x20000720
 80016c4:	200001f8 	.word	0x200001f8
 80016c8:	200003ec 	.word	0x200003ec
 80016cc:	20000768 	.word	0x20000768
 80016d0:	08008054 	.word	0x08008054
 80016d4:	200001f9 	.word	0x200001f9

080016d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	2228      	movs	r2, #40	; 0x28
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 ff22 	bl	8004530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016fe:	2301      	movs	r3, #1
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001702:	2310      	movs	r3, #16
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001706:	2302      	movs	r3, #2
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800170a:	2300      	movs	r3, #0
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800170e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001712:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001714:	f107 0318 	add.w	r3, r7, #24
 8001718:	4618      	mov	r0, r3
 800171a:	f001 f833 	bl	8002784 <HAL_RCC_OscConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001724:	f000 f89a 	bl	800185c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001728:	230f      	movs	r3, #15
 800172a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172c:	2302      	movs	r3, #2
 800172e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001734:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2102      	movs	r1, #2
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fa9e 	bl	8002c84 <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800174e:	f000 f885 	bl	800185c <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	3740      	adds	r7, #64	; 0x40
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <my_Error_Handler>:

/* USER CODE BEGIN 4 */

void my_Error_Handler()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
	counter = 0;
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <my_Error_Handler+0xc4>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
	frameStarted = false;
 8001768:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <my_Error_Handler+0xc8>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
	frameCompleted = false;
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <my_Error_Handler+0xcc>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
	dataLength = 0;
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <my_Error_Handler+0xd0>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	sign0xEAIsRead = false;
 800177a:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <my_Error_Handler+0xd4>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 14; i++){
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	e007      	b.n	8001796 <my_Error_Handler+0x3a>
		frame[i] = 0x00;
 8001786:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <my_Error_Handler+0xd8>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 14; i++){
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3301      	adds	r3, #1
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0d      	cmp	r3, #13
 800179a:	ddf4      	ble.n	8001786 <my_Error_Handler+0x2a>
	}
	if (rx_f == 199)
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <my_Error_Handler+0xdc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2bc7      	cmp	r3, #199	; 0xc7
 80017a2:	d103      	bne.n	80017ac <my_Error_Handler+0x50>
			rx_f = 0;
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <my_Error_Handler+0xdc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e005      	b.n	80017b8 <my_Error_Handler+0x5c>
	else
			rx_f++;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <my_Error_Handler+0xdc>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <my_Error_Handler+0xdc>)
 80017b6:	701a      	strb	r2, [r3, #0]

	switch (error) {
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <my_Error_Handler+0xe0>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	3b05      	subs	r3, #5
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d826      	bhi.n	8001810 <my_Error_Handler+0xb4>
 80017c2:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <my_Error_Handler+0x6c>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	080017e1 	.word	0x080017e1
 80017cc:	080017e9 	.word	0x080017e9
 80017d0:	080017f1 	.word	0x080017f1
 80017d4:	080017f9 	.word	0x080017f9
 80017d8:	08001801 	.word	0x08001801
 80017dc:	08001809 	.word	0x08001809
	case 0x05: put("\nNierozpoznane polecenie. ");                      //EE00FF000000
 80017e0:	4817      	ldr	r0, [pc, #92]	; (8001840 <my_Error_Handler+0xe4>)
 80017e2:	f7ff fc53 	bl	800108c <put>
			   break;
 80017e6:	e017      	b.n	8001818 <my_Error_Handler+0xbc>
	case 0x06: put("\nBledny kod CRC. ");			                      //EE00FF110001
 80017e8:	4816      	ldr	r0, [pc, #88]	; (8001844 <my_Error_Handler+0xe8>)
 80017ea:	f7ff fc4f 	bl	800108c <put>
			   break;
 80017ee:	e013      	b.n	8001818 <my_Error_Handler+0xbc>
	case 0x07: put("\nBledny znak po znaku 0xEA. ");                    //EE01FE33EA00
 80017f0:	4815      	ldr	r0, [pc, #84]	; (8001848 <my_Error_Handler+0xec>)
 80017f2:	f7ff fc4b 	bl	800108c <put>
			   break;
 80017f6:	e00f      	b.n	8001818 <my_Error_Handler+0xbc>
	case 0x08: put("\nBledna struktura ramki. ");                       //EE0022
 80017f8:	4814      	ldr	r0, [pc, #80]	; (800184c <my_Error_Handler+0xf0>)
 80017fa:	f7ff fc47 	bl	800108c <put>
			   break;
 80017fe:	e00b      	b.n	8001818 <my_Error_Handler+0xbc>
	case 0x09: put("\nBledna zawartosc pola LENGTH. ");                //EEFF00
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <my_Error_Handler+0xf4>)
 8001802:	f7ff fc43 	bl	800108c <put>
			   break;							                       // dobra:EE00FF330000, EE08F73304040404040404046FF0, EE01FE660660
 8001806:	e007      	b.n	8001818 <my_Error_Handler+0xbc>
	case 0x0A: put("\nPrzekroczony zakres amplitudy ");
 8001808:	4812      	ldr	r0, [pc, #72]	; (8001854 <my_Error_Handler+0xf8>)
 800180a:	f7ff fc3f 	bl	800108c <put>
			   break;
 800180e:	e003      	b.n	8001818 <my_Error_Handler+0xbc>
	default:   put("\nNierozpoznany kod bledu. ");
 8001810:	4811      	ldr	r0, [pc, #68]	; (8001858 <my_Error_Handler+0xfc>)
 8001812:	f7ff fc3b 	bl	800108c <put>
			   break;
 8001816:	bf00      	nop
	}
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200001fc 	.word	0x200001fc
 8001824:	200001fd 	.word	0x200001fd
 8001828:	200001fe 	.word	0x200001fe
 800182c:	200003e8 	.word	0x200003e8
 8001830:	200001ff 	.word	0x200001ff
 8001834:	20000380 	.word	0x20000380
 8001838:	200001f9 	.word	0x200001f9
 800183c:	200003e4 	.word	0x200003e4
 8001840:	08008064 	.word	0x08008064
 8001844:	08008080 	.word	0x08008080
 8001848:	08008094 	.word	0x08008094
 800184c:	080080b4 	.word	0x080080b4
 8001850:	080080d0 	.word	0x080080d0
 8001854:	080080f0 	.word	0x080080f0
 8001858:	08008110 	.word	0x08008110

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001862:	e7fe      	b.n	8001862 <Error_Handler+0x6>

08001864 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8001870:	4a05      	ldr	r2, [pc, #20]	; (8001888 <LCD_setRST+0x24>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <LCD_setRST+0x24>)
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	8093      	strh	r3, [r2, #4]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200004b4 	.word	0x200004b4

0800188c <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8001898:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <LCD_setCE+0x24>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <LCD_setCE+0x24>)
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	8193      	strh	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	200004b4 	.word	0x200004b4

080018b4 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 80018c0:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <LCD_setDC+0x24>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 80018c6:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <LCD_setDC+0x24>)
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	8293      	strh	r3, [r2, #20]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200004b4 	.word	0x200004b4

080018dc <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 80018e8:	4a05      	ldr	r2, [pc, #20]	; (8001900 <LCD_setDIN+0x24>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <LCD_setDIN+0x24>)
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	8393      	strh	r3, [r2, #28]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200004b4 	.word	0x200004b4

08001904 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <LCD_setCLK+0x24>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <LCD_setCLK+0x24>)
 8001918:	887b      	ldrh	r3, [r7, #2]
 800191a:	8493      	strh	r3, [r2, #36]	; 0x24
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	200004b4 	.word	0x200004b4

0800192c <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	e026      	b.n	800198a <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <LCD_send+0x6c>)
 800193e:	6998      	ldr	r0, [r3, #24]
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <LCD_send+0x6c>)
 8001942:	8b99      	ldrh	r1, [r3, #28]
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	f1c3 0307 	rsb	r3, r3, #7
 800194c:	fa42 f303 	asr.w	r3, r2, r3
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf14      	ite	ne
 8001958:	2301      	movne	r3, #1
 800195a:	2300      	moveq	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	f000 fed6 	bl	8002710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <LCD_send+0x6c>)
 8001966:	6a18      	ldr	r0, [r3, #32]
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <LCD_send+0x6c>)
 800196a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800196c:	2201      	movs	r2, #1
 800196e:	4619      	mov	r1, r3
 8001970:	f000 fece 	bl	8002710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <LCD_send+0x6c>)
 8001976:	6a18      	ldr	r0, [r3, #32]
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <LCD_send+0x6c>)
 800197a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	f000 fec6 	bl	8002710 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	3301      	adds	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	2b07      	cmp	r3, #7
 800198e:	d9d5      	bls.n	800193c <LCD_send+0x10>
  }
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200004b4 	.word	0x200004b4

0800199c <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	460a      	mov	r2, r1
 80019a6:	71fb      	strb	r3, [r7, #7]
 80019a8:	4613      	mov	r3, r2
 80019aa:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 80019ac:	79bb      	ldrb	r3, [r7, #6]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d11c      	bne.n	80019ec <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <LCD_write+0x90>)
 80019b4:	6918      	ldr	r0, [r3, #16]
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <LCD_write+0x90>)
 80019b8:	8a9b      	ldrh	r3, [r3, #20]
 80019ba:	2200      	movs	r2, #0
 80019bc:	4619      	mov	r1, r3
 80019be:	f000 fea7 	bl	8002710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <LCD_write+0x90>)
 80019c4:	6898      	ldr	r0, [r3, #8]
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <LCD_write+0x90>)
 80019c8:	899b      	ldrh	r3, [r3, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	f000 fe9f 	bl	8002710 <HAL_GPIO_WritePin>
    LCD_send(data);
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ffa9 	bl	800192c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <LCD_write+0x90>)
 80019dc:	6898      	ldr	r0, [r3, #8]
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <LCD_write+0x90>)
 80019e0:	899b      	ldrh	r3, [r3, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4619      	mov	r1, r3
 80019e6:	f000 fe93 	bl	8002710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 80019ea:	e01b      	b.n	8001a24 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <LCD_write+0x90>)
 80019ee:	6918      	ldr	r0, [r3, #16]
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <LCD_write+0x90>)
 80019f2:	8a9b      	ldrh	r3, [r3, #20]
 80019f4:	2201      	movs	r2, #1
 80019f6:	4619      	mov	r1, r3
 80019f8:	f000 fe8a 	bl	8002710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <LCD_write+0x90>)
 80019fe:	6898      	ldr	r0, [r3, #8]
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <LCD_write+0x90>)
 8001a02:	899b      	ldrh	r3, [r3, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	f000 fe82 	bl	8002710 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff8c 	bl	800192c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <LCD_write+0x90>)
 8001a16:	6898      	ldr	r0, [r3, #8]
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <LCD_write+0x90>)
 8001a1a:	899b      	ldrh	r3, [r3, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f000 fe76 	bl	8002710 <HAL_GPIO_WritePin>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200004b4 	.word	0x200004b4

08001a30 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <LCD_init+0x64>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <LCD_init+0x64>)
 8001a3a:	889b      	ldrh	r3, [r3, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f000 fe66 	bl	8002710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <LCD_init+0x64>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <LCD_init+0x64>)
 8001a4a:	889b      	ldrh	r3, [r3, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f000 fe5e 	bl	8002710 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8001a54:	2100      	movs	r1, #0
 8001a56:	2021      	movs	r0, #33	; 0x21
 8001a58:	f7ff ffa0 	bl	800199c <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	20b8      	movs	r0, #184	; 0xb8
 8001a60:	f7ff ff9c 	bl	800199c <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8001a64:	2100      	movs	r1, #0
 8001a66:	2004      	movs	r0, #4
 8001a68:	f7ff ff98 	bl	800199c <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2014      	movs	r0, #20
 8001a70:	f7ff ff94 	bl	800199c <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8001a74:	2100      	movs	r1, #0
 8001a76:	2020      	movs	r0, #32
 8001a78:	f7ff ff90 	bl	800199c <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	200c      	movs	r0, #12
 8001a80:	f7ff ff8c 	bl	800199c <LCD_write>
  LCD_clrScr();
 8001a84:	f000 f86a 	bl	8001b5c <LCD_clrScr>
  lcd.inverttext = false;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <LCD_init+0x68>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200004b4 	.word	0x200004b4
 8001a98:	200004dc 	.word	0x200004dc

08001a9c <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e02d      	b.n	8001b08 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <LCD_putChar+0x7c>)
 8001aae:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8001ab2:	f083 0301 	eor.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f1a3 0220 	sub.w	r2, r3, #32
 8001ac2:	4916      	ldr	r1, [pc, #88]	; (8001b1c <LCD_putChar+0x80>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	18ca      	adds	r2, r1, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff60 	bl	800199c <LCD_write>
 8001adc:	e011      	b.n	8001b02 <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f1a3 0220 	sub.w	r2, r3, #32
 8001ae4:	490d      	ldr	r1, [pc, #52]	; (8001b1c <LCD_putChar+0x80>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	18ca      	adds	r2, r1, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2101      	movs	r1, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff4d 	bl	800199c <LCD_write>
  for(int i = 0; i < 6; i++){
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3301      	adds	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	ddce      	ble.n	8001aac <LCD_putChar+0x10>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200004dc 	.word	0x200004dc
 8001b1c:	08008140 	.word	0x08008140

08001b20 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8001b30:	78ba      	ldrb	r2, [r7, #2]
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f82c 	bl	8001b94 <LCD_goXY>
  while(*str){
 8001b3c:	e006      	b.n	8001b4c <LCD_print+0x2c>
    LCD_putChar(*str++);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ffa8 	bl	8001a9c <LCD_putChar>
  while(*str){
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f4      	bne.n	8001b3e <LCD_print+0x1e>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	e00b      	b.n	8001b80 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff ff16 	bl	800199c <LCD_write>
    lcd.buffer[i] = 0;
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <LCD_clrScr+0x34>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001b86:	dbef      	blt.n	8001b68 <LCD_clrScr+0xc>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200004dc 	.word	0x200004dc

08001b94 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	71fb      	strb	r3, [r7, #7]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fef4 	bl	800199c <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff feec 	bl	800199c <LCD_write>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6193      	str	r3, [r2, #24]
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_MspInit+0x5c>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_MspInit+0x60>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_MspInit+0x60>)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <NMI_Handler+0x4>

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c76:	f000 fa51 	bl	800211c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <TIM2_IRQHandler+0x10>)
 8001c86:	f001 fb3d 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000720 	.word	0x20000720

08001c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <USART2_IRQHandler+0x10>)
 8001c9a:	f002 f96f 	bl	8003f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000768 	.word	0x20000768

08001ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cb0:	f000 fd46 	bl	8002740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce8:	f002 fbf8 	bl	80044dc <__errno>
 8001cec:	4602      	mov	r2, r0
 8001cee:	230c      	movs	r3, #12
 8001cf0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <_sbrk+0x64>)
 8001d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20005000 	.word	0x20005000
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	20000224 	.word	0x20000224
 8001d20:	200007b0 	.word	0x200007b0

08001d24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	463b      	mov	r3, r7
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <MX_TIM1_Init+0x9c>)
 8001d50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001d60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d78:	4813      	ldr	r0, [pc, #76]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001d7a:	f001 f91f 	bl	8002fbc <HAL_TIM_Base_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d84:	f7ff fd6a 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d8e:	f107 0308 	add.w	r3, r7, #8
 8001d92:	4619      	mov	r1, r3
 8001d94:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001d96:	f001 fc51 	bl	800363c <HAL_TIM_ConfigClockSource>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001da0:	f7ff fd5c 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_TIM1_Init+0x98>)
 8001db2:	f001 ff8d 	bl	8003cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001dbc:	f7ff fd4e 	bl	800185c <Error_Handler>
  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200006d8 	.word	0x200006d8
 8001dcc:	40012c00 	.word	0x40012c00

08001dd0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001dec:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <MX_TIM2_Init+0xa0>)
 8001dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_TIM2_Init+0xa0>)
 8001df6:	221f      	movs	r2, #31
 8001df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_TIM2_Init+0xa0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_TIM2_Init+0xa0>)
 8001e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_TIM2_Init+0xa0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_TIM2_Init+0xa0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e14:	4816      	ldr	r0, [pc, #88]	; (8001e70 <MX_TIM2_Init+0xa0>)
 8001e16:	f001 f920 	bl	800305a <HAL_TIM_IC_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e20:	f7ff fd1c 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	4619      	mov	r1, r3
 8001e32:	480f      	ldr	r0, [pc, #60]	; (8001e70 <MX_TIM2_Init+0xa0>)
 8001e34:	f001 ff4c 	bl	8003cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e3e:	f7ff fd0d 	bl	800185c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e46:	2301      	movs	r3, #1
 8001e48:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001e52:	463b      	mov	r3, r7
 8001e54:	2208      	movs	r2, #8
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_TIM2_Init+0xa0>)
 8001e5a:	f001 fb5b 	bl	8003514 <HAL_TIM_IC_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001e64:	f7ff fcfa 	bl	800185c <Error_Handler>
  }

}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000720 	.word	0x20000720

08001e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_TIM_Base_MspInit+0x34>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d10b      	bne.n	8001e9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_TIM_Base_MspInit+0x38>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_TIM_Base_MspInit+0x38>)
 8001e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_TIM_Base_MspInit+0x38>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ece:	d13e      	bne.n	8001f4e <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_TIM_IC_MspInit+0xa8>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <HAL_TIM_IC_MspInit+0xa8>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	61d3      	str	r3, [r2, #28]
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_TIM_IC_MspInit+0xa8>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_TIM_IC_MspInit+0xa8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_TIM_IC_MspInit+0xa8>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_TIM_IC_MspInit+0xa8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4811      	ldr	r0, [pc, #68]	; (8001f5c <HAL_TIM_IC_MspInit+0xac>)
 8001f16:	f000 faa1 	bl	800245c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_TIM_IC_MspInit+0xb0>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_TIM_IC_MspInit+0xb0>)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	201c      	movs	r0, #28
 8001f44:	f000 f9dd 	bl	8002302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f48:	201c      	movs	r0, #28
 8001f4a:	f000 f9f6 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3728      	adds	r7, #40	; 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	40010000 	.word	0x40010000

08001f64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_USART2_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	f001 ff08 	bl	8003db0 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f7ff fc59 	bl	800185c <Error_Handler>
  }

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000768 	.word	0x20000768
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_UART_MspInit+0x80>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d12b      	bne.n	8002030 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_UART_MspInit+0x84>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_UART_MspInit+0x84>)
 8001fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe2:	61d3      	str	r3, [r2, #28]
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_UART_MspInit+0x84>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_UART_MspInit+0x84>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_UART_MspInit+0x84>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_UART_MspInit+0x84>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002008:	230c      	movs	r3, #12
 800200a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2302      	movs	r3, #2
 8002012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4619      	mov	r1, r3
 800201a:	4809      	ldr	r0, [pc, #36]	; (8002040 <HAL_UART_MspInit+0x88>)
 800201c:	f000 fa1e 	bl	800245c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	2026      	movs	r0, #38	; 0x26
 8002026:	f000 f96c 	bl	8002302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800202a:	2026      	movs	r0, #38	; 0x26
 800202c:	f000 f985 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002030:	bf00      	nop
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40004400 	.word	0x40004400
 800203c:	40021000 	.word	0x40021000
 8002040:	40010800 	.word	0x40010800

08002044 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002044:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002046:	e003      	b.n	8002050 <LoopCopyDataInit>

08002048 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800204a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800204c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800204e:	3104      	adds	r1, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002050:	480a      	ldr	r0, [pc, #40]	; (800207c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002054:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002056:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002058:	d3f6      	bcc.n	8002048 <CopyDataInit>
  ldr r2, =_sbss
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800205c:	e002      	b.n	8002064 <LoopFillZerobss>

0800205e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002060:	f842 3b04 	str.w	r3, [r2], #4

08002064 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002066:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002068:	d3f9      	bcc.n	800205e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800206a:	f7ff fe5b 	bl	8001d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206e:	f002 fa3b 	bl	80044e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002072:	f7ff fae1 	bl	8001638 <main>
  bx lr
 8002076:	4770      	bx	lr
  ldr r3, =_sidata
 8002078:	08008658 	.word	0x08008658
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002080:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002084:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002088:	200007b0 	.word	0x200007b0

0800208c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC1_2_IRQHandler>
	...

08002090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_Init+0x28>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <HAL_Init+0x28>)
 800209a:	f043 0310 	orr.w	r3, r3, #16
 800209e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a0:	2003      	movs	r0, #3
 80020a2:	f000 f923 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f000 f808 	bl	80020bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ac:	f7ff fd8e 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000

080020bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x54>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x58>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f93b 	bl	8002356 <HAL_SYSTICK_Config>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00e      	b.n	8002108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b0f      	cmp	r3, #15
 80020ee:	d80a      	bhi.n	8002106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f0:	2200      	movs	r2, #0
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f000 f903 	bl	8002302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020fc:	4a06      	ldr	r2, [pc, #24]	; (8002118 <HAL_InitTick+0x5c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e000      	b.n	8002108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000000 	.word	0x20000000
 8002114:	20000008 	.word	0x20000008
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_IncTick+0x1c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_IncTick+0x20>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a03      	ldr	r2, [pc, #12]	; (800213c <HAL_IncTick+0x20>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000008 	.word	0x20000008
 800213c:	200007a8 	.word	0x200007a8

08002140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b02      	ldr	r3, [pc, #8]	; (8002150 <HAL_GetTick+0x10>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	200007a8 	.word	0x200007a8

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4906      	ldr	r1, [pc, #24]	; (80021ec <__NVIC_EnableIRQ+0x34>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f7ff ff90 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff2d 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff42 	bl	800219c <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff90 	bl	8002244 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5f 	bl	80021f0 <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff35 	bl	80021b8 <__NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffa2 	bl	80022a8 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002382:	2b02      	cmp	r3, #2
 8002384:	d005      	beq.n	8002392 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2204      	movs	r2, #4
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e051      	b.n	8002436 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 020e 	bic.w	r2, r2, #14
 80023a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_DMA_Abort_IT+0xd0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d029      	beq.n	8002410 <HAL_DMA_Abort_IT+0xa0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a20      	ldr	r2, [pc, #128]	; (8002444 <HAL_DMA_Abort_IT+0xd4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d022      	beq.n	800240c <HAL_DMA_Abort_IT+0x9c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <HAL_DMA_Abort_IT+0xd8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d01a      	beq.n	8002406 <HAL_DMA_Abort_IT+0x96>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_DMA_Abort_IT+0xdc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d012      	beq.n	8002400 <HAL_DMA_Abort_IT+0x90>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_DMA_Abort_IT+0xe0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00a      	beq.n	80023fa <HAL_DMA_Abort_IT+0x8a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_DMA_Abort_IT+0xe4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d102      	bne.n	80023f4 <HAL_DMA_Abort_IT+0x84>
 80023ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023f2:	e00e      	b.n	8002412 <HAL_DMA_Abort_IT+0xa2>
 80023f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f8:	e00b      	b.n	8002412 <HAL_DMA_Abort_IT+0xa2>
 80023fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023fe:	e008      	b.n	8002412 <HAL_DMA_Abort_IT+0xa2>
 8002400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002404:	e005      	b.n	8002412 <HAL_DMA_Abort_IT+0xa2>
 8002406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240a:	e002      	b.n	8002412 <HAL_DMA_Abort_IT+0xa2>
 800240c:	2310      	movs	r3, #16
 800240e:	e000      	b.n	8002412 <HAL_DMA_Abort_IT+0xa2>
 8002410:	2301      	movs	r3, #1
 8002412:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_DMA_Abort_IT+0xe8>)
 8002414:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
    } 
  }
  return status;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40020008 	.word	0x40020008
 8002444:	4002001c 	.word	0x4002001c
 8002448:	40020030 	.word	0x40020030
 800244c:	40020044 	.word	0x40020044
 8002450:	40020058 	.word	0x40020058
 8002454:	4002006c 	.word	0x4002006c
 8002458:	40020000 	.word	0x40020000

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b08b      	sub	sp, #44	; 0x2c
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	e127      	b.n	80026c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002470:	2201      	movs	r2, #1
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 8116 	bne.w	80026ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b12      	cmp	r3, #18
 8002494:	d034      	beq.n	8002500 <HAL_GPIO_Init+0xa4>
 8002496:	2b12      	cmp	r3, #18
 8002498:	d80d      	bhi.n	80024b6 <HAL_GPIO_Init+0x5a>
 800249a:	2b02      	cmp	r3, #2
 800249c:	d02b      	beq.n	80024f6 <HAL_GPIO_Init+0x9a>
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d804      	bhi.n	80024ac <HAL_GPIO_Init+0x50>
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d031      	beq.n	800250a <HAL_GPIO_Init+0xae>
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d01c      	beq.n	80024e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024aa:	e048      	b.n	800253e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d043      	beq.n	8002538 <HAL_GPIO_Init+0xdc>
 80024b0:	2b11      	cmp	r3, #17
 80024b2:	d01b      	beq.n	80024ec <HAL_GPIO_Init+0x90>
          break;
 80024b4:	e043      	b.n	800253e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024b6:	4a89      	ldr	r2, [pc, #548]	; (80026dc <HAL_GPIO_Init+0x280>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d026      	beq.n	800250a <HAL_GPIO_Init+0xae>
 80024bc:	4a87      	ldr	r2, [pc, #540]	; (80026dc <HAL_GPIO_Init+0x280>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d806      	bhi.n	80024d0 <HAL_GPIO_Init+0x74>
 80024c2:	4a87      	ldr	r2, [pc, #540]	; (80026e0 <HAL_GPIO_Init+0x284>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d020      	beq.n	800250a <HAL_GPIO_Init+0xae>
 80024c8:	4a86      	ldr	r2, [pc, #536]	; (80026e4 <HAL_GPIO_Init+0x288>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01d      	beq.n	800250a <HAL_GPIO_Init+0xae>
          break;
 80024ce:	e036      	b.n	800253e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024d0:	4a85      	ldr	r2, [pc, #532]	; (80026e8 <HAL_GPIO_Init+0x28c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d019      	beq.n	800250a <HAL_GPIO_Init+0xae>
 80024d6:	4a85      	ldr	r2, [pc, #532]	; (80026ec <HAL_GPIO_Init+0x290>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d016      	beq.n	800250a <HAL_GPIO_Init+0xae>
 80024dc:	4a84      	ldr	r2, [pc, #528]	; (80026f0 <HAL_GPIO_Init+0x294>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0xae>
          break;
 80024e2:	e02c      	b.n	800253e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	623b      	str	r3, [r7, #32]
          break;
 80024ea:	e028      	b.n	800253e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	3304      	adds	r3, #4
 80024f2:	623b      	str	r3, [r7, #32]
          break;
 80024f4:	e023      	b.n	800253e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	3308      	adds	r3, #8
 80024fc:	623b      	str	r3, [r7, #32]
          break;
 80024fe:	e01e      	b.n	800253e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	330c      	adds	r3, #12
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	e019      	b.n	800253e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002512:	2304      	movs	r3, #4
 8002514:	623b      	str	r3, [r7, #32]
          break;
 8002516:	e012      	b.n	800253e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002520:	2308      	movs	r3, #8
 8002522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	611a      	str	r2, [r3, #16]
          break;
 800252a:	e008      	b.n	800253e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800252c:	2308      	movs	r3, #8
 800252e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	615a      	str	r2, [r3, #20]
          break;
 8002536:	e002      	b.n	800253e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
          break;
 800253c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2bff      	cmp	r3, #255	; 0xff
 8002542:	d801      	bhi.n	8002548 <HAL_GPIO_Init+0xec>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	e001      	b.n	800254c <HAL_GPIO_Init+0xf0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2bff      	cmp	r3, #255	; 0xff
 8002552:	d802      	bhi.n	800255a <HAL_GPIO_Init+0xfe>
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x104>
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	3b08      	subs	r3, #8
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	210f      	movs	r1, #15
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	401a      	ands	r2, r3
 8002572:	6a39      	ldr	r1, [r7, #32]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	431a      	orrs	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8096 	beq.w	80026ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800258e:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_GPIO_Init+0x298>)
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_GPIO_Init+0x298>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6193      	str	r3, [r2, #24]
 800259a:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <HAL_GPIO_Init+0x298>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a6:	4a54      	ldr	r2, [pc, #336]	; (80026f8 <HAL_GPIO_Init+0x29c>)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4b      	ldr	r2, [pc, #300]	; (80026fc <HAL_GPIO_Init+0x2a0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x19e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4a      	ldr	r2, [pc, #296]	; (8002700 <HAL_GPIO_Init+0x2a4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x19a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a49      	ldr	r2, [pc, #292]	; (8002704 <HAL_GPIO_Init+0x2a8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x196>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a48      	ldr	r2, [pc, #288]	; (8002708 <HAL_GPIO_Init+0x2ac>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x192>
 80025ea:	2303      	movs	r3, #3
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x1a0>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x1a0>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x1a0>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x1a0>
 80025fa:	2300      	movs	r3, #0
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800260c:	493a      	ldr	r1, [pc, #232]	; (80026f8 <HAL_GPIO_Init+0x29c>)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002626:	4b39      	ldr	r3, [pc, #228]	; (800270c <HAL_GPIO_Init+0x2b0>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4938      	ldr	r1, [pc, #224]	; (800270c <HAL_GPIO_Init+0x2b0>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
 8002632:	e006      	b.n	8002642 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002634:	4b35      	ldr	r3, [pc, #212]	; (800270c <HAL_GPIO_Init+0x2b0>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	43db      	mvns	r3, r3
 800263c:	4933      	ldr	r1, [pc, #204]	; (800270c <HAL_GPIO_Init+0x2b0>)
 800263e:	4013      	ands	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_GPIO_Init+0x2b0>)
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	492e      	ldr	r1, [pc, #184]	; (800270c <HAL_GPIO_Init+0x2b0>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
 800265a:	e006      	b.n	800266a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_GPIO_Init+0x2b0>)
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	43db      	mvns	r3, r3
 8002664:	4929      	ldr	r1, [pc, #164]	; (800270c <HAL_GPIO_Init+0x2b0>)
 8002666:	4013      	ands	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002676:	4b25      	ldr	r3, [pc, #148]	; (800270c <HAL_GPIO_Init+0x2b0>)
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	4924      	ldr	r1, [pc, #144]	; (800270c <HAL_GPIO_Init+0x2b0>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
 8002682:	e006      	b.n	8002692 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_GPIO_Init+0x2b0>)
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	43db      	mvns	r3, r3
 800268c:	491f      	ldr	r1, [pc, #124]	; (800270c <HAL_GPIO_Init+0x2b0>)
 800268e:	4013      	ands	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d006      	beq.n	80026ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_GPIO_Init+0x2b0>)
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	491a      	ldr	r1, [pc, #104]	; (800270c <HAL_GPIO_Init+0x2b0>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60cb      	str	r3, [r1, #12]
 80026aa:	e006      	b.n	80026ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_GPIO_Init+0x2b0>)
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	4915      	ldr	r1, [pc, #84]	; (800270c <HAL_GPIO_Init+0x2b0>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	3301      	adds	r3, #1
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f47f aed0 	bne.w	8002470 <HAL_GPIO_Init+0x14>
  }
}
 80026d0:	bf00      	nop
 80026d2:	372c      	adds	r7, #44	; 0x2c
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	10210000 	.word	0x10210000
 80026e0:	10110000 	.word	0x10110000
 80026e4:	10120000 	.word	0x10120000
 80026e8:	10310000 	.word	0x10310000
 80026ec:	10320000 	.word	0x10320000
 80026f0:	10220000 	.word	0x10220000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40010800 	.word	0x40010800
 8002700:	40010c00 	.word	0x40010c00
 8002704:	40011000 	.word	0x40011000
 8002708:	40011400 	.word	0x40011400
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800272c:	e003      	b.n	8002736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	041a      	lsls	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	611a      	str	r2, [r3, #16]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f806 	bl	8002770 <HAL_GPIO_EXTI_Callback>
  }
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e26c      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b92      	ldr	r3, [pc, #584]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b0:	4b8f      	ldr	r3, [pc, #572]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d112      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
 80027bc:	4b8c      	ldr	r3, [pc, #560]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x12c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e246      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x76>
 80027ec:	4b80      	ldr	r3, [pc, #512]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7f      	ldr	r2, [pc, #508]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e02e      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b7b      	ldr	r3, [pc, #492]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7a      	ldr	r2, [pc, #488]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a77      	ldr	r2, [pc, #476]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xbc>
 8002826:	4b72      	ldr	r3, [pc, #456]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a71      	ldr	r2, [pc, #452]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6f      	ldr	r3, [pc, #444]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 8002840:	4b6b      	ldr	r3, [pc, #428]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6a      	ldr	r2, [pc, #424]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a67      	ldr	r2, [pc, #412]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fc6e 	bl	8002140 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff fc6a 	bl	8002140 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1fa      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xe4>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7ff fc5a 	bl	8002140 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7ff fc56 	bl	8002140 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1e6      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x10c>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1ba      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4939      	ldr	r1, [pc, #228]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7ff fc0f 	bl	8002140 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7ff fc0b 	bl	8002140 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e19b      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4927      	ldr	r1, [pc, #156]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff fbee 	bl	8002140 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7ff fbea 	bl	8002140 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e17a      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03a      	beq.n	8002a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d019      	beq.n	80029ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7ff fbce 	bl	8002140 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7ff fbca 	bl	8002140 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e15a      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 fada 	bl	8002f80 <RCC_Delay>
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7ff fbb4 	bl	8002140 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029da:	e00f      	b.n	80029fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff fbb0 	bl	8002140 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d908      	bls.n	80029fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e140      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	42420000 	.word	0x42420000
 80029f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	4b9e      	ldr	r3, [pc, #632]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e9      	bne.n	80029dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a6 	beq.w	8002b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b97      	ldr	r3, [pc, #604]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b94      	ldr	r3, [pc, #592]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a93      	ldr	r2, [pc, #588]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b91      	ldr	r3, [pc, #580]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b8e      	ldr	r3, [pc, #568]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d118      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a8a      	ldr	r2, [pc, #552]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7ff fb71 	bl	8002140 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7ff fb6d 	bl	8002140 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0fd      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b81      	ldr	r3, [pc, #516]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x312>
 8002a88:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a7a      	ldr	r2, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e02d      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002a9e:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b73      	ldr	r3, [pc, #460]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a72      	ldr	r2, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x356>
 8002ac0:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a6c      	ldr	r2, [pc, #432]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ada:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a66      	ldr	r2, [pc, #408]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a63      	ldr	r2, [pc, #396]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7ff fb21 	bl	8002140 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7ff fb1d 	bl	8002140 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0ab      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b57      	ldr	r3, [pc, #348]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x37e>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7ff fb0b 	bl	8002140 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7ff fb07 	bl	8002140 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e095      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a47      	ldr	r2, [pc, #284]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8081 	beq.w	8002c6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d061      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d146      	bne.n	8002c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCC_OscConfig+0x4fc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7ff fadb 	bl	8002140 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7ff fad7 	bl	8002140 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e067      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb6:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	492d      	ldr	r1, [pc, #180]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a19      	ldr	r1, [r3, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	4927      	ldr	r1, [pc, #156]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x4fc>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7ff faab 	bl	8002140 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7ff faa7 	bl	8002140 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e037      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x46a>
 8002c0c:	e02f      	b.n	8002c6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_RCC_OscConfig+0x4fc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fa94 	bl	8002140 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7ff fa90 	bl	8002140 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e020      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x498>
 8002c3a:	e018      	b.n	8002c6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e013      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	42420060 	.word	0x42420060

08002c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0d0      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d910      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	4965      	ldr	r1, [pc, #404]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b8      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce0:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d04:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	494d      	ldr	r1, [pc, #308]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d040      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d115      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e073      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06b      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4936      	ldr	r1, [pc, #216]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7ff f9e4 	bl	8002140 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7ff f9e0 	bl	8002140 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e053      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d210      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 0207 	bic.w	r2, r3, #7
 8002dba:	4922      	ldr	r1, [pc, #136]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e032      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4916      	ldr	r1, [pc, #88]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e12:	f000 f821 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e16:	4601      	mov	r1, r0
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	fa21 f303 	lsr.w	r3, r1, r3
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1cc>)
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f942 	bl	80020bc <HAL_InitTick>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08008380 	.word	0x08008380
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b490      	push	{r4, r7}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e60:	1d3c      	adds	r4, r7, #4
 8002e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x40>
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x46>
 8002e96:	e02d      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e98:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e9a:	623b      	str	r3, [r7, #32]
      break;
 8002e9c:	e02d      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	0c9b      	lsrs	r3, r3, #18
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eaa:	4413      	add	r3, r2
 8002eac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0c5b      	lsrs	r3, r3, #17
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eca:	4413      	add	r3, r2
 8002ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ed6:	fb02 f203 	mul.w	r2, r2, r3
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e004      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	623b      	str	r3, [r7, #32]
      break;
 8002ef2:	e002      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ef6:	623b      	str	r3, [r7, #32]
      break;
 8002ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efa:	6a3b      	ldr	r3, [r7, #32]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc90      	pop	{r4, r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	0800812c 	.word	0x0800812c
 8002f0c:	0800813c 	.word	0x0800813c
 8002f10:	40021000 	.word	0x40021000
 8002f14:	007a1200 	.word	0x007a1200
 8002f18:	003d0900 	.word	0x003d0900

08002f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	20000000 	.word	0x20000000

08002f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f34:	f7ff fff2 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f38:	4601      	mov	r1, r0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	4a03      	ldr	r2, [pc, #12]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	08008390 	.word	0x08008390

08002f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f5c:	f7ff ffde 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f60:	4601      	mov	r1, r0
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	0adb      	lsrs	r3, r3, #11
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
 8002f70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	08008390 	.word	0x08008390

08002f80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <RCC_Delay+0x34>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <RCC_Delay+0x38>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0a5b      	lsrs	r3, r3, #9
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f9c:	bf00      	nop
  }
  while (Delay --);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1e5a      	subs	r2, r3, #1
 8002fa2:	60fa      	str	r2, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f9      	bne.n	8002f9c <RCC_Delay+0x1c>
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	10624dd3 	.word	0x10624dd3

08002fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e041      	b.n	8003052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe ff46 	bl	8001e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f000 fc3e 	bl	800387c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e041      	b.n	80030f0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fe ff15 	bl	8001eb0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f000 fbef 	bl	800387c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_TIM_IC_Start_IT+0x1a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e013      	b.n	800313a <HAL_TIM_IC_Start_IT+0x42>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b04      	cmp	r3, #4
 8003116:	d104      	bne.n	8003122 <HAL_TIM_IC_Start_IT+0x2a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e00b      	b.n	800313a <HAL_TIM_IC_Start_IT+0x42>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d104      	bne.n	8003132 <HAL_TIM_IC_Start_IT+0x3a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e003      	b.n	800313a <HAL_TIM_IC_Start_IT+0x42>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d104      	bne.n	800314c <HAL_TIM_IC_Start_IT+0x54>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e013      	b.n	8003174 <HAL_TIM_IC_Start_IT+0x7c>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d104      	bne.n	800315c <HAL_TIM_IC_Start_IT+0x64>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e00b      	b.n	8003174 <HAL_TIM_IC_Start_IT+0x7c>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b08      	cmp	r3, #8
 8003160:	d104      	bne.n	800316c <HAL_TIM_IC_Start_IT+0x74>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e003      	b.n	8003174 <HAL_TIM_IC_Start_IT+0x7c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003172:	b2db      	uxtb	r3, r3
 8003174:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d102      	bne.n	8003182 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800317c:	7bbb      	ldrb	r3, [r7, #14]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d001      	beq.n	8003186 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0b3      	b.n	80032ee <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d104      	bne.n	8003196 <HAL_TIM_IC_Start_IT+0x9e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003194:	e013      	b.n	80031be <HAL_TIM_IC_Start_IT+0xc6>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_IC_Start_IT+0xae>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a4:	e00b      	b.n	80031be <HAL_TIM_IC_Start_IT+0xc6>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_IC_Start_IT+0xbe>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b4:	e003      	b.n	80031be <HAL_TIM_IC_Start_IT+0xc6>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_IC_Start_IT+0xd6>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031cc:	e013      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0xfe>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d104      	bne.n	80031de <HAL_TIM_IC_Start_IT+0xe6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031dc:	e00b      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0xfe>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_IC_Start_IT+0xf6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ec:	e003      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0xfe>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d841      	bhi.n	8003280 <HAL_TIM_IC_Start_IT+0x188>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <HAL_TIM_IC_Start_IT+0x10c>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003239 	.word	0x08003239
 8003208:	08003281 	.word	0x08003281
 800320c:	08003281 	.word	0x08003281
 8003210:	08003281 	.word	0x08003281
 8003214:	0800324b 	.word	0x0800324b
 8003218:	08003281 	.word	0x08003281
 800321c:	08003281 	.word	0x08003281
 8003220:	08003281 	.word	0x08003281
 8003224:	0800325d 	.word	0x0800325d
 8003228:	08003281 	.word	0x08003281
 800322c:	08003281 	.word	0x08003281
 8003230:	08003281 	.word	0x08003281
 8003234:	0800326f 	.word	0x0800326f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0202 	orr.w	r2, r2, #2
 8003246:	60da      	str	r2, [r3, #12]
      break;
 8003248:	e01b      	b.n	8003282 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0204 	orr.w	r2, r2, #4
 8003258:	60da      	str	r2, [r3, #12]
      break;
 800325a:	e012      	b.n	8003282 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	60da      	str	r2, [r3, #12]
      break;
 800326c:	e009      	b.n	8003282 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0210 	orr.w	r2, r2, #16
 800327c:	60da      	str	r2, [r3, #12]
      break;
 800327e:	e000      	b.n	8003282 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003280:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fcfb 	bl	8003c86 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <HAL_TIM_IC_Start_IT+0x200>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_TIM_IC_Start_IT+0x1c0>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d009      	beq.n	80032b8 <HAL_TIM_IC_Start_IT+0x1c0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a14      	ldr	r2, [pc, #80]	; (80032fc <HAL_TIM_IC_Start_IT+0x204>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_TIM_IC_Start_IT+0x1c0>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a13      	ldr	r2, [pc, #76]	; (8003300 <HAL_TIM_IC_Start_IT+0x208>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d111      	bne.n	80032dc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d010      	beq.n	80032ec <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	e007      	b.n	80032ec <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800

08003304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d122      	bne.n	8003360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d11b      	bne.n	8003360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0202 	mvn.w	r2, #2
 8003330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd fd1a 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa79 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fa7f 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d122      	bne.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d11b      	bne.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0204 	mvn.w	r2, #4
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fcf0 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa4f 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fa55 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d122      	bne.n	8003408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d11b      	bne.n	8003408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0208 	mvn.w	r2, #8
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2204      	movs	r2, #4
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fcc6 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa25 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fa2b 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b10      	cmp	r3, #16
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b10      	cmp	r3, #16
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0210 	mvn.w	r2, #16
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2208      	movs	r2, #8
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fc9c 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9fb 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fa01 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10e      	bne.n	8003488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0201 	mvn.w	r2, #1
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f9d6 	bl	8003834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fc75 	bl	8003d9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f9c5 	bl	800386a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0220 	mvn.w	r2, #32
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fc40 	bl	8003d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_TIM_IC_ConfigChannel+0x1a>
 800352a:	2302      	movs	r3, #2
 800352c:	e082      	b.n	8003634 <HAL_TIM_IC_ConfigChannel+0x120>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f000 f9f8 	bl	8003940 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 020c 	bic.w	r2, r2, #12
 800355e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6999      	ldr	r1, [r3, #24]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	619a      	str	r2, [r3, #24]
 8003572:	e05a      	b.n	800362a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b04      	cmp	r3, #4
 8003578:	d11c      	bne.n	80035b4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6819      	ldr	r1, [r3, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f000 fa61 	bl	8003a50 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800359c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6999      	ldr	r1, [r3, #24]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	021a      	lsls	r2, r3, #8
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	619a      	str	r2, [r3, #24]
 80035b2:	e03a      	b.n	800362a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d11b      	bne.n	80035f2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f000 faac 	bl	8003b26 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 020c 	bic.w	r2, r2, #12
 80035dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69d9      	ldr	r1, [r3, #28]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	61da      	str	r2, [r3, #28]
 80035f0:	e01b      	b.n	800362a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f000 facb 	bl	8003b9c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003614:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69d9      	ldr	r1, [r3, #28]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	021a      	lsls	r2, r3, #8
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_TIM_ConfigClockSource+0x18>
 8003650:	2302      	movs	r3, #2
 8003652:	e0a6      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x166>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800367a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d067      	beq.n	800375c <HAL_TIM_ConfigClockSource+0x120>
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d80b      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x6c>
 8003690:	2b10      	cmp	r3, #16
 8003692:	d073      	beq.n	800377c <HAL_TIM_ConfigClockSource+0x140>
 8003694:	2b10      	cmp	r3, #16
 8003696:	d802      	bhi.n	800369e <HAL_TIM_ConfigClockSource+0x62>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d06f      	beq.n	800377c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800369c:	e078      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d06c      	beq.n	800377c <HAL_TIM_ConfigClockSource+0x140>
 80036a2:	2b30      	cmp	r3, #48	; 0x30
 80036a4:	d06a      	beq.n	800377c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80036a6:	e073      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036a8:	2b70      	cmp	r3, #112	; 0x70
 80036aa:	d00d      	beq.n	80036c8 <HAL_TIM_ConfigClockSource+0x8c>
 80036ac:	2b70      	cmp	r3, #112	; 0x70
 80036ae:	d804      	bhi.n	80036ba <HAL_TIM_ConfigClockSource+0x7e>
 80036b0:	2b50      	cmp	r3, #80	; 0x50
 80036b2:	d033      	beq.n	800371c <HAL_TIM_ConfigClockSource+0xe0>
 80036b4:	2b60      	cmp	r3, #96	; 0x60
 80036b6:	d041      	beq.n	800373c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80036b8:	e06a      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036be:	d066      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x152>
 80036c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c4:	d017      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80036c6:	e063      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	6899      	ldr	r1, [r3, #8]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f000 fab6 	bl	8003c48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	609a      	str	r2, [r3, #8]
      break;
 80036f4:	e04c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6899      	ldr	r1, [r3, #8]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f000 fa9f 	bl	8003c48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003718:	609a      	str	r2, [r3, #8]
      break;
 800371a:	e039      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	461a      	mov	r2, r3
 800372a:	f000 f963 	bl	80039f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2150      	movs	r1, #80	; 0x50
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fa6d 	bl	8003c14 <TIM_ITRx_SetConfig>
      break;
 800373a:	e029      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	461a      	mov	r2, r3
 800374a:	f000 f9bd 	bl	8003ac8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2160      	movs	r1, #96	; 0x60
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fa5d 	bl	8003c14 <TIM_ITRx_SetConfig>
      break;
 800375a:	e019      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	461a      	mov	r2, r3
 800376a:	f000 f943 	bl	80039f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2140      	movs	r1, #64	; 0x40
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fa4d 	bl	8003c14 <TIM_ITRx_SetConfig>
      break;
 800377a:	e009      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f000 fa44 	bl	8003c14 <TIM_ITRx_SetConfig>
        break;
 800378c:	e000      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800378e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b0c      	cmp	r3, #12
 80037be:	d831      	bhi.n	8003824 <HAL_TIM_ReadCapturedValue+0x78>
 80037c0:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037fd 	.word	0x080037fd
 80037cc:	08003825 	.word	0x08003825
 80037d0:	08003825 	.word	0x08003825
 80037d4:	08003825 	.word	0x08003825
 80037d8:	08003807 	.word	0x08003807
 80037dc:	08003825 	.word	0x08003825
 80037e0:	08003825 	.word	0x08003825
 80037e4:	08003825 	.word	0x08003825
 80037e8:	08003811 	.word	0x08003811
 80037ec:	08003825 	.word	0x08003825
 80037f0:	08003825 	.word	0x08003825
 80037f4:	08003825 	.word	0x08003825
 80037f8:	0800381b 	.word	0x0800381b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	60fb      	str	r3, [r7, #12]

      break;
 8003804:	e00f      	b.n	8003826 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	60fb      	str	r3, [r7, #12]

      break;
 800380e:	e00a      	b.n	8003826 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	60fb      	str	r3, [r7, #12]

      break;
 8003818:	e005      	b.n	8003826 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	60fb      	str	r3, [r7, #12]

      break;
 8003822:	e000      	b.n	8003826 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003824:	bf00      	nop
  }

  return tmpreg;
 8003826:	68fb      	ldr	r3, [r7, #12]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a29      	ldr	r2, [pc, #164]	; (8003934 <TIM_Base_SetConfig+0xb8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_Base_SetConfig+0x30>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389a:	d007      	beq.n	80038ac <TIM_Base_SetConfig+0x30>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a26      	ldr	r2, [pc, #152]	; (8003938 <TIM_Base_SetConfig+0xbc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_Base_SetConfig+0x30>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a25      	ldr	r2, [pc, #148]	; (800393c <TIM_Base_SetConfig+0xc0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d108      	bne.n	80038be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <TIM_Base_SetConfig+0xb8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00b      	beq.n	80038de <TIM_Base_SetConfig+0x62>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038cc:	d007      	beq.n	80038de <TIM_Base_SetConfig+0x62>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a19      	ldr	r2, [pc, #100]	; (8003938 <TIM_Base_SetConfig+0xbc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_Base_SetConfig+0x62>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a18      	ldr	r2, [pc, #96]	; (800393c <TIM_Base_SetConfig+0xc0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d108      	bne.n	80038f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <TIM_Base_SetConfig+0xb8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d103      	bne.n	8003924 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	615a      	str	r2, [r3, #20]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800

08003940 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0201 	bic.w	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <TIM_TI1_SetConfig+0xa8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00b      	beq.n	8003986 <TIM_TI1_SetConfig+0x46>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d007      	beq.n	8003986 <TIM_TI1_SetConfig+0x46>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a1c      	ldr	r2, [pc, #112]	; (80039ec <TIM_TI1_SetConfig+0xac>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_TI1_SetConfig+0x46>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a1b      	ldr	r2, [pc, #108]	; (80039f0 <TIM_TI1_SetConfig+0xb0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <TIM_TI1_SetConfig+0x4a>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <TIM_TI1_SetConfig+0x4c>
 800398a:	2300      	movs	r3, #0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e003      	b.n	80039aa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f023 030a 	bic.w	r3, r3, #10
 80039c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 030a 	and.w	r3, r3, #10
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	621a      	str	r2, [r3, #32]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800

080039f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0201 	bic.w	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f023 030a 	bic.w	r3, r3, #10
 8003a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0210 	bic.w	r2, r3, #16
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	031b      	lsls	r3, r3, #12
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f023 0210 	bic.w	r2, r3, #16
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003af2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	031b      	lsls	r3, r3, #12
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	621a      	str	r2, [r3, #32]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b087      	sub	sp, #28
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	031b      	lsls	r3, r3, #12
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	031b      	lsls	r3, r3, #12
 8003bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f043 0307 	orr.w	r3, r3, #7
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	609a      	str	r2, [r3, #8]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b087      	sub	sp, #28
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2201      	movs	r2, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	401a      	ands	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a1a      	ldr	r2, [r3, #32]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e046      	b.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a16      	ldr	r2, [pc, #88]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d34:	d009      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a10      	ldr	r2, [pc, #64]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10c      	bne.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800

08003d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e03f      	b.n	8003e42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fe f8ee 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fae3 	bl	80043c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d130      	bne.n	8003ec6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_UART_Transmit_IT+0x26>
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e029      	b.n	8003ec8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Transmit_IT+0x38>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e022      	b.n	8003ec8 <HAL_UART_Transmit_IT+0x7e>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2221      	movs	r2, #33	; 0x21
 8003ea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ec0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d140      	bne.n	8003f6e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_UART_Receive_IT+0x26>
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e039      	b.n	8003f70 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Receive_IT+0x38>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e032      	b.n	8003f70 <HAL_UART_Receive_IT+0x9e>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2222      	movs	r2, #34	; 0x22
 8003f2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f48:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0201 	orr.w	r2, r2, #1
 8003f58:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0220 	orr.w	r2, r2, #32
 8003f68:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10d      	bne.n	8003fce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_UART_IRQHandler+0x52>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f979 	bl	80042be <UART_Receive_IT>
      return;
 8003fcc:	e0d1      	b.n	8004172 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80b0 	beq.w	8004136 <HAL_UART_IRQHandler+0x1ba>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <HAL_UART_IRQHandler+0x70>
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80a5 	beq.w	8004136 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_UART_IRQHandler+0x90>
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_UART_IRQHandler+0xb0>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	f043 0202 	orr.w	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_UART_IRQHandler+0xd0>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00f      	beq.n	8004076 <HAL_UART_IRQHandler+0xfa>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <HAL_UART_IRQHandler+0xee>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	f043 0208 	orr.w	r2, r3, #8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d078      	beq.n	8004170 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <HAL_UART_IRQHandler+0x11c>
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f913 	bl	80042be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bf14      	ite	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	2300      	moveq	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <HAL_UART_IRQHandler+0x144>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d031      	beq.n	8004124 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f864 	bl	800418e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d023      	beq.n	800411c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f0:	4a21      	ldr	r2, [pc, #132]	; (8004178 <HAL_UART_IRQHandler+0x1fc>)
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe f939 	bl	8002370 <HAL_DMA_Abort_IT>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d016      	beq.n	8004132 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800410e:	4610      	mov	r0, r2
 8004110:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004112:	e00e      	b.n	8004132 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f831 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411a:	e00a      	b.n	8004132 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f82d 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004122:	e006      	b.n	8004132 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f829 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004130:	e01e      	b.n	8004170 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004132:	bf00      	nop
    return;
 8004134:	e01c      	b.n	8004170 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_UART_IRQHandler+0x1d6>
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f850 	bl	80041f0 <UART_Transmit_IT>
    return;
 8004150:	e00f      	b.n	8004172 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_UART_IRQHandler+0x1f6>
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f891 	bl	800428e <UART_EndTransmit_IT>
    return;
 800416c:	bf00      	nop
 800416e:	e000      	b.n	8004172 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004170:	bf00      	nop
  }
}
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	080041c9 	.word	0x080041c9

0800417c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ffca 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b21      	cmp	r3, #33	; 0x21
 8004202:	d13e      	bne.n	8004282 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420c:	d114      	bne.n	8004238 <UART_Transmit_IT+0x48>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d110      	bne.n	8004238 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	1c9a      	adds	r2, r3, #2
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	621a      	str	r2, [r3, #32]
 8004236:	e008      	b.n	800424a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	1c59      	adds	r1, r3, #1
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6211      	str	r1, [r2, #32]
 8004242:	781a      	ldrb	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4619      	mov	r1, r3
 8004258:	84d1      	strh	r1, [r2, #38]	; 0x26
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10f      	bne.n	800427e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800426c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fc feb4 	bl	800101c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b22      	cmp	r3, #34	; 0x22
 80042d0:	d170      	bne.n	80043b4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d117      	bne.n	800430c <UART_Receive_IT+0x4e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d113      	bne.n	800430c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	1c9a      	adds	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
 800430a:	e026      	b.n	800435a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	d007      	beq.n	8004330 <UART_Receive_IT+0x72>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <UART_Receive_IT+0x80>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	e008      	b.n	8004350 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4619      	mov	r1, r3
 8004368:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800436a:	2b00      	cmp	r3, #0
 800436c:	d120      	bne.n	80043b0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0220 	bic.w	r2, r2, #32
 800437c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800438c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc fe0a 	bl	8000fc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	e002      	b.n	80043b6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e000      	b.n	80043b6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
  }
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043fa:	f023 030c 	bic.w	r3, r3, #12
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	430b      	orrs	r3, r1
 8004406:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2c      	ldr	r2, [pc, #176]	; (80044d4 <UART_SetConfig+0x114>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d103      	bne.n	8004430 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004428:	f7fe fd96 	bl	8002f58 <HAL_RCC_GetPCLK2Freq>
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	e002      	b.n	8004436 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004430:	f7fe fd7e 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 8004434:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009a      	lsls	r2, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	4a22      	ldr	r2, [pc, #136]	; (80044d8 <UART_SetConfig+0x118>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	0119      	lsls	r1, r3, #4
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009a      	lsls	r2, r3, #2
 8004460:	441a      	add	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	fbb2 f2f3 	udiv	r2, r2, r3
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <UART_SetConfig+0x118>)
 800446e:	fba3 0302 	umull	r0, r3, r3, r2
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2064      	movs	r0, #100	; 0x64
 8004476:	fb00 f303 	mul.w	r3, r0, r3
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	3332      	adds	r3, #50	; 0x32
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <UART_SetConfig+0x118>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448c:	4419      	add	r1, r3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009a      	lsls	r2, r3, #2
 8004498:	441a      	add	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <UART_SetConfig+0x118>)
 80044a6:	fba3 0302 	umull	r0, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2064      	movs	r0, #100	; 0x64
 80044ae:	fb00 f303 	mul.w	r3, r0, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	3332      	adds	r3, #50	; 0x32
 80044b8:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <UART_SetConfig+0x118>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	f003 020f 	and.w	r2, r3, #15
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	440a      	add	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40013800 	.word	0x40013800
 80044d8:	51eb851f 	.word	0x51eb851f

080044dc <__errno>:
 80044dc:	4b01      	ldr	r3, [pc, #4]	; (80044e4 <__errno+0x8>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	2000000c 	.word	0x2000000c

080044e8 <__libc_init_array>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	2500      	movs	r5, #0
 80044ec:	4e0c      	ldr	r6, [pc, #48]	; (8004520 <__libc_init_array+0x38>)
 80044ee:	4c0d      	ldr	r4, [pc, #52]	; (8004524 <__libc_init_array+0x3c>)
 80044f0:	1ba4      	subs	r4, r4, r6
 80044f2:	10a4      	asrs	r4, r4, #2
 80044f4:	42a5      	cmp	r5, r4
 80044f6:	d109      	bne.n	800450c <__libc_init_array+0x24>
 80044f8:	f003 fd60 	bl	8007fbc <_init>
 80044fc:	2500      	movs	r5, #0
 80044fe:	4e0a      	ldr	r6, [pc, #40]	; (8004528 <__libc_init_array+0x40>)
 8004500:	4c0a      	ldr	r4, [pc, #40]	; (800452c <__libc_init_array+0x44>)
 8004502:	1ba4      	subs	r4, r4, r6
 8004504:	10a4      	asrs	r4, r4, #2
 8004506:	42a5      	cmp	r5, r4
 8004508:	d105      	bne.n	8004516 <__libc_init_array+0x2e>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004510:	4798      	blx	r3
 8004512:	3501      	adds	r5, #1
 8004514:	e7ee      	b.n	80044f4 <__libc_init_array+0xc>
 8004516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800451a:	4798      	blx	r3
 800451c:	3501      	adds	r5, #1
 800451e:	e7f2      	b.n	8004506 <__libc_init_array+0x1e>
 8004520:	08008650 	.word	0x08008650
 8004524:	08008650 	.word	0x08008650
 8004528:	08008650 	.word	0x08008650
 800452c:	08008654 	.word	0x08008654

08004530 <memset>:
 8004530:	4603      	mov	r3, r0
 8004532:	4402      	add	r2, r0
 8004534:	4293      	cmp	r3, r2
 8004536:	d100      	bne.n	800453a <memset+0xa>
 8004538:	4770      	bx	lr
 800453a:	f803 1b01 	strb.w	r1, [r3], #1
 800453e:	e7f9      	b.n	8004534 <memset+0x4>

08004540 <__cvt>:
 8004540:	2b00      	cmp	r3, #0
 8004542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004546:	461e      	mov	r6, r3
 8004548:	bfbb      	ittet	lt
 800454a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800454e:	461e      	movlt	r6, r3
 8004550:	2300      	movge	r3, #0
 8004552:	232d      	movlt	r3, #45	; 0x2d
 8004554:	b088      	sub	sp, #32
 8004556:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004558:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800455c:	f027 0720 	bic.w	r7, r7, #32
 8004560:	2f46      	cmp	r7, #70	; 0x46
 8004562:	4614      	mov	r4, r2
 8004564:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004566:	700b      	strb	r3, [r1, #0]
 8004568:	d004      	beq.n	8004574 <__cvt+0x34>
 800456a:	2f45      	cmp	r7, #69	; 0x45
 800456c:	d100      	bne.n	8004570 <__cvt+0x30>
 800456e:	3501      	adds	r5, #1
 8004570:	2302      	movs	r3, #2
 8004572:	e000      	b.n	8004576 <__cvt+0x36>
 8004574:	2303      	movs	r3, #3
 8004576:	aa07      	add	r2, sp, #28
 8004578:	9204      	str	r2, [sp, #16]
 800457a:	aa06      	add	r2, sp, #24
 800457c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004580:	e9cd 3500 	strd	r3, r5, [sp]
 8004584:	4622      	mov	r2, r4
 8004586:	4633      	mov	r3, r6
 8004588:	f001 fd7e 	bl	8006088 <_dtoa_r>
 800458c:	2f47      	cmp	r7, #71	; 0x47
 800458e:	4680      	mov	r8, r0
 8004590:	d102      	bne.n	8004598 <__cvt+0x58>
 8004592:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004594:	07db      	lsls	r3, r3, #31
 8004596:	d526      	bpl.n	80045e6 <__cvt+0xa6>
 8004598:	2f46      	cmp	r7, #70	; 0x46
 800459a:	eb08 0905 	add.w	r9, r8, r5
 800459e:	d111      	bne.n	80045c4 <__cvt+0x84>
 80045a0:	f898 3000 	ldrb.w	r3, [r8]
 80045a4:	2b30      	cmp	r3, #48	; 0x30
 80045a6:	d10a      	bne.n	80045be <__cvt+0x7e>
 80045a8:	2200      	movs	r2, #0
 80045aa:	2300      	movs	r3, #0
 80045ac:	4620      	mov	r0, r4
 80045ae:	4631      	mov	r1, r6
 80045b0:	f7fc f9fa 	bl	80009a8 <__aeabi_dcmpeq>
 80045b4:	b918      	cbnz	r0, 80045be <__cvt+0x7e>
 80045b6:	f1c5 0501 	rsb	r5, r5, #1
 80045ba:	f8ca 5000 	str.w	r5, [sl]
 80045be:	f8da 3000 	ldr.w	r3, [sl]
 80045c2:	4499      	add	r9, r3
 80045c4:	2200      	movs	r2, #0
 80045c6:	2300      	movs	r3, #0
 80045c8:	4620      	mov	r0, r4
 80045ca:	4631      	mov	r1, r6
 80045cc:	f7fc f9ec 	bl	80009a8 <__aeabi_dcmpeq>
 80045d0:	b938      	cbnz	r0, 80045e2 <__cvt+0xa2>
 80045d2:	2230      	movs	r2, #48	; 0x30
 80045d4:	9b07      	ldr	r3, [sp, #28]
 80045d6:	454b      	cmp	r3, r9
 80045d8:	d205      	bcs.n	80045e6 <__cvt+0xa6>
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	9107      	str	r1, [sp, #28]
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	e7f8      	b.n	80045d4 <__cvt+0x94>
 80045e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80045e6:	4640      	mov	r0, r8
 80045e8:	9b07      	ldr	r3, [sp, #28]
 80045ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045ec:	eba3 0308 	sub.w	r3, r3, r8
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	b008      	add	sp, #32
 80045f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080045f8 <__exponent>:
 80045f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045fa:	2900      	cmp	r1, #0
 80045fc:	bfb4      	ite	lt
 80045fe:	232d      	movlt	r3, #45	; 0x2d
 8004600:	232b      	movge	r3, #43	; 0x2b
 8004602:	4604      	mov	r4, r0
 8004604:	bfb8      	it	lt
 8004606:	4249      	neglt	r1, r1
 8004608:	2909      	cmp	r1, #9
 800460a:	f804 2b02 	strb.w	r2, [r4], #2
 800460e:	7043      	strb	r3, [r0, #1]
 8004610:	dd21      	ble.n	8004656 <__exponent+0x5e>
 8004612:	f10d 0307 	add.w	r3, sp, #7
 8004616:	461f      	mov	r7, r3
 8004618:	260a      	movs	r6, #10
 800461a:	fb91 f5f6 	sdiv	r5, r1, r6
 800461e:	fb06 1115 	mls	r1, r6, r5, r1
 8004622:	2d09      	cmp	r5, #9
 8004624:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004628:	f803 1c01 	strb.w	r1, [r3, #-1]
 800462c:	f103 32ff 	add.w	r2, r3, #4294967295
 8004630:	4629      	mov	r1, r5
 8004632:	dc09      	bgt.n	8004648 <__exponent+0x50>
 8004634:	3130      	adds	r1, #48	; 0x30
 8004636:	3b02      	subs	r3, #2
 8004638:	f802 1c01 	strb.w	r1, [r2, #-1]
 800463c:	42bb      	cmp	r3, r7
 800463e:	4622      	mov	r2, r4
 8004640:	d304      	bcc.n	800464c <__exponent+0x54>
 8004642:	1a10      	subs	r0, r2, r0
 8004644:	b003      	add	sp, #12
 8004646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004648:	4613      	mov	r3, r2
 800464a:	e7e6      	b.n	800461a <__exponent+0x22>
 800464c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004650:	f804 2b01 	strb.w	r2, [r4], #1
 8004654:	e7f2      	b.n	800463c <__exponent+0x44>
 8004656:	2330      	movs	r3, #48	; 0x30
 8004658:	4419      	add	r1, r3
 800465a:	7083      	strb	r3, [r0, #2]
 800465c:	1d02      	adds	r2, r0, #4
 800465e:	70c1      	strb	r1, [r0, #3]
 8004660:	e7ef      	b.n	8004642 <__exponent+0x4a>
	...

08004664 <_printf_float>:
 8004664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004668:	b091      	sub	sp, #68	; 0x44
 800466a:	460c      	mov	r4, r1
 800466c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800466e:	4693      	mov	fp, r2
 8004670:	461e      	mov	r6, r3
 8004672:	4605      	mov	r5, r0
 8004674:	f002 fdea 	bl	800724c <_localeconv_r>
 8004678:	6803      	ldr	r3, [r0, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	9309      	str	r3, [sp, #36]	; 0x24
 800467e:	f7fb fd67 	bl	8000150 <strlen>
 8004682:	2300      	movs	r3, #0
 8004684:	930e      	str	r3, [sp, #56]	; 0x38
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	900a      	str	r0, [sp, #40]	; 0x28
 800468a:	3307      	adds	r3, #7
 800468c:	f023 0307 	bic.w	r3, r3, #7
 8004690:	f103 0208 	add.w	r2, r3, #8
 8004694:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004698:	f8d4 a000 	ldr.w	sl, [r4]
 800469c:	603a      	str	r2, [r7, #0]
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046a6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80046aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	4ba6      	ldr	r3, [pc, #664]	; (8004950 <_printf_float+0x2ec>)
 80046b6:	4638      	mov	r0, r7
 80046b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ba:	f7fc f9a7 	bl	8000a0c <__aeabi_dcmpun>
 80046be:	bb68      	cbnz	r0, 800471c <_printf_float+0xb8>
 80046c0:	f04f 32ff 	mov.w	r2, #4294967295
 80046c4:	4ba2      	ldr	r3, [pc, #648]	; (8004950 <_printf_float+0x2ec>)
 80046c6:	4638      	mov	r0, r7
 80046c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ca:	f7fc f981 	bl	80009d0 <__aeabi_dcmple>
 80046ce:	bb28      	cbnz	r0, 800471c <_printf_float+0xb8>
 80046d0:	2200      	movs	r2, #0
 80046d2:	2300      	movs	r3, #0
 80046d4:	4638      	mov	r0, r7
 80046d6:	4649      	mov	r1, r9
 80046d8:	f7fc f970 	bl	80009bc <__aeabi_dcmplt>
 80046dc:	b110      	cbz	r0, 80046e4 <_printf_float+0x80>
 80046de:	232d      	movs	r3, #45	; 0x2d
 80046e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e4:	4f9b      	ldr	r7, [pc, #620]	; (8004954 <_printf_float+0x2f0>)
 80046e6:	4b9c      	ldr	r3, [pc, #624]	; (8004958 <_printf_float+0x2f4>)
 80046e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046ec:	bf98      	it	ls
 80046ee:	461f      	movls	r7, r3
 80046f0:	2303      	movs	r3, #3
 80046f2:	f04f 0900 	mov.w	r9, #0
 80046f6:	6123      	str	r3, [r4, #16]
 80046f8:	f02a 0304 	bic.w	r3, sl, #4
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	9600      	str	r6, [sp, #0]
 8004700:	465b      	mov	r3, fp
 8004702:	aa0f      	add	r2, sp, #60	; 0x3c
 8004704:	4621      	mov	r1, r4
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f9e2 	bl	8004ad0 <_printf_common>
 800470c:	3001      	adds	r0, #1
 800470e:	f040 8090 	bne.w	8004832 <_printf_float+0x1ce>
 8004712:	f04f 30ff 	mov.w	r0, #4294967295
 8004716:	b011      	add	sp, #68	; 0x44
 8004718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800471c:	463a      	mov	r2, r7
 800471e:	464b      	mov	r3, r9
 8004720:	4638      	mov	r0, r7
 8004722:	4649      	mov	r1, r9
 8004724:	f7fc f972 	bl	8000a0c <__aeabi_dcmpun>
 8004728:	b110      	cbz	r0, 8004730 <_printf_float+0xcc>
 800472a:	4f8c      	ldr	r7, [pc, #560]	; (800495c <_printf_float+0x2f8>)
 800472c:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <_printf_float+0x2fc>)
 800472e:	e7db      	b.n	80046e8 <_printf_float+0x84>
 8004730:	6863      	ldr	r3, [r4, #4]
 8004732:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004736:	1c59      	adds	r1, r3, #1
 8004738:	a80d      	add	r0, sp, #52	; 0x34
 800473a:	a90e      	add	r1, sp, #56	; 0x38
 800473c:	d140      	bne.n	80047c0 <_printf_float+0x15c>
 800473e:	2306      	movs	r3, #6
 8004740:	6063      	str	r3, [r4, #4]
 8004742:	f04f 0c00 	mov.w	ip, #0
 8004746:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800474a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	6022      	str	r2, [r4, #0]
 8004752:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	463a      	mov	r2, r7
 800475a:	464b      	mov	r3, r9
 800475c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004760:	4628      	mov	r0, r5
 8004762:	f7ff feed 	bl	8004540 <__cvt>
 8004766:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800476a:	2b47      	cmp	r3, #71	; 0x47
 800476c:	4607      	mov	r7, r0
 800476e:	d109      	bne.n	8004784 <_printf_float+0x120>
 8004770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004772:	1cd8      	adds	r0, r3, #3
 8004774:	db02      	blt.n	800477c <_printf_float+0x118>
 8004776:	6862      	ldr	r2, [r4, #4]
 8004778:	4293      	cmp	r3, r2
 800477a:	dd47      	ble.n	800480c <_printf_float+0x1a8>
 800477c:	f1a8 0802 	sub.w	r8, r8, #2
 8004780:	fa5f f888 	uxtb.w	r8, r8
 8004784:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004788:	990d      	ldr	r1, [sp, #52]	; 0x34
 800478a:	d824      	bhi.n	80047d6 <_printf_float+0x172>
 800478c:	3901      	subs	r1, #1
 800478e:	4642      	mov	r2, r8
 8004790:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004794:	910d      	str	r1, [sp, #52]	; 0x34
 8004796:	f7ff ff2f 	bl	80045f8 <__exponent>
 800479a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800479c:	4681      	mov	r9, r0
 800479e:	1813      	adds	r3, r2, r0
 80047a0:	2a01      	cmp	r2, #1
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	dc02      	bgt.n	80047ac <_printf_float+0x148>
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	07d1      	lsls	r1, r2, #31
 80047aa:	d501      	bpl.n	80047b0 <_printf_float+0x14c>
 80047ac:	3301      	adds	r3, #1
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0a2      	beq.n	80046fe <_printf_float+0x9a>
 80047b8:	232d      	movs	r3, #45	; 0x2d
 80047ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047be:	e79e      	b.n	80046fe <_printf_float+0x9a>
 80047c0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80047c4:	f000 816e 	beq.w	8004aa4 <_printf_float+0x440>
 80047c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047cc:	d1b9      	bne.n	8004742 <_printf_float+0xde>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1b7      	bne.n	8004742 <_printf_float+0xde>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e7b4      	b.n	8004740 <_printf_float+0xdc>
 80047d6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80047da:	d119      	bne.n	8004810 <_printf_float+0x1ac>
 80047dc:	2900      	cmp	r1, #0
 80047de:	6863      	ldr	r3, [r4, #4]
 80047e0:	dd0c      	ble.n	80047fc <_printf_float+0x198>
 80047e2:	6121      	str	r1, [r4, #16]
 80047e4:	b913      	cbnz	r3, 80047ec <_printf_float+0x188>
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	07d2      	lsls	r2, r2, #31
 80047ea:	d502      	bpl.n	80047f2 <_printf_float+0x18e>
 80047ec:	3301      	adds	r3, #1
 80047ee:	440b      	add	r3, r1
 80047f0:	6123      	str	r3, [r4, #16]
 80047f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047f4:	f04f 0900 	mov.w	r9, #0
 80047f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80047fa:	e7d9      	b.n	80047b0 <_printf_float+0x14c>
 80047fc:	b913      	cbnz	r3, 8004804 <_printf_float+0x1a0>
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	07d0      	lsls	r0, r2, #31
 8004802:	d501      	bpl.n	8004808 <_printf_float+0x1a4>
 8004804:	3302      	adds	r3, #2
 8004806:	e7f3      	b.n	80047f0 <_printf_float+0x18c>
 8004808:	2301      	movs	r3, #1
 800480a:	e7f1      	b.n	80047f0 <_printf_float+0x18c>
 800480c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004810:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004814:	4293      	cmp	r3, r2
 8004816:	db05      	blt.n	8004824 <_printf_float+0x1c0>
 8004818:	6822      	ldr	r2, [r4, #0]
 800481a:	6123      	str	r3, [r4, #16]
 800481c:	07d1      	lsls	r1, r2, #31
 800481e:	d5e8      	bpl.n	80047f2 <_printf_float+0x18e>
 8004820:	3301      	adds	r3, #1
 8004822:	e7e5      	b.n	80047f0 <_printf_float+0x18c>
 8004824:	2b00      	cmp	r3, #0
 8004826:	bfcc      	ite	gt
 8004828:	2301      	movgt	r3, #1
 800482a:	f1c3 0302 	rsble	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	e7de      	b.n	80047f0 <_printf_float+0x18c>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	055a      	lsls	r2, r3, #21
 8004836:	d407      	bmi.n	8004848 <_printf_float+0x1e4>
 8004838:	6923      	ldr	r3, [r4, #16]
 800483a:	463a      	mov	r2, r7
 800483c:	4659      	mov	r1, fp
 800483e:	4628      	mov	r0, r5
 8004840:	47b0      	blx	r6
 8004842:	3001      	adds	r0, #1
 8004844:	d129      	bne.n	800489a <_printf_float+0x236>
 8004846:	e764      	b.n	8004712 <_printf_float+0xae>
 8004848:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800484c:	f240 80d7 	bls.w	80049fe <_printf_float+0x39a>
 8004850:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004854:	2200      	movs	r2, #0
 8004856:	2300      	movs	r3, #0
 8004858:	f7fc f8a6 	bl	80009a8 <__aeabi_dcmpeq>
 800485c:	b388      	cbz	r0, 80048c2 <_printf_float+0x25e>
 800485e:	2301      	movs	r3, #1
 8004860:	4a40      	ldr	r2, [pc, #256]	; (8004964 <_printf_float+0x300>)
 8004862:	4659      	mov	r1, fp
 8004864:	4628      	mov	r0, r5
 8004866:	47b0      	blx	r6
 8004868:	3001      	adds	r0, #1
 800486a:	f43f af52 	beq.w	8004712 <_printf_float+0xae>
 800486e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004872:	429a      	cmp	r2, r3
 8004874:	db02      	blt.n	800487c <_printf_float+0x218>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	07d8      	lsls	r0, r3, #31
 800487a:	d50e      	bpl.n	800489a <_printf_float+0x236>
 800487c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004880:	4659      	mov	r1, fp
 8004882:	4628      	mov	r0, r5
 8004884:	47b0      	blx	r6
 8004886:	3001      	adds	r0, #1
 8004888:	f43f af43 	beq.w	8004712 <_printf_float+0xae>
 800488c:	2700      	movs	r7, #0
 800488e:	f104 081a 	add.w	r8, r4, #26
 8004892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004894:	3b01      	subs	r3, #1
 8004896:	42bb      	cmp	r3, r7
 8004898:	dc09      	bgt.n	80048ae <_printf_float+0x24a>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	079f      	lsls	r7, r3, #30
 800489e:	f100 80fd 	bmi.w	8004a9c <_printf_float+0x438>
 80048a2:	68e0      	ldr	r0, [r4, #12]
 80048a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048a6:	4298      	cmp	r0, r3
 80048a8:	bfb8      	it	lt
 80048aa:	4618      	movlt	r0, r3
 80048ac:	e733      	b.n	8004716 <_printf_float+0xb2>
 80048ae:	2301      	movs	r3, #1
 80048b0:	4642      	mov	r2, r8
 80048b2:	4659      	mov	r1, fp
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b0      	blx	r6
 80048b8:	3001      	adds	r0, #1
 80048ba:	f43f af2a 	beq.w	8004712 <_printf_float+0xae>
 80048be:	3701      	adds	r7, #1
 80048c0:	e7e7      	b.n	8004892 <_printf_float+0x22e>
 80048c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	dc2b      	bgt.n	8004920 <_printf_float+0x2bc>
 80048c8:	2301      	movs	r3, #1
 80048ca:	4a26      	ldr	r2, [pc, #152]	; (8004964 <_printf_float+0x300>)
 80048cc:	4659      	mov	r1, fp
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b0      	blx	r6
 80048d2:	3001      	adds	r0, #1
 80048d4:	f43f af1d 	beq.w	8004712 <_printf_float+0xae>
 80048d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048da:	b923      	cbnz	r3, 80048e6 <_printf_float+0x282>
 80048dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048de:	b913      	cbnz	r3, 80048e6 <_printf_float+0x282>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	07d9      	lsls	r1, r3, #31
 80048e4:	d5d9      	bpl.n	800489a <_printf_float+0x236>
 80048e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ea:	4659      	mov	r1, fp
 80048ec:	4628      	mov	r0, r5
 80048ee:	47b0      	blx	r6
 80048f0:	3001      	adds	r0, #1
 80048f2:	f43f af0e 	beq.w	8004712 <_printf_float+0xae>
 80048f6:	f04f 0800 	mov.w	r8, #0
 80048fa:	f104 091a 	add.w	r9, r4, #26
 80048fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004900:	425b      	negs	r3, r3
 8004902:	4543      	cmp	r3, r8
 8004904:	dc01      	bgt.n	800490a <_printf_float+0x2a6>
 8004906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004908:	e797      	b.n	800483a <_printf_float+0x1d6>
 800490a:	2301      	movs	r3, #1
 800490c:	464a      	mov	r2, r9
 800490e:	4659      	mov	r1, fp
 8004910:	4628      	mov	r0, r5
 8004912:	47b0      	blx	r6
 8004914:	3001      	adds	r0, #1
 8004916:	f43f aefc 	beq.w	8004712 <_printf_float+0xae>
 800491a:	f108 0801 	add.w	r8, r8, #1
 800491e:	e7ee      	b.n	80048fe <_printf_float+0x29a>
 8004920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004924:	429a      	cmp	r2, r3
 8004926:	bfa8      	it	ge
 8004928:	461a      	movge	r2, r3
 800492a:	2a00      	cmp	r2, #0
 800492c:	4690      	mov	r8, r2
 800492e:	dd07      	ble.n	8004940 <_printf_float+0x2dc>
 8004930:	4613      	mov	r3, r2
 8004932:	4659      	mov	r1, fp
 8004934:	463a      	mov	r2, r7
 8004936:	4628      	mov	r0, r5
 8004938:	47b0      	blx	r6
 800493a:	3001      	adds	r0, #1
 800493c:	f43f aee9 	beq.w	8004712 <_printf_float+0xae>
 8004940:	f104 031a 	add.w	r3, r4, #26
 8004944:	f04f 0a00 	mov.w	sl, #0
 8004948:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800494c:	930b      	str	r3, [sp, #44]	; 0x2c
 800494e:	e015      	b.n	800497c <_printf_float+0x318>
 8004950:	7fefffff 	.word	0x7fefffff
 8004954:	0800839c 	.word	0x0800839c
 8004958:	08008398 	.word	0x08008398
 800495c:	080083a4 	.word	0x080083a4
 8004960:	080083a0 	.word	0x080083a0
 8004964:	080083a8 	.word	0x080083a8
 8004968:	2301      	movs	r3, #1
 800496a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800496c:	4659      	mov	r1, fp
 800496e:	4628      	mov	r0, r5
 8004970:	47b0      	blx	r6
 8004972:	3001      	adds	r0, #1
 8004974:	f43f aecd 	beq.w	8004712 <_printf_float+0xae>
 8004978:	f10a 0a01 	add.w	sl, sl, #1
 800497c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004980:	eba9 0308 	sub.w	r3, r9, r8
 8004984:	4553      	cmp	r3, sl
 8004986:	dcef      	bgt.n	8004968 <_printf_float+0x304>
 8004988:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800498c:	429a      	cmp	r2, r3
 800498e:	444f      	add	r7, r9
 8004990:	db14      	blt.n	80049bc <_printf_float+0x358>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	07da      	lsls	r2, r3, #31
 8004996:	d411      	bmi.n	80049bc <_printf_float+0x358>
 8004998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800499a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800499c:	eba3 0209 	sub.w	r2, r3, r9
 80049a0:	eba3 0901 	sub.w	r9, r3, r1
 80049a4:	4591      	cmp	r9, r2
 80049a6:	bfa8      	it	ge
 80049a8:	4691      	movge	r9, r2
 80049aa:	f1b9 0f00 	cmp.w	r9, #0
 80049ae:	dc0d      	bgt.n	80049cc <_printf_float+0x368>
 80049b0:	2700      	movs	r7, #0
 80049b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049b6:	f104 081a 	add.w	r8, r4, #26
 80049ba:	e018      	b.n	80049ee <_printf_float+0x38a>
 80049bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049c0:	4659      	mov	r1, fp
 80049c2:	4628      	mov	r0, r5
 80049c4:	47b0      	blx	r6
 80049c6:	3001      	adds	r0, #1
 80049c8:	d1e6      	bne.n	8004998 <_printf_float+0x334>
 80049ca:	e6a2      	b.n	8004712 <_printf_float+0xae>
 80049cc:	464b      	mov	r3, r9
 80049ce:	463a      	mov	r2, r7
 80049d0:	4659      	mov	r1, fp
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b0      	blx	r6
 80049d6:	3001      	adds	r0, #1
 80049d8:	d1ea      	bne.n	80049b0 <_printf_float+0x34c>
 80049da:	e69a      	b.n	8004712 <_printf_float+0xae>
 80049dc:	2301      	movs	r3, #1
 80049de:	4642      	mov	r2, r8
 80049e0:	4659      	mov	r1, fp
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b0      	blx	r6
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae93 	beq.w	8004712 <_printf_float+0xae>
 80049ec:	3701      	adds	r7, #1
 80049ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	eba3 0309 	sub.w	r3, r3, r9
 80049f8:	42bb      	cmp	r3, r7
 80049fa:	dcef      	bgt.n	80049dc <_printf_float+0x378>
 80049fc:	e74d      	b.n	800489a <_printf_float+0x236>
 80049fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a00:	2a01      	cmp	r2, #1
 8004a02:	dc01      	bgt.n	8004a08 <_printf_float+0x3a4>
 8004a04:	07db      	lsls	r3, r3, #31
 8004a06:	d538      	bpl.n	8004a7a <_printf_float+0x416>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	463a      	mov	r2, r7
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	4628      	mov	r0, r5
 8004a10:	47b0      	blx	r6
 8004a12:	3001      	adds	r0, #1
 8004a14:	f43f ae7d 	beq.w	8004712 <_printf_float+0xae>
 8004a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	4628      	mov	r0, r5
 8004a20:	47b0      	blx	r6
 8004a22:	3001      	adds	r0, #1
 8004a24:	f107 0701 	add.w	r7, r7, #1
 8004a28:	f43f ae73 	beq.w	8004712 <_printf_float+0xae>
 8004a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a32:	2200      	movs	r2, #0
 8004a34:	f103 38ff 	add.w	r8, r3, #4294967295
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f7fb ffb5 	bl	80009a8 <__aeabi_dcmpeq>
 8004a3e:	b9c0      	cbnz	r0, 8004a72 <_printf_float+0x40e>
 8004a40:	4643      	mov	r3, r8
 8004a42:	463a      	mov	r2, r7
 8004a44:	4659      	mov	r1, fp
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b0      	blx	r6
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d10d      	bne.n	8004a6a <_printf_float+0x406>
 8004a4e:	e660      	b.n	8004712 <_printf_float+0xae>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4642      	mov	r2, r8
 8004a54:	4659      	mov	r1, fp
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b0      	blx	r6
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f ae59 	beq.w	8004712 <_printf_float+0xae>
 8004a60:	3701      	adds	r7, #1
 8004a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a64:	3b01      	subs	r3, #1
 8004a66:	42bb      	cmp	r3, r7
 8004a68:	dcf2      	bgt.n	8004a50 <_printf_float+0x3ec>
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a70:	e6e4      	b.n	800483c <_printf_float+0x1d8>
 8004a72:	2700      	movs	r7, #0
 8004a74:	f104 081a 	add.w	r8, r4, #26
 8004a78:	e7f3      	b.n	8004a62 <_printf_float+0x3fe>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e7e1      	b.n	8004a42 <_printf_float+0x3de>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4642      	mov	r2, r8
 8004a82:	4659      	mov	r1, fp
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b0      	blx	r6
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f43f ae42 	beq.w	8004712 <_printf_float+0xae>
 8004a8e:	3701      	adds	r7, #1
 8004a90:	68e3      	ldr	r3, [r4, #12]
 8004a92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	42bb      	cmp	r3, r7
 8004a98:	dcf1      	bgt.n	8004a7e <_printf_float+0x41a>
 8004a9a:	e702      	b.n	80048a2 <_printf_float+0x23e>
 8004a9c:	2700      	movs	r7, #0
 8004a9e:	f104 0819 	add.w	r8, r4, #25
 8004aa2:	e7f5      	b.n	8004a90 <_printf_float+0x42c>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f43f ae94 	beq.w	80047d2 <_printf_float+0x16e>
 8004aaa:	f04f 0c00 	mov.w	ip, #0
 8004aae:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004ab2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004ab6:	6022      	str	r2, [r4, #0]
 8004ab8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004abc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	463a      	mov	r2, r7
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f7ff fd3a 	bl	8004540 <__cvt>
 8004acc:	4607      	mov	r7, r0
 8004ace:	e64f      	b.n	8004770 <_printf_float+0x10c>

08004ad0 <_printf_common>:
 8004ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad4:	4691      	mov	r9, r2
 8004ad6:	461f      	mov	r7, r3
 8004ad8:	688a      	ldr	r2, [r1, #8]
 8004ada:	690b      	ldr	r3, [r1, #16]
 8004adc:	4606      	mov	r6, r0
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	bfb8      	it	lt
 8004ae2:	4613      	movlt	r3, r2
 8004ae4:	f8c9 3000 	str.w	r3, [r9]
 8004ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aec:	460c      	mov	r4, r1
 8004aee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004af2:	b112      	cbz	r2, 8004afa <_printf_common+0x2a>
 8004af4:	3301      	adds	r3, #1
 8004af6:	f8c9 3000 	str.w	r3, [r9]
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	0699      	lsls	r1, r3, #26
 8004afe:	bf42      	ittt	mi
 8004b00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b04:	3302      	addmi	r3, #2
 8004b06:	f8c9 3000 	strmi.w	r3, [r9]
 8004b0a:	6825      	ldr	r5, [r4, #0]
 8004b0c:	f015 0506 	ands.w	r5, r5, #6
 8004b10:	d107      	bne.n	8004b22 <_printf_common+0x52>
 8004b12:	f104 0a19 	add.w	sl, r4, #25
 8004b16:	68e3      	ldr	r3, [r4, #12]
 8004b18:	f8d9 2000 	ldr.w	r2, [r9]
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	42ab      	cmp	r3, r5
 8004b20:	dc29      	bgt.n	8004b76 <_printf_common+0xa6>
 8004b22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b26:	6822      	ldr	r2, [r4, #0]
 8004b28:	3300      	adds	r3, #0
 8004b2a:	bf18      	it	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	0692      	lsls	r2, r2, #26
 8004b30:	d42e      	bmi.n	8004b90 <_printf_common+0xc0>
 8004b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b36:	4639      	mov	r1, r7
 8004b38:	4630      	mov	r0, r6
 8004b3a:	47c0      	blx	r8
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d021      	beq.n	8004b84 <_printf_common+0xb4>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	68e5      	ldr	r5, [r4, #12]
 8004b44:	f003 0306 	and.w	r3, r3, #6
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	bf18      	it	ne
 8004b4c:	2500      	movne	r5, #0
 8004b4e:	f8d9 2000 	ldr.w	r2, [r9]
 8004b52:	f04f 0900 	mov.w	r9, #0
 8004b56:	bf08      	it	eq
 8004b58:	1aad      	subeq	r5, r5, r2
 8004b5a:	68a3      	ldr	r3, [r4, #8]
 8004b5c:	6922      	ldr	r2, [r4, #16]
 8004b5e:	bf08      	it	eq
 8004b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b64:	4293      	cmp	r3, r2
 8004b66:	bfc4      	itt	gt
 8004b68:	1a9b      	subgt	r3, r3, r2
 8004b6a:	18ed      	addgt	r5, r5, r3
 8004b6c:	341a      	adds	r4, #26
 8004b6e:	454d      	cmp	r5, r9
 8004b70:	d11a      	bne.n	8004ba8 <_printf_common+0xd8>
 8004b72:	2000      	movs	r0, #0
 8004b74:	e008      	b.n	8004b88 <_printf_common+0xb8>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4652      	mov	r2, sl
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	47c0      	blx	r8
 8004b80:	3001      	adds	r0, #1
 8004b82:	d103      	bne.n	8004b8c <_printf_common+0xbc>
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	e7c2      	b.n	8004b16 <_printf_common+0x46>
 8004b90:	2030      	movs	r0, #48	; 0x30
 8004b92:	18e1      	adds	r1, r4, r3
 8004b94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b9e:	4422      	add	r2, r4
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ba6:	e7c4      	b.n	8004b32 <_printf_common+0x62>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4622      	mov	r2, r4
 8004bac:	4639      	mov	r1, r7
 8004bae:	4630      	mov	r0, r6
 8004bb0:	47c0      	blx	r8
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d0e6      	beq.n	8004b84 <_printf_common+0xb4>
 8004bb6:	f109 0901 	add.w	r9, r9, #1
 8004bba:	e7d8      	b.n	8004b6e <_printf_common+0x9e>

08004bbc <_printf_i>:
 8004bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	7e09      	ldrb	r1, [r1, #24]
 8004bc8:	b085      	sub	sp, #20
 8004bca:	296e      	cmp	r1, #110	; 0x6e
 8004bcc:	4617      	mov	r7, r2
 8004bce:	4606      	mov	r6, r0
 8004bd0:	4698      	mov	r8, r3
 8004bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bd4:	f000 80b3 	beq.w	8004d3e <_printf_i+0x182>
 8004bd8:	d822      	bhi.n	8004c20 <_printf_i+0x64>
 8004bda:	2963      	cmp	r1, #99	; 0x63
 8004bdc:	d036      	beq.n	8004c4c <_printf_i+0x90>
 8004bde:	d80a      	bhi.n	8004bf6 <_printf_i+0x3a>
 8004be0:	2900      	cmp	r1, #0
 8004be2:	f000 80b9 	beq.w	8004d58 <_printf_i+0x19c>
 8004be6:	2958      	cmp	r1, #88	; 0x58
 8004be8:	f000 8083 	beq.w	8004cf2 <_printf_i+0x136>
 8004bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bf4:	e032      	b.n	8004c5c <_printf_i+0xa0>
 8004bf6:	2964      	cmp	r1, #100	; 0x64
 8004bf8:	d001      	beq.n	8004bfe <_printf_i+0x42>
 8004bfa:	2969      	cmp	r1, #105	; 0x69
 8004bfc:	d1f6      	bne.n	8004bec <_printf_i+0x30>
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	6813      	ldr	r3, [r2, #0]
 8004c02:	0605      	lsls	r5, r0, #24
 8004c04:	f103 0104 	add.w	r1, r3, #4
 8004c08:	d52a      	bpl.n	8004c60 <_printf_i+0xa4>
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6011      	str	r1, [r2, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	da03      	bge.n	8004c1a <_printf_i+0x5e>
 8004c12:	222d      	movs	r2, #45	; 0x2d
 8004c14:	425b      	negs	r3, r3
 8004c16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c1a:	486f      	ldr	r0, [pc, #444]	; (8004dd8 <_printf_i+0x21c>)
 8004c1c:	220a      	movs	r2, #10
 8004c1e:	e039      	b.n	8004c94 <_printf_i+0xd8>
 8004c20:	2973      	cmp	r1, #115	; 0x73
 8004c22:	f000 809d 	beq.w	8004d60 <_printf_i+0x1a4>
 8004c26:	d808      	bhi.n	8004c3a <_printf_i+0x7e>
 8004c28:	296f      	cmp	r1, #111	; 0x6f
 8004c2a:	d020      	beq.n	8004c6e <_printf_i+0xb2>
 8004c2c:	2970      	cmp	r1, #112	; 0x70
 8004c2e:	d1dd      	bne.n	8004bec <_printf_i+0x30>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	f043 0320 	orr.w	r3, r3, #32
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	e003      	b.n	8004c42 <_printf_i+0x86>
 8004c3a:	2975      	cmp	r1, #117	; 0x75
 8004c3c:	d017      	beq.n	8004c6e <_printf_i+0xb2>
 8004c3e:	2978      	cmp	r1, #120	; 0x78
 8004c40:	d1d4      	bne.n	8004bec <_printf_i+0x30>
 8004c42:	2378      	movs	r3, #120	; 0x78
 8004c44:	4865      	ldr	r0, [pc, #404]	; (8004ddc <_printf_i+0x220>)
 8004c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c4a:	e055      	b.n	8004cf8 <_printf_i+0x13c>
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c52:	1d19      	adds	r1, r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6011      	str	r1, [r2, #0]
 8004c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e08c      	b.n	8004d7a <_printf_i+0x1be>
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c66:	6011      	str	r1, [r2, #0]
 8004c68:	bf18      	it	ne
 8004c6a:	b21b      	sxthne	r3, r3
 8004c6c:	e7cf      	b.n	8004c0e <_printf_i+0x52>
 8004c6e:	6813      	ldr	r3, [r2, #0]
 8004c70:	6825      	ldr	r5, [r4, #0]
 8004c72:	1d18      	adds	r0, r3, #4
 8004c74:	6010      	str	r0, [r2, #0]
 8004c76:	0628      	lsls	r0, r5, #24
 8004c78:	d501      	bpl.n	8004c7e <_printf_i+0xc2>
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	e002      	b.n	8004c84 <_printf_i+0xc8>
 8004c7e:	0668      	lsls	r0, r5, #25
 8004c80:	d5fb      	bpl.n	8004c7a <_printf_i+0xbe>
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	296f      	cmp	r1, #111	; 0x6f
 8004c86:	bf14      	ite	ne
 8004c88:	220a      	movne	r2, #10
 8004c8a:	2208      	moveq	r2, #8
 8004c8c:	4852      	ldr	r0, [pc, #328]	; (8004dd8 <_printf_i+0x21c>)
 8004c8e:	2100      	movs	r1, #0
 8004c90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c94:	6865      	ldr	r5, [r4, #4]
 8004c96:	2d00      	cmp	r5, #0
 8004c98:	60a5      	str	r5, [r4, #8]
 8004c9a:	f2c0 8095 	blt.w	8004dc8 <_printf_i+0x20c>
 8004c9e:	6821      	ldr	r1, [r4, #0]
 8004ca0:	f021 0104 	bic.w	r1, r1, #4
 8004ca4:	6021      	str	r1, [r4, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d13d      	bne.n	8004d26 <_printf_i+0x16a>
 8004caa:	2d00      	cmp	r5, #0
 8004cac:	f040 808e 	bne.w	8004dcc <_printf_i+0x210>
 8004cb0:	4665      	mov	r5, ip
 8004cb2:	2a08      	cmp	r2, #8
 8004cb4:	d10b      	bne.n	8004cce <_printf_i+0x112>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	07db      	lsls	r3, r3, #31
 8004cba:	d508      	bpl.n	8004cce <_printf_i+0x112>
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	6862      	ldr	r2, [r4, #4]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	bfde      	ittt	le
 8004cc4:	2330      	movle	r3, #48	; 0x30
 8004cc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cce:	ebac 0305 	sub.w	r3, ip, r5
 8004cd2:	6123      	str	r3, [r4, #16]
 8004cd4:	f8cd 8000 	str.w	r8, [sp]
 8004cd8:	463b      	mov	r3, r7
 8004cda:	aa03      	add	r2, sp, #12
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7ff fef6 	bl	8004ad0 <_printf_common>
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d14d      	bne.n	8004d84 <_printf_i+0x1c8>
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	b005      	add	sp, #20
 8004cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cf2:	4839      	ldr	r0, [pc, #228]	; (8004dd8 <_printf_i+0x21c>)
 8004cf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cf8:	6813      	ldr	r3, [r2, #0]
 8004cfa:	6821      	ldr	r1, [r4, #0]
 8004cfc:	1d1d      	adds	r5, r3, #4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6015      	str	r5, [r2, #0]
 8004d02:	060a      	lsls	r2, r1, #24
 8004d04:	d50b      	bpl.n	8004d1e <_printf_i+0x162>
 8004d06:	07ca      	lsls	r2, r1, #31
 8004d08:	bf44      	itt	mi
 8004d0a:	f041 0120 	orrmi.w	r1, r1, #32
 8004d0e:	6021      	strmi	r1, [r4, #0]
 8004d10:	b91b      	cbnz	r3, 8004d1a <_printf_i+0x15e>
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	f022 0220 	bic.w	r2, r2, #32
 8004d18:	6022      	str	r2, [r4, #0]
 8004d1a:	2210      	movs	r2, #16
 8004d1c:	e7b7      	b.n	8004c8e <_printf_i+0xd2>
 8004d1e:	064d      	lsls	r5, r1, #25
 8004d20:	bf48      	it	mi
 8004d22:	b29b      	uxthmi	r3, r3
 8004d24:	e7ef      	b.n	8004d06 <_printf_i+0x14a>
 8004d26:	4665      	mov	r5, ip
 8004d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d2c:	fb02 3311 	mls	r3, r2, r1, r3
 8004d30:	5cc3      	ldrb	r3, [r0, r3]
 8004d32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d36:	460b      	mov	r3, r1
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	d1f5      	bne.n	8004d28 <_printf_i+0x16c>
 8004d3c:	e7b9      	b.n	8004cb2 <_printf_i+0xf6>
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	6825      	ldr	r5, [r4, #0]
 8004d42:	1d18      	adds	r0, r3, #4
 8004d44:	6961      	ldr	r1, [r4, #20]
 8004d46:	6010      	str	r0, [r2, #0]
 8004d48:	0628      	lsls	r0, r5, #24
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	d501      	bpl.n	8004d52 <_printf_i+0x196>
 8004d4e:	6019      	str	r1, [r3, #0]
 8004d50:	e002      	b.n	8004d58 <_printf_i+0x19c>
 8004d52:	066a      	lsls	r2, r5, #25
 8004d54:	d5fb      	bpl.n	8004d4e <_printf_i+0x192>
 8004d56:	8019      	strh	r1, [r3, #0]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	4665      	mov	r5, ip
 8004d5c:	6123      	str	r3, [r4, #16]
 8004d5e:	e7b9      	b.n	8004cd4 <_printf_i+0x118>
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	1d19      	adds	r1, r3, #4
 8004d64:	6011      	str	r1, [r2, #0]
 8004d66:	681d      	ldr	r5, [r3, #0]
 8004d68:	6862      	ldr	r2, [r4, #4]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f002 fa95 	bl	800729c <memchr>
 8004d72:	b108      	cbz	r0, 8004d78 <_printf_i+0x1bc>
 8004d74:	1b40      	subs	r0, r0, r5
 8004d76:	6060      	str	r0, [r4, #4]
 8004d78:	6863      	ldr	r3, [r4, #4]
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d82:	e7a7      	b.n	8004cd4 <_printf_i+0x118>
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	462a      	mov	r2, r5
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	47c0      	blx	r8
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d0aa      	beq.n	8004ce8 <_printf_i+0x12c>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	079b      	lsls	r3, r3, #30
 8004d96:	d413      	bmi.n	8004dc0 <_printf_i+0x204>
 8004d98:	68e0      	ldr	r0, [r4, #12]
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	4298      	cmp	r0, r3
 8004d9e:	bfb8      	it	lt
 8004da0:	4618      	movlt	r0, r3
 8004da2:	e7a3      	b.n	8004cec <_printf_i+0x130>
 8004da4:	2301      	movs	r3, #1
 8004da6:	464a      	mov	r2, r9
 8004da8:	4639      	mov	r1, r7
 8004daa:	4630      	mov	r0, r6
 8004dac:	47c0      	blx	r8
 8004dae:	3001      	adds	r0, #1
 8004db0:	d09a      	beq.n	8004ce8 <_printf_i+0x12c>
 8004db2:	3501      	adds	r5, #1
 8004db4:	68e3      	ldr	r3, [r4, #12]
 8004db6:	9a03      	ldr	r2, [sp, #12]
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	42ab      	cmp	r3, r5
 8004dbc:	dcf2      	bgt.n	8004da4 <_printf_i+0x1e8>
 8004dbe:	e7eb      	b.n	8004d98 <_printf_i+0x1dc>
 8004dc0:	2500      	movs	r5, #0
 8004dc2:	f104 0919 	add.w	r9, r4, #25
 8004dc6:	e7f5      	b.n	8004db4 <_printf_i+0x1f8>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ac      	bne.n	8004d26 <_printf_i+0x16a>
 8004dcc:	7803      	ldrb	r3, [r0, #0]
 8004dce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dd6:	e76c      	b.n	8004cb2 <_printf_i+0xf6>
 8004dd8:	080083aa 	.word	0x080083aa
 8004ddc:	080083bb 	.word	0x080083bb

08004de0 <_scanf_float>:
 8004de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de4:	469a      	mov	sl, r3
 8004de6:	688b      	ldr	r3, [r1, #8]
 8004de8:	4616      	mov	r6, r2
 8004dea:	1e5a      	subs	r2, r3, #1
 8004dec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004df0:	bf88      	it	hi
 8004df2:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004df6:	b087      	sub	sp, #28
 8004df8:	bf85      	ittet	hi
 8004dfa:	189b      	addhi	r3, r3, r2
 8004dfc:	9301      	strhi	r3, [sp, #4]
 8004dfe:	2300      	movls	r3, #0
 8004e00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e04:	4688      	mov	r8, r1
 8004e06:	f04f 0b00 	mov.w	fp, #0
 8004e0a:	bf8c      	ite	hi
 8004e0c:	608b      	strhi	r3, [r1, #8]
 8004e0e:	9301      	strls	r3, [sp, #4]
 8004e10:	680b      	ldr	r3, [r1, #0]
 8004e12:	4607      	mov	r7, r0
 8004e14:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004e18:	f848 3b1c 	str.w	r3, [r8], #28
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	4645      	mov	r5, r8
 8004e20:	465a      	mov	r2, fp
 8004e22:	46d9      	mov	r9, fp
 8004e24:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004e28:	f8cd b008 	str.w	fp, [sp, #8]
 8004e2c:	68a1      	ldr	r1, [r4, #8]
 8004e2e:	b181      	cbz	r1, 8004e52 <_scanf_float+0x72>
 8004e30:	6833      	ldr	r3, [r6, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b49      	cmp	r3, #73	; 0x49
 8004e36:	d071      	beq.n	8004f1c <_scanf_float+0x13c>
 8004e38:	d84d      	bhi.n	8004ed6 <_scanf_float+0xf6>
 8004e3a:	2b39      	cmp	r3, #57	; 0x39
 8004e3c:	d840      	bhi.n	8004ec0 <_scanf_float+0xe0>
 8004e3e:	2b31      	cmp	r3, #49	; 0x31
 8004e40:	f080 8088 	bcs.w	8004f54 <_scanf_float+0x174>
 8004e44:	2b2d      	cmp	r3, #45	; 0x2d
 8004e46:	f000 8090 	beq.w	8004f6a <_scanf_float+0x18a>
 8004e4a:	d815      	bhi.n	8004e78 <_scanf_float+0x98>
 8004e4c:	2b2b      	cmp	r3, #43	; 0x2b
 8004e4e:	f000 808c 	beq.w	8004f6a <_scanf_float+0x18a>
 8004e52:	f1b9 0f00 	cmp.w	r9, #0
 8004e56:	d003      	beq.n	8004e60 <_scanf_float+0x80>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5e:	6023      	str	r3, [r4, #0]
 8004e60:	3a01      	subs	r2, #1
 8004e62:	2a01      	cmp	r2, #1
 8004e64:	f200 80ea 	bhi.w	800503c <_scanf_float+0x25c>
 8004e68:	4545      	cmp	r5, r8
 8004e6a:	f200 80dc 	bhi.w	8005026 <_scanf_float+0x246>
 8004e6e:	2601      	movs	r6, #1
 8004e70:	4630      	mov	r0, r6
 8004e72:	b007      	add	sp, #28
 8004e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e78:	2b2e      	cmp	r3, #46	; 0x2e
 8004e7a:	f000 809f 	beq.w	8004fbc <_scanf_float+0x1dc>
 8004e7e:	2b30      	cmp	r3, #48	; 0x30
 8004e80:	d1e7      	bne.n	8004e52 <_scanf_float+0x72>
 8004e82:	6820      	ldr	r0, [r4, #0]
 8004e84:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004e88:	d064      	beq.n	8004f54 <_scanf_float+0x174>
 8004e8a:	9b01      	ldr	r3, [sp, #4]
 8004e8c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004e90:	6020      	str	r0, [r4, #0]
 8004e92:	f109 0901 	add.w	r9, r9, #1
 8004e96:	b11b      	cbz	r3, 8004ea0 <_scanf_float+0xc0>
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	3101      	adds	r1, #1
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	60a1      	str	r1, [r4, #8]
 8004ea0:	68a3      	ldr	r3, [r4, #8]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	60a3      	str	r3, [r4, #8]
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	6123      	str	r3, [r4, #16]
 8004eac:	6873      	ldr	r3, [r6, #4]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	6073      	str	r3, [r6, #4]
 8004eb4:	f340 80ac 	ble.w	8005010 <_scanf_float+0x230>
 8004eb8:	6833      	ldr	r3, [r6, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	6033      	str	r3, [r6, #0]
 8004ebe:	e7b5      	b.n	8004e2c <_scanf_float+0x4c>
 8004ec0:	2b45      	cmp	r3, #69	; 0x45
 8004ec2:	f000 8085 	beq.w	8004fd0 <_scanf_float+0x1f0>
 8004ec6:	2b46      	cmp	r3, #70	; 0x46
 8004ec8:	d06a      	beq.n	8004fa0 <_scanf_float+0x1c0>
 8004eca:	2b41      	cmp	r3, #65	; 0x41
 8004ecc:	d1c1      	bne.n	8004e52 <_scanf_float+0x72>
 8004ece:	2a01      	cmp	r2, #1
 8004ed0:	d1bf      	bne.n	8004e52 <_scanf_float+0x72>
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	e046      	b.n	8004f64 <_scanf_float+0x184>
 8004ed6:	2b65      	cmp	r3, #101	; 0x65
 8004ed8:	d07a      	beq.n	8004fd0 <_scanf_float+0x1f0>
 8004eda:	d818      	bhi.n	8004f0e <_scanf_float+0x12e>
 8004edc:	2b54      	cmp	r3, #84	; 0x54
 8004ede:	d066      	beq.n	8004fae <_scanf_float+0x1ce>
 8004ee0:	d811      	bhi.n	8004f06 <_scanf_float+0x126>
 8004ee2:	2b4e      	cmp	r3, #78	; 0x4e
 8004ee4:	d1b5      	bne.n	8004e52 <_scanf_float+0x72>
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	d146      	bne.n	8004f78 <_scanf_float+0x198>
 8004eea:	f1b9 0f00 	cmp.w	r9, #0
 8004eee:	d145      	bne.n	8004f7c <_scanf_float+0x19c>
 8004ef0:	6821      	ldr	r1, [r4, #0]
 8004ef2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004ef6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004efa:	d13f      	bne.n	8004f7c <_scanf_float+0x19c>
 8004efc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004f00:	6021      	str	r1, [r4, #0]
 8004f02:	2201      	movs	r2, #1
 8004f04:	e02e      	b.n	8004f64 <_scanf_float+0x184>
 8004f06:	2b59      	cmp	r3, #89	; 0x59
 8004f08:	d01e      	beq.n	8004f48 <_scanf_float+0x168>
 8004f0a:	2b61      	cmp	r3, #97	; 0x61
 8004f0c:	e7de      	b.n	8004ecc <_scanf_float+0xec>
 8004f0e:	2b6e      	cmp	r3, #110	; 0x6e
 8004f10:	d0e9      	beq.n	8004ee6 <_scanf_float+0x106>
 8004f12:	d815      	bhi.n	8004f40 <_scanf_float+0x160>
 8004f14:	2b66      	cmp	r3, #102	; 0x66
 8004f16:	d043      	beq.n	8004fa0 <_scanf_float+0x1c0>
 8004f18:	2b69      	cmp	r3, #105	; 0x69
 8004f1a:	d19a      	bne.n	8004e52 <_scanf_float+0x72>
 8004f1c:	f1bb 0f00 	cmp.w	fp, #0
 8004f20:	d138      	bne.n	8004f94 <_scanf_float+0x1b4>
 8004f22:	f1b9 0f00 	cmp.w	r9, #0
 8004f26:	d197      	bne.n	8004e58 <_scanf_float+0x78>
 8004f28:	6821      	ldr	r1, [r4, #0]
 8004f2a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004f2e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004f32:	d195      	bne.n	8004e60 <_scanf_float+0x80>
 8004f34:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004f38:	6021      	str	r1, [r4, #0]
 8004f3a:	f04f 0b01 	mov.w	fp, #1
 8004f3e:	e011      	b.n	8004f64 <_scanf_float+0x184>
 8004f40:	2b74      	cmp	r3, #116	; 0x74
 8004f42:	d034      	beq.n	8004fae <_scanf_float+0x1ce>
 8004f44:	2b79      	cmp	r3, #121	; 0x79
 8004f46:	d184      	bne.n	8004e52 <_scanf_float+0x72>
 8004f48:	f1bb 0f07 	cmp.w	fp, #7
 8004f4c:	d181      	bne.n	8004e52 <_scanf_float+0x72>
 8004f4e:	f04f 0b08 	mov.w	fp, #8
 8004f52:	e007      	b.n	8004f64 <_scanf_float+0x184>
 8004f54:	eb12 0f0b 	cmn.w	r2, fp
 8004f58:	f47f af7b 	bne.w	8004e52 <_scanf_float+0x72>
 8004f5c:	6821      	ldr	r1, [r4, #0]
 8004f5e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004f62:	6021      	str	r1, [r4, #0]
 8004f64:	702b      	strb	r3, [r5, #0]
 8004f66:	3501      	adds	r5, #1
 8004f68:	e79a      	b.n	8004ea0 <_scanf_float+0xc0>
 8004f6a:	6821      	ldr	r1, [r4, #0]
 8004f6c:	0608      	lsls	r0, r1, #24
 8004f6e:	f57f af70 	bpl.w	8004e52 <_scanf_float+0x72>
 8004f72:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f76:	e7f4      	b.n	8004f62 <_scanf_float+0x182>
 8004f78:	2a02      	cmp	r2, #2
 8004f7a:	d047      	beq.n	800500c <_scanf_float+0x22c>
 8004f7c:	f1bb 0f01 	cmp.w	fp, #1
 8004f80:	d003      	beq.n	8004f8a <_scanf_float+0x1aa>
 8004f82:	f1bb 0f04 	cmp.w	fp, #4
 8004f86:	f47f af64 	bne.w	8004e52 <_scanf_float+0x72>
 8004f8a:	f10b 0b01 	add.w	fp, fp, #1
 8004f8e:	fa5f fb8b 	uxtb.w	fp, fp
 8004f92:	e7e7      	b.n	8004f64 <_scanf_float+0x184>
 8004f94:	f1bb 0f03 	cmp.w	fp, #3
 8004f98:	d0f7      	beq.n	8004f8a <_scanf_float+0x1aa>
 8004f9a:	f1bb 0f05 	cmp.w	fp, #5
 8004f9e:	e7f2      	b.n	8004f86 <_scanf_float+0x1a6>
 8004fa0:	f1bb 0f02 	cmp.w	fp, #2
 8004fa4:	f47f af55 	bne.w	8004e52 <_scanf_float+0x72>
 8004fa8:	f04f 0b03 	mov.w	fp, #3
 8004fac:	e7da      	b.n	8004f64 <_scanf_float+0x184>
 8004fae:	f1bb 0f06 	cmp.w	fp, #6
 8004fb2:	f47f af4e 	bne.w	8004e52 <_scanf_float+0x72>
 8004fb6:	f04f 0b07 	mov.w	fp, #7
 8004fba:	e7d3      	b.n	8004f64 <_scanf_float+0x184>
 8004fbc:	6821      	ldr	r1, [r4, #0]
 8004fbe:	0588      	lsls	r0, r1, #22
 8004fc0:	f57f af47 	bpl.w	8004e52 <_scanf_float+0x72>
 8004fc4:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004fc8:	6021      	str	r1, [r4, #0]
 8004fca:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fce:	e7c9      	b.n	8004f64 <_scanf_float+0x184>
 8004fd0:	6821      	ldr	r1, [r4, #0]
 8004fd2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004fd6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004fda:	d006      	beq.n	8004fea <_scanf_float+0x20a>
 8004fdc:	0548      	lsls	r0, r1, #21
 8004fde:	f57f af38 	bpl.w	8004e52 <_scanf_float+0x72>
 8004fe2:	f1b9 0f00 	cmp.w	r9, #0
 8004fe6:	f43f af3b 	beq.w	8004e60 <_scanf_float+0x80>
 8004fea:	0588      	lsls	r0, r1, #22
 8004fec:	bf58      	it	pl
 8004fee:	9802      	ldrpl	r0, [sp, #8]
 8004ff0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004ff4:	bf58      	it	pl
 8004ff6:	eba9 0000 	subpl.w	r0, r9, r0
 8004ffa:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004ffe:	bf58      	it	pl
 8005000:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005004:	6021      	str	r1, [r4, #0]
 8005006:	f04f 0900 	mov.w	r9, #0
 800500a:	e7ab      	b.n	8004f64 <_scanf_float+0x184>
 800500c:	2203      	movs	r2, #3
 800500e:	e7a9      	b.n	8004f64 <_scanf_float+0x184>
 8005010:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005014:	4631      	mov	r1, r6
 8005016:	4638      	mov	r0, r7
 8005018:	9205      	str	r2, [sp, #20]
 800501a:	4798      	blx	r3
 800501c:	9a05      	ldr	r2, [sp, #20]
 800501e:	2800      	cmp	r0, #0
 8005020:	f43f af04 	beq.w	8004e2c <_scanf_float+0x4c>
 8005024:	e715      	b.n	8004e52 <_scanf_float+0x72>
 8005026:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800502a:	4632      	mov	r2, r6
 800502c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005030:	4638      	mov	r0, r7
 8005032:	4798      	blx	r3
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	3b01      	subs	r3, #1
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	e715      	b.n	8004e68 <_scanf_float+0x88>
 800503c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005040:	2b06      	cmp	r3, #6
 8005042:	d80a      	bhi.n	800505a <_scanf_float+0x27a>
 8005044:	f1bb 0f02 	cmp.w	fp, #2
 8005048:	d967      	bls.n	800511a <_scanf_float+0x33a>
 800504a:	f1ab 0b03 	sub.w	fp, fp, #3
 800504e:	fa5f fb8b 	uxtb.w	fp, fp
 8005052:	eba5 0b0b 	sub.w	fp, r5, fp
 8005056:	455d      	cmp	r5, fp
 8005058:	d14a      	bne.n	80050f0 <_scanf_float+0x310>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	05da      	lsls	r2, r3, #23
 800505e:	d51f      	bpl.n	80050a0 <_scanf_float+0x2c0>
 8005060:	055b      	lsls	r3, r3, #21
 8005062:	d467      	bmi.n	8005134 <_scanf_float+0x354>
 8005064:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005068:	6923      	ldr	r3, [r4, #16]
 800506a:	2965      	cmp	r1, #101	; 0x65
 800506c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005070:	f105 3bff 	add.w	fp, r5, #4294967295
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	d00d      	beq.n	8005094 <_scanf_float+0x2b4>
 8005078:	2945      	cmp	r1, #69	; 0x45
 800507a:	d00b      	beq.n	8005094 <_scanf_float+0x2b4>
 800507c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005080:	4632      	mov	r2, r6
 8005082:	4638      	mov	r0, r7
 8005084:	4798      	blx	r3
 8005086:	6923      	ldr	r3, [r4, #16]
 8005088:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800508c:	3b01      	subs	r3, #1
 800508e:	f1a5 0b02 	sub.w	fp, r5, #2
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005098:	4632      	mov	r2, r6
 800509a:	4638      	mov	r0, r7
 800509c:	4798      	blx	r3
 800509e:	465d      	mov	r5, fp
 80050a0:	6826      	ldr	r6, [r4, #0]
 80050a2:	f016 0610 	ands.w	r6, r6, #16
 80050a6:	d176      	bne.n	8005196 <_scanf_float+0x3b6>
 80050a8:	702e      	strb	r6, [r5, #0]
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	d141      	bne.n	800513a <_scanf_float+0x35a>
 80050b6:	9b02      	ldr	r3, [sp, #8]
 80050b8:	eba9 0303 	sub.w	r3, r9, r3
 80050bc:	425a      	negs	r2, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d148      	bne.n	8005154 <_scanf_float+0x374>
 80050c2:	4641      	mov	r1, r8
 80050c4:	2200      	movs	r2, #0
 80050c6:	4638      	mov	r0, r7
 80050c8:	f000 feb2 	bl	8005e30 <_strtod_r>
 80050cc:	6825      	ldr	r5, [r4, #0]
 80050ce:	4680      	mov	r8, r0
 80050d0:	f015 0f02 	tst.w	r5, #2
 80050d4:	4689      	mov	r9, r1
 80050d6:	f8da 3000 	ldr.w	r3, [sl]
 80050da:	d046      	beq.n	800516a <_scanf_float+0x38a>
 80050dc:	1d1a      	adds	r2, r3, #4
 80050de:	f8ca 2000 	str.w	r2, [sl]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	e9c3 8900 	strd	r8, r9, [r3]
 80050e8:	68e3      	ldr	r3, [r4, #12]
 80050ea:	3301      	adds	r3, #1
 80050ec:	60e3      	str	r3, [r4, #12]
 80050ee:	e6bf      	b.n	8004e70 <_scanf_float+0x90>
 80050f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050f4:	4632      	mov	r2, r6
 80050f6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80050fa:	4638      	mov	r0, r7
 80050fc:	4798      	blx	r3
 80050fe:	6923      	ldr	r3, [r4, #16]
 8005100:	3b01      	subs	r3, #1
 8005102:	6123      	str	r3, [r4, #16]
 8005104:	e7a7      	b.n	8005056 <_scanf_float+0x276>
 8005106:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800510a:	4632      	mov	r2, r6
 800510c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005110:	4638      	mov	r0, r7
 8005112:	4798      	blx	r3
 8005114:	6923      	ldr	r3, [r4, #16]
 8005116:	3b01      	subs	r3, #1
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	4545      	cmp	r5, r8
 800511c:	d8f3      	bhi.n	8005106 <_scanf_float+0x326>
 800511e:	e6a6      	b.n	8004e6e <_scanf_float+0x8e>
 8005120:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005124:	4632      	mov	r2, r6
 8005126:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800512a:	4638      	mov	r0, r7
 800512c:	4798      	blx	r3
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	3b01      	subs	r3, #1
 8005132:	6123      	str	r3, [r4, #16]
 8005134:	4545      	cmp	r5, r8
 8005136:	d8f3      	bhi.n	8005120 <_scanf_float+0x340>
 8005138:	e699      	b.n	8004e6e <_scanf_float+0x8e>
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0c0      	beq.n	80050c2 <_scanf_float+0x2e2>
 8005140:	9904      	ldr	r1, [sp, #16]
 8005142:	230a      	movs	r3, #10
 8005144:	4632      	mov	r2, r6
 8005146:	3101      	adds	r1, #1
 8005148:	4638      	mov	r0, r7
 800514a:	f000 fefd 	bl	8005f48 <_strtol_r>
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	9d04      	ldr	r5, [sp, #16]
 8005152:	1ac2      	subs	r2, r0, r3
 8005154:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005158:	429d      	cmp	r5, r3
 800515a:	bf28      	it	cs
 800515c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005160:	490e      	ldr	r1, [pc, #56]	; (800519c <_scanf_float+0x3bc>)
 8005162:	4628      	mov	r0, r5
 8005164:	f000 f820 	bl	80051a8 <siprintf>
 8005168:	e7ab      	b.n	80050c2 <_scanf_float+0x2e2>
 800516a:	1d1f      	adds	r7, r3, #4
 800516c:	f015 0504 	ands.w	r5, r5, #4
 8005170:	f8ca 7000 	str.w	r7, [sl]
 8005174:	d1b5      	bne.n	80050e2 <_scanf_float+0x302>
 8005176:	681f      	ldr	r7, [r3, #0]
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	f7fb fc46 	bl	8000a0c <__aeabi_dcmpun>
 8005180:	b120      	cbz	r0, 800518c <_scanf_float+0x3ac>
 8005182:	4628      	mov	r0, r5
 8005184:	f000 f80c 	bl	80051a0 <nanf>
 8005188:	6038      	str	r0, [r7, #0]
 800518a:	e7ad      	b.n	80050e8 <_scanf_float+0x308>
 800518c:	4640      	mov	r0, r8
 800518e:	4649      	mov	r1, r9
 8005190:	f7fb fc9a 	bl	8000ac8 <__aeabi_d2f>
 8005194:	e7f8      	b.n	8005188 <_scanf_float+0x3a8>
 8005196:	2600      	movs	r6, #0
 8005198:	e66a      	b.n	8004e70 <_scanf_float+0x90>
 800519a:	bf00      	nop
 800519c:	080083cc 	.word	0x080083cc

080051a0 <nanf>:
 80051a0:	4800      	ldr	r0, [pc, #0]	; (80051a4 <nanf+0x4>)
 80051a2:	4770      	bx	lr
 80051a4:	7fc00000 	.word	0x7fc00000

080051a8 <siprintf>:
 80051a8:	b40e      	push	{r1, r2, r3}
 80051aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051ae:	b500      	push	{lr}
 80051b0:	b09c      	sub	sp, #112	; 0x70
 80051b2:	ab1d      	add	r3, sp, #116	; 0x74
 80051b4:	9002      	str	r0, [sp, #8]
 80051b6:	9006      	str	r0, [sp, #24]
 80051b8:	9107      	str	r1, [sp, #28]
 80051ba:	9104      	str	r1, [sp, #16]
 80051bc:	4808      	ldr	r0, [pc, #32]	; (80051e0 <siprintf+0x38>)
 80051be:	4909      	ldr	r1, [pc, #36]	; (80051e4 <siprintf+0x3c>)
 80051c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c4:	9105      	str	r1, [sp, #20]
 80051c6:	6800      	ldr	r0, [r0, #0]
 80051c8:	a902      	add	r1, sp, #8
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	f002 fd86 	bl	8007cdc <_svfiprintf_r>
 80051d0:	2200      	movs	r2, #0
 80051d2:	9b02      	ldr	r3, [sp, #8]
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	b01c      	add	sp, #112	; 0x70
 80051d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051dc:	b003      	add	sp, #12
 80051de:	4770      	bx	lr
 80051e0:	2000000c 	.word	0x2000000c
 80051e4:	ffff0208 	.word	0xffff0208

080051e8 <sulp>:
 80051e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ec:	460f      	mov	r7, r1
 80051ee:	4690      	mov	r8, r2
 80051f0:	f002 fb38 	bl	8007864 <__ulp>
 80051f4:	4604      	mov	r4, r0
 80051f6:	460d      	mov	r5, r1
 80051f8:	f1b8 0f00 	cmp.w	r8, #0
 80051fc:	d011      	beq.n	8005222 <sulp+0x3a>
 80051fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005202:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005206:	2b00      	cmp	r3, #0
 8005208:	dd0b      	ble.n	8005222 <sulp+0x3a>
 800520a:	2400      	movs	r4, #0
 800520c:	051b      	lsls	r3, r3, #20
 800520e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005212:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005216:	4622      	mov	r2, r4
 8005218:	462b      	mov	r3, r5
 800521a:	f7fb f95d 	bl	80004d8 <__aeabi_dmul>
 800521e:	4604      	mov	r4, r0
 8005220:	460d      	mov	r5, r1
 8005222:	4620      	mov	r0, r4
 8005224:	4629      	mov	r1, r5
 8005226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800522a:	0000      	movs	r0, r0
 800522c:	0000      	movs	r0, r0
	...

08005230 <_strtod_l>:
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	461f      	mov	r7, r3
 8005236:	2300      	movs	r3, #0
 8005238:	b0a1      	sub	sp, #132	; 0x84
 800523a:	4683      	mov	fp, r0
 800523c:	4638      	mov	r0, r7
 800523e:	460e      	mov	r6, r1
 8005240:	9217      	str	r2, [sp, #92]	; 0x5c
 8005242:	931c      	str	r3, [sp, #112]	; 0x70
 8005244:	f001 ffff 	bl	8007246 <__localeconv_l>
 8005248:	4680      	mov	r8, r0
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	f7fa ff80 	bl	8000150 <strlen>
 8005250:	f04f 0900 	mov.w	r9, #0
 8005254:	4604      	mov	r4, r0
 8005256:	f04f 0a00 	mov.w	sl, #0
 800525a:	961b      	str	r6, [sp, #108]	; 0x6c
 800525c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800525e:	781a      	ldrb	r2, [r3, #0]
 8005260:	2a0d      	cmp	r2, #13
 8005262:	d832      	bhi.n	80052ca <_strtod_l+0x9a>
 8005264:	2a09      	cmp	r2, #9
 8005266:	d236      	bcs.n	80052d6 <_strtod_l+0xa6>
 8005268:	2a00      	cmp	r2, #0
 800526a:	d03e      	beq.n	80052ea <_strtod_l+0xba>
 800526c:	2300      	movs	r3, #0
 800526e:	930d      	str	r3, [sp, #52]	; 0x34
 8005270:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005272:	782b      	ldrb	r3, [r5, #0]
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	f040 80ac 	bne.w	80053d2 <_strtod_l+0x1a2>
 800527a:	786b      	ldrb	r3, [r5, #1]
 800527c:	2b58      	cmp	r3, #88	; 0x58
 800527e:	d001      	beq.n	8005284 <_strtod_l+0x54>
 8005280:	2b78      	cmp	r3, #120	; 0x78
 8005282:	d167      	bne.n	8005354 <_strtod_l+0x124>
 8005284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005286:	9702      	str	r7, [sp, #8]
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	ab1c      	add	r3, sp, #112	; 0x70
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	4a89      	ldr	r2, [pc, #548]	; (80054b4 <_strtod_l+0x284>)
 8005290:	ab1d      	add	r3, sp, #116	; 0x74
 8005292:	a91b      	add	r1, sp, #108	; 0x6c
 8005294:	4658      	mov	r0, fp
 8005296:	f001 fcfb 	bl	8006c90 <__gethex>
 800529a:	f010 0407 	ands.w	r4, r0, #7
 800529e:	4606      	mov	r6, r0
 80052a0:	d005      	beq.n	80052ae <_strtod_l+0x7e>
 80052a2:	2c06      	cmp	r4, #6
 80052a4:	d12b      	bne.n	80052fe <_strtod_l+0xce>
 80052a6:	2300      	movs	r3, #0
 80052a8:	3501      	adds	r5, #1
 80052aa:	951b      	str	r5, [sp, #108]	; 0x6c
 80052ac:	930d      	str	r3, [sp, #52]	; 0x34
 80052ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f040 85a6 	bne.w	8005e02 <_strtod_l+0xbd2>
 80052b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052b8:	b1e3      	cbz	r3, 80052f4 <_strtod_l+0xc4>
 80052ba:	464a      	mov	r2, r9
 80052bc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	b021      	add	sp, #132	; 0x84
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	2a2b      	cmp	r2, #43	; 0x2b
 80052cc:	d015      	beq.n	80052fa <_strtod_l+0xca>
 80052ce:	2a2d      	cmp	r2, #45	; 0x2d
 80052d0:	d004      	beq.n	80052dc <_strtod_l+0xac>
 80052d2:	2a20      	cmp	r2, #32
 80052d4:	d1ca      	bne.n	800526c <_strtod_l+0x3c>
 80052d6:	3301      	adds	r3, #1
 80052d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80052da:	e7bf      	b.n	800525c <_strtod_l+0x2c>
 80052dc:	2201      	movs	r2, #1
 80052de:	920d      	str	r2, [sp, #52]	; 0x34
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1c2      	bne.n	8005270 <_strtod_l+0x40>
 80052ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f040 8585 	bne.w	8005dfe <_strtod_l+0xbce>
 80052f4:	464a      	mov	r2, r9
 80052f6:	4653      	mov	r3, sl
 80052f8:	e7e2      	b.n	80052c0 <_strtod_l+0x90>
 80052fa:	2200      	movs	r2, #0
 80052fc:	e7ef      	b.n	80052de <_strtod_l+0xae>
 80052fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005300:	b13a      	cbz	r2, 8005312 <_strtod_l+0xe2>
 8005302:	2135      	movs	r1, #53	; 0x35
 8005304:	a81e      	add	r0, sp, #120	; 0x78
 8005306:	f002 fba0 	bl	8007a4a <__copybits>
 800530a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800530c:	4658      	mov	r0, fp
 800530e:	f002 f812 	bl	8007336 <_Bfree>
 8005312:	3c01      	subs	r4, #1
 8005314:	2c04      	cmp	r4, #4
 8005316:	d806      	bhi.n	8005326 <_strtod_l+0xf6>
 8005318:	e8df f004 	tbb	[pc, r4]
 800531c:	1714030a 	.word	0x1714030a
 8005320:	0a          	.byte	0x0a
 8005321:	00          	.byte	0x00
 8005322:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005326:	0731      	lsls	r1, r6, #28
 8005328:	d5c1      	bpl.n	80052ae <_strtod_l+0x7e>
 800532a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800532e:	e7be      	b.n	80052ae <_strtod_l+0x7e>
 8005330:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005332:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005336:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800533a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800533e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005342:	e7f0      	b.n	8005326 <_strtod_l+0xf6>
 8005344:	f8df a170 	ldr.w	sl, [pc, #368]	; 80054b8 <_strtod_l+0x288>
 8005348:	e7ed      	b.n	8005326 <_strtod_l+0xf6>
 800534a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800534e:	f04f 39ff 	mov.w	r9, #4294967295
 8005352:	e7e8      	b.n	8005326 <_strtod_l+0xf6>
 8005354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	921b      	str	r2, [sp, #108]	; 0x6c
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b30      	cmp	r3, #48	; 0x30
 800535e:	d0f9      	beq.n	8005354 <_strtod_l+0x124>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0a4      	beq.n	80052ae <_strtod_l+0x7e>
 8005364:	2301      	movs	r3, #1
 8005366:	2500      	movs	r5, #0
 8005368:	220a      	movs	r2, #10
 800536a:	9307      	str	r3, [sp, #28]
 800536c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800536e:	9506      	str	r5, [sp, #24]
 8005370:	9308      	str	r3, [sp, #32]
 8005372:	9504      	str	r5, [sp, #16]
 8005374:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005376:	7807      	ldrb	r7, [r0, #0]
 8005378:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800537c:	b2d9      	uxtb	r1, r3
 800537e:	2909      	cmp	r1, #9
 8005380:	d929      	bls.n	80053d6 <_strtod_l+0x1a6>
 8005382:	4622      	mov	r2, r4
 8005384:	f8d8 1000 	ldr.w	r1, [r8]
 8005388:	f002 fdb0 	bl	8007eec <strncmp>
 800538c:	2800      	cmp	r0, #0
 800538e:	d031      	beq.n	80053f4 <_strtod_l+0x1c4>
 8005390:	2000      	movs	r0, #0
 8005392:	463b      	mov	r3, r7
 8005394:	4602      	mov	r2, r0
 8005396:	9c04      	ldr	r4, [sp, #16]
 8005398:	9005      	str	r0, [sp, #20]
 800539a:	2b65      	cmp	r3, #101	; 0x65
 800539c:	d001      	beq.n	80053a2 <_strtod_l+0x172>
 800539e:	2b45      	cmp	r3, #69	; 0x45
 80053a0:	d114      	bne.n	80053cc <_strtod_l+0x19c>
 80053a2:	b924      	cbnz	r4, 80053ae <_strtod_l+0x17e>
 80053a4:	b910      	cbnz	r0, 80053ac <_strtod_l+0x17c>
 80053a6:	9b07      	ldr	r3, [sp, #28]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d09e      	beq.n	80052ea <_strtod_l+0xba>
 80053ac:	2400      	movs	r4, #0
 80053ae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80053b0:	1c73      	adds	r3, r6, #1
 80053b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80053b4:	7873      	ldrb	r3, [r6, #1]
 80053b6:	2b2b      	cmp	r3, #43	; 0x2b
 80053b8:	d078      	beq.n	80054ac <_strtod_l+0x27c>
 80053ba:	2b2d      	cmp	r3, #45	; 0x2d
 80053bc:	d070      	beq.n	80054a0 <_strtod_l+0x270>
 80053be:	f04f 0c00 	mov.w	ip, #0
 80053c2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80053c6:	2f09      	cmp	r7, #9
 80053c8:	d97c      	bls.n	80054c4 <_strtod_l+0x294>
 80053ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80053cc:	f04f 0e00 	mov.w	lr, #0
 80053d0:	e09a      	b.n	8005508 <_strtod_l+0x2d8>
 80053d2:	2300      	movs	r3, #0
 80053d4:	e7c7      	b.n	8005366 <_strtod_l+0x136>
 80053d6:	9904      	ldr	r1, [sp, #16]
 80053d8:	3001      	adds	r0, #1
 80053da:	2908      	cmp	r1, #8
 80053dc:	bfd7      	itett	le
 80053de:	9906      	ldrle	r1, [sp, #24]
 80053e0:	fb02 3505 	mlagt	r5, r2, r5, r3
 80053e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80053e8:	9306      	strle	r3, [sp, #24]
 80053ea:	9b04      	ldr	r3, [sp, #16]
 80053ec:	901b      	str	r0, [sp, #108]	; 0x6c
 80053ee:	3301      	adds	r3, #1
 80053f0:	9304      	str	r3, [sp, #16]
 80053f2:	e7bf      	b.n	8005374 <_strtod_l+0x144>
 80053f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053f6:	191a      	adds	r2, r3, r4
 80053f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80053fa:	9a04      	ldr	r2, [sp, #16]
 80053fc:	5d1b      	ldrb	r3, [r3, r4]
 80053fe:	2a00      	cmp	r2, #0
 8005400:	d037      	beq.n	8005472 <_strtod_l+0x242>
 8005402:	4602      	mov	r2, r0
 8005404:	9c04      	ldr	r4, [sp, #16]
 8005406:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800540a:	2909      	cmp	r1, #9
 800540c:	d913      	bls.n	8005436 <_strtod_l+0x206>
 800540e:	2101      	movs	r1, #1
 8005410:	9105      	str	r1, [sp, #20]
 8005412:	e7c2      	b.n	800539a <_strtod_l+0x16a>
 8005414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005416:	3001      	adds	r0, #1
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	921b      	str	r2, [sp, #108]	; 0x6c
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b30      	cmp	r3, #48	; 0x30
 8005420:	d0f8      	beq.n	8005414 <_strtod_l+0x1e4>
 8005422:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005426:	2a08      	cmp	r2, #8
 8005428:	f200 84f0 	bhi.w	8005e0c <_strtod_l+0xbdc>
 800542c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800542e:	9208      	str	r2, [sp, #32]
 8005430:	4602      	mov	r2, r0
 8005432:	2000      	movs	r0, #0
 8005434:	4604      	mov	r4, r0
 8005436:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800543a:	f100 0101 	add.w	r1, r0, #1
 800543e:	d012      	beq.n	8005466 <_strtod_l+0x236>
 8005440:	440a      	add	r2, r1
 8005442:	270a      	movs	r7, #10
 8005444:	4621      	mov	r1, r4
 8005446:	eb00 0c04 	add.w	ip, r0, r4
 800544a:	458c      	cmp	ip, r1
 800544c:	d113      	bne.n	8005476 <_strtod_l+0x246>
 800544e:	1821      	adds	r1, r4, r0
 8005450:	2908      	cmp	r1, #8
 8005452:	f104 0401 	add.w	r4, r4, #1
 8005456:	4404      	add	r4, r0
 8005458:	dc19      	bgt.n	800548e <_strtod_l+0x25e>
 800545a:	210a      	movs	r1, #10
 800545c:	9b06      	ldr	r3, [sp, #24]
 800545e:	fb01 e303 	mla	r3, r1, r3, lr
 8005462:	9306      	str	r3, [sp, #24]
 8005464:	2100      	movs	r1, #0
 8005466:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005468:	1c58      	adds	r0, r3, #1
 800546a:	901b      	str	r0, [sp, #108]	; 0x6c
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	4608      	mov	r0, r1
 8005470:	e7c9      	b.n	8005406 <_strtod_l+0x1d6>
 8005472:	9804      	ldr	r0, [sp, #16]
 8005474:	e7d3      	b.n	800541e <_strtod_l+0x1ee>
 8005476:	2908      	cmp	r1, #8
 8005478:	f101 0101 	add.w	r1, r1, #1
 800547c:	dc03      	bgt.n	8005486 <_strtod_l+0x256>
 800547e:	9b06      	ldr	r3, [sp, #24]
 8005480:	437b      	muls	r3, r7
 8005482:	9306      	str	r3, [sp, #24]
 8005484:	e7e1      	b.n	800544a <_strtod_l+0x21a>
 8005486:	2910      	cmp	r1, #16
 8005488:	bfd8      	it	le
 800548a:	437d      	mulle	r5, r7
 800548c:	e7dd      	b.n	800544a <_strtod_l+0x21a>
 800548e:	2c10      	cmp	r4, #16
 8005490:	bfdc      	itt	le
 8005492:	210a      	movle	r1, #10
 8005494:	fb01 e505 	mlale	r5, r1, r5, lr
 8005498:	e7e4      	b.n	8005464 <_strtod_l+0x234>
 800549a:	2301      	movs	r3, #1
 800549c:	9305      	str	r3, [sp, #20]
 800549e:	e781      	b.n	80053a4 <_strtod_l+0x174>
 80054a0:	f04f 0c01 	mov.w	ip, #1
 80054a4:	1cb3      	adds	r3, r6, #2
 80054a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80054a8:	78b3      	ldrb	r3, [r6, #2]
 80054aa:	e78a      	b.n	80053c2 <_strtod_l+0x192>
 80054ac:	f04f 0c00 	mov.w	ip, #0
 80054b0:	e7f8      	b.n	80054a4 <_strtod_l+0x274>
 80054b2:	bf00      	nop
 80054b4:	080083d4 	.word	0x080083d4
 80054b8:	7ff00000 	.word	0x7ff00000
 80054bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054be:	1c5f      	adds	r7, r3, #1
 80054c0:	971b      	str	r7, [sp, #108]	; 0x6c
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d0f9      	beq.n	80054bc <_strtod_l+0x28c>
 80054c8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80054cc:	2f08      	cmp	r7, #8
 80054ce:	f63f af7d 	bhi.w	80053cc <_strtod_l+0x19c>
 80054d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80054d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054d8:	9309      	str	r3, [sp, #36]	; 0x24
 80054da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054dc:	1c5f      	adds	r7, r3, #1
 80054de:	971b      	str	r7, [sp, #108]	; 0x6c
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80054e6:	f1b8 0f09 	cmp.w	r8, #9
 80054ea:	d937      	bls.n	800555c <_strtod_l+0x32c>
 80054ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054ee:	1a7f      	subs	r7, r7, r1
 80054f0:	2f08      	cmp	r7, #8
 80054f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80054f6:	dc37      	bgt.n	8005568 <_strtod_l+0x338>
 80054f8:	45be      	cmp	lr, r7
 80054fa:	bfa8      	it	ge
 80054fc:	46be      	movge	lr, r7
 80054fe:	f1bc 0f00 	cmp.w	ip, #0
 8005502:	d001      	beq.n	8005508 <_strtod_l+0x2d8>
 8005504:	f1ce 0e00 	rsb	lr, lr, #0
 8005508:	2c00      	cmp	r4, #0
 800550a:	d151      	bne.n	80055b0 <_strtod_l+0x380>
 800550c:	2800      	cmp	r0, #0
 800550e:	f47f aece 	bne.w	80052ae <_strtod_l+0x7e>
 8005512:	9a07      	ldr	r2, [sp, #28]
 8005514:	2a00      	cmp	r2, #0
 8005516:	f47f aeca 	bne.w	80052ae <_strtod_l+0x7e>
 800551a:	9a05      	ldr	r2, [sp, #20]
 800551c:	2a00      	cmp	r2, #0
 800551e:	f47f aee4 	bne.w	80052ea <_strtod_l+0xba>
 8005522:	2b4e      	cmp	r3, #78	; 0x4e
 8005524:	d027      	beq.n	8005576 <_strtod_l+0x346>
 8005526:	dc21      	bgt.n	800556c <_strtod_l+0x33c>
 8005528:	2b49      	cmp	r3, #73	; 0x49
 800552a:	f47f aede 	bne.w	80052ea <_strtod_l+0xba>
 800552e:	49a4      	ldr	r1, [pc, #656]	; (80057c0 <_strtod_l+0x590>)
 8005530:	a81b      	add	r0, sp, #108	; 0x6c
 8005532:	f001 fde1 	bl	80070f8 <__match>
 8005536:	2800      	cmp	r0, #0
 8005538:	f43f aed7 	beq.w	80052ea <_strtod_l+0xba>
 800553c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800553e:	49a1      	ldr	r1, [pc, #644]	; (80057c4 <_strtod_l+0x594>)
 8005540:	3b01      	subs	r3, #1
 8005542:	a81b      	add	r0, sp, #108	; 0x6c
 8005544:	931b      	str	r3, [sp, #108]	; 0x6c
 8005546:	f001 fdd7 	bl	80070f8 <__match>
 800554a:	b910      	cbnz	r0, 8005552 <_strtod_l+0x322>
 800554c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800554e:	3301      	adds	r3, #1
 8005550:	931b      	str	r3, [sp, #108]	; 0x6c
 8005552:	f8df a284 	ldr.w	sl, [pc, #644]	; 80057d8 <_strtod_l+0x5a8>
 8005556:	f04f 0900 	mov.w	r9, #0
 800555a:	e6a8      	b.n	80052ae <_strtod_l+0x7e>
 800555c:	210a      	movs	r1, #10
 800555e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005562:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005566:	e7b8      	b.n	80054da <_strtod_l+0x2aa>
 8005568:	46be      	mov	lr, r7
 800556a:	e7c8      	b.n	80054fe <_strtod_l+0x2ce>
 800556c:	2b69      	cmp	r3, #105	; 0x69
 800556e:	d0de      	beq.n	800552e <_strtod_l+0x2fe>
 8005570:	2b6e      	cmp	r3, #110	; 0x6e
 8005572:	f47f aeba 	bne.w	80052ea <_strtod_l+0xba>
 8005576:	4994      	ldr	r1, [pc, #592]	; (80057c8 <_strtod_l+0x598>)
 8005578:	a81b      	add	r0, sp, #108	; 0x6c
 800557a:	f001 fdbd 	bl	80070f8 <__match>
 800557e:	2800      	cmp	r0, #0
 8005580:	f43f aeb3 	beq.w	80052ea <_strtod_l+0xba>
 8005584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b28      	cmp	r3, #40	; 0x28
 800558a:	d10e      	bne.n	80055aa <_strtod_l+0x37a>
 800558c:	aa1e      	add	r2, sp, #120	; 0x78
 800558e:	498f      	ldr	r1, [pc, #572]	; (80057cc <_strtod_l+0x59c>)
 8005590:	a81b      	add	r0, sp, #108	; 0x6c
 8005592:	f001 fdc5 	bl	8007120 <__hexnan>
 8005596:	2805      	cmp	r0, #5
 8005598:	d107      	bne.n	80055aa <_strtod_l+0x37a>
 800559a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800559c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80055a0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80055a4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80055a8:	e681      	b.n	80052ae <_strtod_l+0x7e>
 80055aa:	f8df a234 	ldr.w	sl, [pc, #564]	; 80057e0 <_strtod_l+0x5b0>
 80055ae:	e7d2      	b.n	8005556 <_strtod_l+0x326>
 80055b0:	ebae 0302 	sub.w	r3, lr, r2
 80055b4:	9307      	str	r3, [sp, #28]
 80055b6:	9b04      	ldr	r3, [sp, #16]
 80055b8:	9806      	ldr	r0, [sp, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf08      	it	eq
 80055be:	4623      	moveq	r3, r4
 80055c0:	2c10      	cmp	r4, #16
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	46a0      	mov	r8, r4
 80055c6:	bfa8      	it	ge
 80055c8:	f04f 0810 	movge.w	r8, #16
 80055cc:	f7fa ff0a 	bl	80003e4 <__aeabi_ui2d>
 80055d0:	2c09      	cmp	r4, #9
 80055d2:	4681      	mov	r9, r0
 80055d4:	468a      	mov	sl, r1
 80055d6:	dc13      	bgt.n	8005600 <_strtod_l+0x3d0>
 80055d8:	9b07      	ldr	r3, [sp, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f43f ae67 	beq.w	80052ae <_strtod_l+0x7e>
 80055e0:	9b07      	ldr	r3, [sp, #28]
 80055e2:	dd7e      	ble.n	80056e2 <_strtod_l+0x4b2>
 80055e4:	2b16      	cmp	r3, #22
 80055e6:	dc65      	bgt.n	80056b4 <_strtod_l+0x484>
 80055e8:	4a79      	ldr	r2, [pc, #484]	; (80057d0 <_strtod_l+0x5a0>)
 80055ea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80055ee:	464a      	mov	r2, r9
 80055f0:	e9de 0100 	ldrd	r0, r1, [lr]
 80055f4:	4653      	mov	r3, sl
 80055f6:	f7fa ff6f 	bl	80004d8 <__aeabi_dmul>
 80055fa:	4681      	mov	r9, r0
 80055fc:	468a      	mov	sl, r1
 80055fe:	e656      	b.n	80052ae <_strtod_l+0x7e>
 8005600:	4b73      	ldr	r3, [pc, #460]	; (80057d0 <_strtod_l+0x5a0>)
 8005602:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005606:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800560a:	f7fa ff65 	bl	80004d8 <__aeabi_dmul>
 800560e:	4606      	mov	r6, r0
 8005610:	4628      	mov	r0, r5
 8005612:	460f      	mov	r7, r1
 8005614:	f7fa fee6 	bl	80003e4 <__aeabi_ui2d>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4630      	mov	r0, r6
 800561e:	4639      	mov	r1, r7
 8005620:	f7fa fda4 	bl	800016c <__adddf3>
 8005624:	2c0f      	cmp	r4, #15
 8005626:	4681      	mov	r9, r0
 8005628:	468a      	mov	sl, r1
 800562a:	ddd5      	ble.n	80055d8 <_strtod_l+0x3a8>
 800562c:	9b07      	ldr	r3, [sp, #28]
 800562e:	eba4 0808 	sub.w	r8, r4, r8
 8005632:	4498      	add	r8, r3
 8005634:	f1b8 0f00 	cmp.w	r8, #0
 8005638:	f340 809a 	ble.w	8005770 <_strtod_l+0x540>
 800563c:	f018 030f 	ands.w	r3, r8, #15
 8005640:	d00a      	beq.n	8005658 <_strtod_l+0x428>
 8005642:	4963      	ldr	r1, [pc, #396]	; (80057d0 <_strtod_l+0x5a0>)
 8005644:	464a      	mov	r2, r9
 8005646:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800564a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800564e:	4653      	mov	r3, sl
 8005650:	f7fa ff42 	bl	80004d8 <__aeabi_dmul>
 8005654:	4681      	mov	r9, r0
 8005656:	468a      	mov	sl, r1
 8005658:	f038 080f 	bics.w	r8, r8, #15
 800565c:	d077      	beq.n	800574e <_strtod_l+0x51e>
 800565e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005662:	dd4b      	ble.n	80056fc <_strtod_l+0x4cc>
 8005664:	f04f 0800 	mov.w	r8, #0
 8005668:	f8cd 8010 	str.w	r8, [sp, #16]
 800566c:	f8cd 8020 	str.w	r8, [sp, #32]
 8005670:	f8cd 8018 	str.w	r8, [sp, #24]
 8005674:	2322      	movs	r3, #34	; 0x22
 8005676:	f04f 0900 	mov.w	r9, #0
 800567a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80057d8 <_strtod_l+0x5a8>
 800567e:	f8cb 3000 	str.w	r3, [fp]
 8005682:	9b08      	ldr	r3, [sp, #32]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f43f ae12 	beq.w	80052ae <_strtod_l+0x7e>
 800568a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800568c:	4658      	mov	r0, fp
 800568e:	f001 fe52 	bl	8007336 <_Bfree>
 8005692:	9906      	ldr	r1, [sp, #24]
 8005694:	4658      	mov	r0, fp
 8005696:	f001 fe4e 	bl	8007336 <_Bfree>
 800569a:	9904      	ldr	r1, [sp, #16]
 800569c:	4658      	mov	r0, fp
 800569e:	f001 fe4a 	bl	8007336 <_Bfree>
 80056a2:	9908      	ldr	r1, [sp, #32]
 80056a4:	4658      	mov	r0, fp
 80056a6:	f001 fe46 	bl	8007336 <_Bfree>
 80056aa:	4641      	mov	r1, r8
 80056ac:	4658      	mov	r0, fp
 80056ae:	f001 fe42 	bl	8007336 <_Bfree>
 80056b2:	e5fc      	b.n	80052ae <_strtod_l+0x7e>
 80056b4:	9a07      	ldr	r2, [sp, #28]
 80056b6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80056ba:	4293      	cmp	r3, r2
 80056bc:	dbb6      	blt.n	800562c <_strtod_l+0x3fc>
 80056be:	4d44      	ldr	r5, [pc, #272]	; (80057d0 <_strtod_l+0x5a0>)
 80056c0:	f1c4 040f 	rsb	r4, r4, #15
 80056c4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80056c8:	464a      	mov	r2, r9
 80056ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ce:	4653      	mov	r3, sl
 80056d0:	f7fa ff02 	bl	80004d8 <__aeabi_dmul>
 80056d4:	9b07      	ldr	r3, [sp, #28]
 80056d6:	1b1c      	subs	r4, r3, r4
 80056d8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80056dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056e0:	e789      	b.n	80055f6 <_strtod_l+0x3c6>
 80056e2:	f113 0f16 	cmn.w	r3, #22
 80056e6:	dba1      	blt.n	800562c <_strtod_l+0x3fc>
 80056e8:	4a39      	ldr	r2, [pc, #228]	; (80057d0 <_strtod_l+0x5a0>)
 80056ea:	4648      	mov	r0, r9
 80056ec:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80056f0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80056f4:	4651      	mov	r1, sl
 80056f6:	f7fb f819 	bl	800072c <__aeabi_ddiv>
 80056fa:	e77e      	b.n	80055fa <_strtod_l+0x3ca>
 80056fc:	2300      	movs	r3, #0
 80056fe:	4648      	mov	r0, r9
 8005700:	4651      	mov	r1, sl
 8005702:	461d      	mov	r5, r3
 8005704:	4e33      	ldr	r6, [pc, #204]	; (80057d4 <_strtod_l+0x5a4>)
 8005706:	ea4f 1828 	mov.w	r8, r8, asr #4
 800570a:	f1b8 0f01 	cmp.w	r8, #1
 800570e:	dc21      	bgt.n	8005754 <_strtod_l+0x524>
 8005710:	b10b      	cbz	r3, 8005716 <_strtod_l+0x4e6>
 8005712:	4681      	mov	r9, r0
 8005714:	468a      	mov	sl, r1
 8005716:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <_strtod_l+0x5a4>)
 8005718:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800571c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005720:	464a      	mov	r2, r9
 8005722:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005726:	4653      	mov	r3, sl
 8005728:	f7fa fed6 	bl	80004d8 <__aeabi_dmul>
 800572c:	4b2a      	ldr	r3, [pc, #168]	; (80057d8 <_strtod_l+0x5a8>)
 800572e:	460a      	mov	r2, r1
 8005730:	400b      	ands	r3, r1
 8005732:	492a      	ldr	r1, [pc, #168]	; (80057dc <_strtod_l+0x5ac>)
 8005734:	4681      	mov	r9, r0
 8005736:	428b      	cmp	r3, r1
 8005738:	d894      	bhi.n	8005664 <_strtod_l+0x434>
 800573a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800573e:	428b      	cmp	r3, r1
 8005740:	bf86      	itte	hi
 8005742:	f04f 39ff 	movhi.w	r9, #4294967295
 8005746:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80057e4 <_strtod_l+0x5b4>
 800574a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800574e:	2300      	movs	r3, #0
 8005750:	9305      	str	r3, [sp, #20]
 8005752:	e07b      	b.n	800584c <_strtod_l+0x61c>
 8005754:	f018 0f01 	tst.w	r8, #1
 8005758:	d006      	beq.n	8005768 <_strtod_l+0x538>
 800575a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f7fa feb9 	bl	80004d8 <__aeabi_dmul>
 8005766:	2301      	movs	r3, #1
 8005768:	3501      	adds	r5, #1
 800576a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800576e:	e7cc      	b.n	800570a <_strtod_l+0x4da>
 8005770:	d0ed      	beq.n	800574e <_strtod_l+0x51e>
 8005772:	f1c8 0800 	rsb	r8, r8, #0
 8005776:	f018 020f 	ands.w	r2, r8, #15
 800577a:	d00a      	beq.n	8005792 <_strtod_l+0x562>
 800577c:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <_strtod_l+0x5a0>)
 800577e:	4648      	mov	r0, r9
 8005780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005784:	4651      	mov	r1, sl
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa ffcf 	bl	800072c <__aeabi_ddiv>
 800578e:	4681      	mov	r9, r0
 8005790:	468a      	mov	sl, r1
 8005792:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005796:	d0da      	beq.n	800574e <_strtod_l+0x51e>
 8005798:	f1b8 0f1f 	cmp.w	r8, #31
 800579c:	dd24      	ble.n	80057e8 <_strtod_l+0x5b8>
 800579e:	f04f 0800 	mov.w	r8, #0
 80057a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80057a6:	f8cd 8020 	str.w	r8, [sp, #32]
 80057aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80057ae:	2322      	movs	r3, #34	; 0x22
 80057b0:	f04f 0900 	mov.w	r9, #0
 80057b4:	f04f 0a00 	mov.w	sl, #0
 80057b8:	f8cb 3000 	str.w	r3, [fp]
 80057bc:	e761      	b.n	8005682 <_strtod_l+0x452>
 80057be:	bf00      	nop
 80057c0:	0800839d 	.word	0x0800839d
 80057c4:	0800842b 	.word	0x0800842b
 80057c8:	080083a5 	.word	0x080083a5
 80057cc:	080083e8 	.word	0x080083e8
 80057d0:	08008468 	.word	0x08008468
 80057d4:	08008440 	.word	0x08008440
 80057d8:	7ff00000 	.word	0x7ff00000
 80057dc:	7ca00000 	.word	0x7ca00000
 80057e0:	fff80000 	.word	0xfff80000
 80057e4:	7fefffff 	.word	0x7fefffff
 80057e8:	f018 0310 	ands.w	r3, r8, #16
 80057ec:	bf18      	it	ne
 80057ee:	236a      	movne	r3, #106	; 0x6a
 80057f0:	4648      	mov	r0, r9
 80057f2:	9305      	str	r3, [sp, #20]
 80057f4:	4651      	mov	r1, sl
 80057f6:	2300      	movs	r3, #0
 80057f8:	4da1      	ldr	r5, [pc, #644]	; (8005a80 <_strtod_l+0x850>)
 80057fa:	f1b8 0f00 	cmp.w	r8, #0
 80057fe:	f300 8113 	bgt.w	8005a28 <_strtod_l+0x7f8>
 8005802:	b10b      	cbz	r3, 8005808 <_strtod_l+0x5d8>
 8005804:	4681      	mov	r9, r0
 8005806:	468a      	mov	sl, r1
 8005808:	9b05      	ldr	r3, [sp, #20]
 800580a:	b1bb      	cbz	r3, 800583c <_strtod_l+0x60c>
 800580c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005810:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005814:	2b00      	cmp	r3, #0
 8005816:	4651      	mov	r1, sl
 8005818:	dd10      	ble.n	800583c <_strtod_l+0x60c>
 800581a:	2b1f      	cmp	r3, #31
 800581c:	f340 8110 	ble.w	8005a40 <_strtod_l+0x810>
 8005820:	2b34      	cmp	r3, #52	; 0x34
 8005822:	bfd8      	it	le
 8005824:	f04f 32ff 	movle.w	r2, #4294967295
 8005828:	f04f 0900 	mov.w	r9, #0
 800582c:	bfcf      	iteee	gt
 800582e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005832:	3b20      	suble	r3, #32
 8005834:	fa02 f303 	lslle.w	r3, r2, r3
 8005838:	ea03 0a01 	andle.w	sl, r3, r1
 800583c:	2200      	movs	r2, #0
 800583e:	2300      	movs	r3, #0
 8005840:	4648      	mov	r0, r9
 8005842:	4651      	mov	r1, sl
 8005844:	f7fb f8b0 	bl	80009a8 <__aeabi_dcmpeq>
 8005848:	2800      	cmp	r0, #0
 800584a:	d1a8      	bne.n	800579e <_strtod_l+0x56e>
 800584c:	9b06      	ldr	r3, [sp, #24]
 800584e:	9a04      	ldr	r2, [sp, #16]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	9908      	ldr	r1, [sp, #32]
 8005854:	4623      	mov	r3, r4
 8005856:	4658      	mov	r0, fp
 8005858:	f001 fdbf 	bl	80073da <__s2b>
 800585c:	9008      	str	r0, [sp, #32]
 800585e:	2800      	cmp	r0, #0
 8005860:	f43f af00 	beq.w	8005664 <_strtod_l+0x434>
 8005864:	9a07      	ldr	r2, [sp, #28]
 8005866:	9b07      	ldr	r3, [sp, #28]
 8005868:	2a00      	cmp	r2, #0
 800586a:	f1c3 0300 	rsb	r3, r3, #0
 800586e:	bfa8      	it	ge
 8005870:	2300      	movge	r3, #0
 8005872:	f04f 0800 	mov.w	r8, #0
 8005876:	930e      	str	r3, [sp, #56]	; 0x38
 8005878:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800587c:	9316      	str	r3, [sp, #88]	; 0x58
 800587e:	f8cd 8010 	str.w	r8, [sp, #16]
 8005882:	9b08      	ldr	r3, [sp, #32]
 8005884:	4658      	mov	r0, fp
 8005886:	6859      	ldr	r1, [r3, #4]
 8005888:	f001 fd21 	bl	80072ce <_Balloc>
 800588c:	9006      	str	r0, [sp, #24]
 800588e:	2800      	cmp	r0, #0
 8005890:	f43f aef0 	beq.w	8005674 <_strtod_l+0x444>
 8005894:	9b08      	ldr	r3, [sp, #32]
 8005896:	300c      	adds	r0, #12
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	f103 010c 	add.w	r1, r3, #12
 800589e:	3202      	adds	r2, #2
 80058a0:	0092      	lsls	r2, r2, #2
 80058a2:	f001 fd09 	bl	80072b8 <memcpy>
 80058a6:	ab1e      	add	r3, sp, #120	; 0x78
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	ab1d      	add	r3, sp, #116	; 0x74
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	464a      	mov	r2, r9
 80058b0:	4653      	mov	r3, sl
 80058b2:	4658      	mov	r0, fp
 80058b4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80058b8:	f002 f84a 	bl	8007950 <__d2b>
 80058bc:	901c      	str	r0, [sp, #112]	; 0x70
 80058be:	2800      	cmp	r0, #0
 80058c0:	f43f aed8 	beq.w	8005674 <_strtod_l+0x444>
 80058c4:	2101      	movs	r1, #1
 80058c6:	4658      	mov	r0, fp
 80058c8:	f001 fe13 	bl	80074f2 <__i2b>
 80058cc:	9004      	str	r0, [sp, #16]
 80058ce:	4603      	mov	r3, r0
 80058d0:	2800      	cmp	r0, #0
 80058d2:	f43f aecf 	beq.w	8005674 <_strtod_l+0x444>
 80058d6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80058d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058da:	2d00      	cmp	r5, #0
 80058dc:	bfab      	itete	ge
 80058de:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80058e0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80058e2:	18ee      	addge	r6, r5, r3
 80058e4:	1b5c      	sublt	r4, r3, r5
 80058e6:	9b05      	ldr	r3, [sp, #20]
 80058e8:	bfa8      	it	ge
 80058ea:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80058ec:	eba5 0503 	sub.w	r5, r5, r3
 80058f0:	4415      	add	r5, r2
 80058f2:	4b64      	ldr	r3, [pc, #400]	; (8005a84 <_strtod_l+0x854>)
 80058f4:	f105 35ff 	add.w	r5, r5, #4294967295
 80058f8:	bfb8      	it	lt
 80058fa:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80058fc:	429d      	cmp	r5, r3
 80058fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005902:	f280 80af 	bge.w	8005a64 <_strtod_l+0x834>
 8005906:	1b5b      	subs	r3, r3, r5
 8005908:	2b1f      	cmp	r3, #31
 800590a:	eba2 0203 	sub.w	r2, r2, r3
 800590e:	f04f 0701 	mov.w	r7, #1
 8005912:	f300 809c 	bgt.w	8005a4e <_strtod_l+0x81e>
 8005916:	2500      	movs	r5, #0
 8005918:	fa07 f303 	lsl.w	r3, r7, r3
 800591c:	930f      	str	r3, [sp, #60]	; 0x3c
 800591e:	18b7      	adds	r7, r6, r2
 8005920:	9b05      	ldr	r3, [sp, #20]
 8005922:	42be      	cmp	r6, r7
 8005924:	4414      	add	r4, r2
 8005926:	441c      	add	r4, r3
 8005928:	4633      	mov	r3, r6
 800592a:	bfa8      	it	ge
 800592c:	463b      	movge	r3, r7
 800592e:	42a3      	cmp	r3, r4
 8005930:	bfa8      	it	ge
 8005932:	4623      	movge	r3, r4
 8005934:	2b00      	cmp	r3, #0
 8005936:	bfc2      	ittt	gt
 8005938:	1aff      	subgt	r7, r7, r3
 800593a:	1ae4      	subgt	r4, r4, r3
 800593c:	1af6      	subgt	r6, r6, r3
 800593e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005940:	b1bb      	cbz	r3, 8005972 <_strtod_l+0x742>
 8005942:	461a      	mov	r2, r3
 8005944:	9904      	ldr	r1, [sp, #16]
 8005946:	4658      	mov	r0, fp
 8005948:	f001 fe72 	bl	8007630 <__pow5mult>
 800594c:	9004      	str	r0, [sp, #16]
 800594e:	2800      	cmp	r0, #0
 8005950:	f43f ae90 	beq.w	8005674 <_strtod_l+0x444>
 8005954:	4601      	mov	r1, r0
 8005956:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005958:	4658      	mov	r0, fp
 800595a:	f001 fdd3 	bl	8007504 <__multiply>
 800595e:	9009      	str	r0, [sp, #36]	; 0x24
 8005960:	2800      	cmp	r0, #0
 8005962:	f43f ae87 	beq.w	8005674 <_strtod_l+0x444>
 8005966:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005968:	4658      	mov	r0, fp
 800596a:	f001 fce4 	bl	8007336 <_Bfree>
 800596e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005970:	931c      	str	r3, [sp, #112]	; 0x70
 8005972:	2f00      	cmp	r7, #0
 8005974:	dc7a      	bgt.n	8005a6c <_strtod_l+0x83c>
 8005976:	9b07      	ldr	r3, [sp, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	dd08      	ble.n	800598e <_strtod_l+0x75e>
 800597c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800597e:	9906      	ldr	r1, [sp, #24]
 8005980:	4658      	mov	r0, fp
 8005982:	f001 fe55 	bl	8007630 <__pow5mult>
 8005986:	9006      	str	r0, [sp, #24]
 8005988:	2800      	cmp	r0, #0
 800598a:	f43f ae73 	beq.w	8005674 <_strtod_l+0x444>
 800598e:	2c00      	cmp	r4, #0
 8005990:	dd08      	ble.n	80059a4 <_strtod_l+0x774>
 8005992:	4622      	mov	r2, r4
 8005994:	9906      	ldr	r1, [sp, #24]
 8005996:	4658      	mov	r0, fp
 8005998:	f001 fe98 	bl	80076cc <__lshift>
 800599c:	9006      	str	r0, [sp, #24]
 800599e:	2800      	cmp	r0, #0
 80059a0:	f43f ae68 	beq.w	8005674 <_strtod_l+0x444>
 80059a4:	2e00      	cmp	r6, #0
 80059a6:	dd08      	ble.n	80059ba <_strtod_l+0x78a>
 80059a8:	4632      	mov	r2, r6
 80059aa:	9904      	ldr	r1, [sp, #16]
 80059ac:	4658      	mov	r0, fp
 80059ae:	f001 fe8d 	bl	80076cc <__lshift>
 80059b2:	9004      	str	r0, [sp, #16]
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f43f ae5d 	beq.w	8005674 <_strtod_l+0x444>
 80059ba:	9a06      	ldr	r2, [sp, #24]
 80059bc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80059be:	4658      	mov	r0, fp
 80059c0:	f001 fef2 	bl	80077a8 <__mdiff>
 80059c4:	4680      	mov	r8, r0
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f43f ae54 	beq.w	8005674 <_strtod_l+0x444>
 80059cc:	2400      	movs	r4, #0
 80059ce:	68c3      	ldr	r3, [r0, #12]
 80059d0:	9904      	ldr	r1, [sp, #16]
 80059d2:	60c4      	str	r4, [r0, #12]
 80059d4:	930c      	str	r3, [sp, #48]	; 0x30
 80059d6:	f001 fecd 	bl	8007774 <__mcmp>
 80059da:	42a0      	cmp	r0, r4
 80059dc:	da54      	bge.n	8005a88 <_strtod_l+0x858>
 80059de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059e0:	b9f3      	cbnz	r3, 8005a20 <_strtod_l+0x7f0>
 80059e2:	f1b9 0f00 	cmp.w	r9, #0
 80059e6:	d11b      	bne.n	8005a20 <_strtod_l+0x7f0>
 80059e8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80059ec:	b9c3      	cbnz	r3, 8005a20 <_strtod_l+0x7f0>
 80059ee:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80059f2:	0d1b      	lsrs	r3, r3, #20
 80059f4:	051b      	lsls	r3, r3, #20
 80059f6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80059fa:	d911      	bls.n	8005a20 <_strtod_l+0x7f0>
 80059fc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005a00:	b91b      	cbnz	r3, 8005a0a <_strtod_l+0x7da>
 8005a02:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	dd0a      	ble.n	8005a20 <_strtod_l+0x7f0>
 8005a0a:	4641      	mov	r1, r8
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	4658      	mov	r0, fp
 8005a10:	f001 fe5c 	bl	80076cc <__lshift>
 8005a14:	9904      	ldr	r1, [sp, #16]
 8005a16:	4680      	mov	r8, r0
 8005a18:	f001 feac 	bl	8007774 <__mcmp>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	dc68      	bgt.n	8005af2 <_strtod_l+0x8c2>
 8005a20:	9b05      	ldr	r3, [sp, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d172      	bne.n	8005b0c <_strtod_l+0x8dc>
 8005a26:	e630      	b.n	800568a <_strtod_l+0x45a>
 8005a28:	f018 0f01 	tst.w	r8, #1
 8005a2c:	d004      	beq.n	8005a38 <_strtod_l+0x808>
 8005a2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a32:	f7fa fd51 	bl	80004d8 <__aeabi_dmul>
 8005a36:	2301      	movs	r3, #1
 8005a38:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a3c:	3508      	adds	r5, #8
 8005a3e:	e6dc      	b.n	80057fa <_strtod_l+0x5ca>
 8005a40:	f04f 32ff 	mov.w	r2, #4294967295
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	ea03 0909 	and.w	r9, r3, r9
 8005a4c:	e6f6      	b.n	800583c <_strtod_l+0x60c>
 8005a4e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005a52:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005a56:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005a5a:	35e2      	adds	r5, #226	; 0xe2
 8005a5c:	fa07 f505 	lsl.w	r5, r7, r5
 8005a60:	970f      	str	r7, [sp, #60]	; 0x3c
 8005a62:	e75c      	b.n	800591e <_strtod_l+0x6ee>
 8005a64:	2301      	movs	r3, #1
 8005a66:	2500      	movs	r5, #0
 8005a68:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a6a:	e758      	b.n	800591e <_strtod_l+0x6ee>
 8005a6c:	463a      	mov	r2, r7
 8005a6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a70:	4658      	mov	r0, fp
 8005a72:	f001 fe2b 	bl	80076cc <__lshift>
 8005a76:	901c      	str	r0, [sp, #112]	; 0x70
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f47f af7c 	bne.w	8005976 <_strtod_l+0x746>
 8005a7e:	e5f9      	b.n	8005674 <_strtod_l+0x444>
 8005a80:	08008400 	.word	0x08008400
 8005a84:	fffffc02 	.word	0xfffffc02
 8005a88:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005a8c:	f040 8089 	bne.w	8005ba2 <_strtod_l+0x972>
 8005a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a92:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005a96:	b342      	cbz	r2, 8005aea <_strtod_l+0x8ba>
 8005a98:	4aaf      	ldr	r2, [pc, #700]	; (8005d58 <_strtod_l+0xb28>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d156      	bne.n	8005b4c <_strtod_l+0x91c>
 8005a9e:	9b05      	ldr	r3, [sp, #20]
 8005aa0:	4648      	mov	r0, r9
 8005aa2:	b1eb      	cbz	r3, 8005ae0 <_strtod_l+0x8b0>
 8005aa4:	4653      	mov	r3, sl
 8005aa6:	4aad      	ldr	r2, [pc, #692]	; (8005d5c <_strtod_l+0xb2c>)
 8005aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8005aac:	401a      	ands	r2, r3
 8005aae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005ab2:	d818      	bhi.n	8005ae6 <_strtod_l+0x8b6>
 8005ab4:	0d12      	lsrs	r2, r2, #20
 8005ab6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005aba:	fa01 f303 	lsl.w	r3, r1, r3
 8005abe:	4298      	cmp	r0, r3
 8005ac0:	d144      	bne.n	8005b4c <_strtod_l+0x91c>
 8005ac2:	4ba7      	ldr	r3, [pc, #668]	; (8005d60 <_strtod_l+0xb30>)
 8005ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d102      	bne.n	8005ad0 <_strtod_l+0x8a0>
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f add2 	beq.w	8005674 <_strtod_l+0x444>
 8005ad0:	4ba2      	ldr	r3, [pc, #648]	; (8005d5c <_strtod_l+0xb2c>)
 8005ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad4:	f04f 0900 	mov.w	r9, #0
 8005ad8:	401a      	ands	r2, r3
 8005ada:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005ade:	e79f      	b.n	8005a20 <_strtod_l+0x7f0>
 8005ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae4:	e7eb      	b.n	8005abe <_strtod_l+0x88e>
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	e7e9      	b.n	8005abe <_strtod_l+0x88e>
 8005aea:	bb7b      	cbnz	r3, 8005b4c <_strtod_l+0x91c>
 8005aec:	f1b9 0f00 	cmp.w	r9, #0
 8005af0:	d12c      	bne.n	8005b4c <_strtod_l+0x91c>
 8005af2:	9905      	ldr	r1, [sp, #20]
 8005af4:	4653      	mov	r3, sl
 8005af6:	4a99      	ldr	r2, [pc, #612]	; (8005d5c <_strtod_l+0xb2c>)
 8005af8:	b1f1      	cbz	r1, 8005b38 <_strtod_l+0x908>
 8005afa:	ea02 010a 	and.w	r1, r2, sl
 8005afe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005b02:	dc19      	bgt.n	8005b38 <_strtod_l+0x908>
 8005b04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005b08:	f77f ae51 	ble.w	80057ae <_strtod_l+0x57e>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4a95      	ldr	r2, [pc, #596]	; (8005d64 <_strtod_l+0xb34>)
 8005b10:	4648      	mov	r0, r9
 8005b12:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005b16:	4651      	mov	r1, sl
 8005b18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005b1c:	f7fa fcdc 	bl	80004d8 <__aeabi_dmul>
 8005b20:	4681      	mov	r9, r0
 8005b22:	468a      	mov	sl, r1
 8005b24:	2900      	cmp	r1, #0
 8005b26:	f47f adb0 	bne.w	800568a <_strtod_l+0x45a>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	f47f adad 	bne.w	800568a <_strtod_l+0x45a>
 8005b30:	2322      	movs	r3, #34	; 0x22
 8005b32:	f8cb 3000 	str.w	r3, [fp]
 8005b36:	e5a8      	b.n	800568a <_strtod_l+0x45a>
 8005b38:	4013      	ands	r3, r2
 8005b3a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b3e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005b42:	f04f 39ff 	mov.w	r9, #4294967295
 8005b46:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005b4a:	e769      	b.n	8005a20 <_strtod_l+0x7f0>
 8005b4c:	b19d      	cbz	r5, 8005b76 <_strtod_l+0x946>
 8005b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b50:	421d      	tst	r5, r3
 8005b52:	f43f af65 	beq.w	8005a20 <_strtod_l+0x7f0>
 8005b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b58:	9a05      	ldr	r2, [sp, #20]
 8005b5a:	4648      	mov	r0, r9
 8005b5c:	4651      	mov	r1, sl
 8005b5e:	b173      	cbz	r3, 8005b7e <_strtod_l+0x94e>
 8005b60:	f7ff fb42 	bl	80051e8 <sulp>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b6c:	f7fa fafe 	bl	800016c <__adddf3>
 8005b70:	4681      	mov	r9, r0
 8005b72:	468a      	mov	sl, r1
 8005b74:	e754      	b.n	8005a20 <_strtod_l+0x7f0>
 8005b76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b78:	ea13 0f09 	tst.w	r3, r9
 8005b7c:	e7e9      	b.n	8005b52 <_strtod_l+0x922>
 8005b7e:	f7ff fb33 	bl	80051e8 <sulp>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b8a:	f7fa faed 	bl	8000168 <__aeabi_dsub>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2300      	movs	r3, #0
 8005b92:	4681      	mov	r9, r0
 8005b94:	468a      	mov	sl, r1
 8005b96:	f7fa ff07 	bl	80009a8 <__aeabi_dcmpeq>
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	f47f ae07 	bne.w	80057ae <_strtod_l+0x57e>
 8005ba0:	e73e      	b.n	8005a20 <_strtod_l+0x7f0>
 8005ba2:	9904      	ldr	r1, [sp, #16]
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	f001 ff22 	bl	80079ee <__ratio>
 8005baa:	2200      	movs	r2, #0
 8005bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	460f      	mov	r7, r1
 8005bb4:	f7fa ff0c 	bl	80009d0 <__aeabi_dcmple>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d075      	beq.n	8005ca8 <_strtod_l+0xa78>
 8005bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d047      	beq.n	8005c52 <_strtod_l+0xa22>
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	4f68      	ldr	r7, [pc, #416]	; (8005d68 <_strtod_l+0xb38>)
 8005bc6:	4d68      	ldr	r5, [pc, #416]	; (8005d68 <_strtod_l+0xb38>)
 8005bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bce:	0d1b      	lsrs	r3, r3, #20
 8005bd0:	051b      	lsls	r3, r3, #20
 8005bd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bd6:	4b65      	ldr	r3, [pc, #404]	; (8005d6c <_strtod_l+0xb3c>)
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	f040 80cf 	bne.w	8005d7c <_strtod_l+0xb4c>
 8005bde:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005be2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be8:	4648      	mov	r0, r9
 8005bea:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005bee:	4651      	mov	r1, sl
 8005bf0:	f001 fe38 	bl	8007864 <__ulp>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	f7fa fc6c 	bl	80004d8 <__aeabi_dmul>
 8005c00:	464a      	mov	r2, r9
 8005c02:	4653      	mov	r3, sl
 8005c04:	f7fa fab2 	bl	800016c <__adddf3>
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4954      	ldr	r1, [pc, #336]	; (8005d5c <_strtod_l+0xb2c>)
 8005c0c:	4a58      	ldr	r2, [pc, #352]	; (8005d70 <_strtod_l+0xb40>)
 8005c0e:	4019      	ands	r1, r3
 8005c10:	4291      	cmp	r1, r2
 8005c12:	4681      	mov	r9, r0
 8005c14:	d95e      	bls.n	8005cd4 <_strtod_l+0xaa4>
 8005c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d103      	bne.n	8005c28 <_strtod_l+0x9f8>
 8005c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c22:	3301      	adds	r3, #1
 8005c24:	f43f ad26 	beq.w	8005674 <_strtod_l+0x444>
 8005c28:	f04f 39ff 	mov.w	r9, #4294967295
 8005c2c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005d60 <_strtod_l+0xb30>
 8005c30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c32:	4658      	mov	r0, fp
 8005c34:	f001 fb7f 	bl	8007336 <_Bfree>
 8005c38:	9906      	ldr	r1, [sp, #24]
 8005c3a:	4658      	mov	r0, fp
 8005c3c:	f001 fb7b 	bl	8007336 <_Bfree>
 8005c40:	9904      	ldr	r1, [sp, #16]
 8005c42:	4658      	mov	r0, fp
 8005c44:	f001 fb77 	bl	8007336 <_Bfree>
 8005c48:	4641      	mov	r1, r8
 8005c4a:	4658      	mov	r0, fp
 8005c4c:	f001 fb73 	bl	8007336 <_Bfree>
 8005c50:	e617      	b.n	8005882 <_strtod_l+0x652>
 8005c52:	f1b9 0f00 	cmp.w	r9, #0
 8005c56:	d119      	bne.n	8005c8c <_strtod_l+0xa5c>
 8005c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c5e:	b9e3      	cbnz	r3, 8005c9a <_strtod_l+0xa6a>
 8005c60:	2200      	movs	r2, #0
 8005c62:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <_strtod_l+0xb38>)
 8005c64:	4630      	mov	r0, r6
 8005c66:	4639      	mov	r1, r7
 8005c68:	f7fa fea8 	bl	80009bc <__aeabi_dcmplt>
 8005c6c:	b9c8      	cbnz	r0, 8005ca2 <_strtod_l+0xa72>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <_strtod_l+0xb44>)
 8005c72:	4630      	mov	r0, r6
 8005c74:	4639      	mov	r1, r7
 8005c76:	f7fa fc2f 	bl	80004d8 <__aeabi_dmul>
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c82:	9418      	str	r4, [sp, #96]	; 0x60
 8005c84:	9319      	str	r3, [sp, #100]	; 0x64
 8005c86:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005c8a:	e79d      	b.n	8005bc8 <_strtod_l+0x998>
 8005c8c:	f1b9 0f01 	cmp.w	r9, #1
 8005c90:	d103      	bne.n	8005c9a <_strtod_l+0xa6a>
 8005c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f43f ad8a 	beq.w	80057ae <_strtod_l+0x57e>
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	4f36      	ldr	r7, [pc, #216]	; (8005d78 <_strtod_l+0xb48>)
 8005c9e:	2400      	movs	r4, #0
 8005ca0:	e791      	b.n	8005bc6 <_strtod_l+0x996>
 8005ca2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005ca4:	4d33      	ldr	r5, [pc, #204]	; (8005d74 <_strtod_l+0xb44>)
 8005ca6:	e7ea      	b.n	8005c7e <_strtod_l+0xa4e>
 8005ca8:	4b32      	ldr	r3, [pc, #200]	; (8005d74 <_strtod_l+0xb44>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	4630      	mov	r0, r6
 8005cae:	4639      	mov	r1, r7
 8005cb0:	f7fa fc12 	bl	80004d8 <__aeabi_dmul>
 8005cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	460d      	mov	r5, r1
 8005cba:	b933      	cbnz	r3, 8005cca <_strtod_l+0xa9a>
 8005cbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cc0:	9010      	str	r0, [sp, #64]	; 0x40
 8005cc2:	9311      	str	r3, [sp, #68]	; 0x44
 8005cc4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cc8:	e77e      	b.n	8005bc8 <_strtod_l+0x998>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005cd2:	e7f7      	b.n	8005cc4 <_strtod_l+0xa94>
 8005cd4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005cd8:	9b05      	ldr	r3, [sp, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1a8      	bne.n	8005c30 <_strtod_l+0xa00>
 8005cde:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005ce2:	0d1b      	lsrs	r3, r3, #20
 8005ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ce6:	051b      	lsls	r3, r3, #20
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	4656      	mov	r6, sl
 8005cec:	d1a0      	bne.n	8005c30 <_strtod_l+0xa00>
 8005cee:	4629      	mov	r1, r5
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f7fa fea1 	bl	8000a38 <__aeabi_d2iz>
 8005cf6:	f7fa fb85 	bl	8000404 <__aeabi_i2d>
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4620      	mov	r0, r4
 8005d02:	f7fa fa31 	bl	8000168 <__aeabi_dsub>
 8005d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d08:	4604      	mov	r4, r0
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	b933      	cbnz	r3, 8005d1c <_strtod_l+0xaec>
 8005d0e:	f1b9 0f00 	cmp.w	r9, #0
 8005d12:	d103      	bne.n	8005d1c <_strtod_l+0xaec>
 8005d14:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	d06a      	beq.n	8005df2 <_strtod_l+0xbc2>
 8005d1c:	a30a      	add	r3, pc, #40	; (adr r3, 8005d48 <_strtod_l+0xb18>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fa fe49 	bl	80009bc <__aeabi_dcmplt>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	f47f acad 	bne.w	800568a <_strtod_l+0x45a>
 8005d30:	a307      	add	r3, pc, #28	; (adr r3, 8005d50 <_strtod_l+0xb20>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	4620      	mov	r0, r4
 8005d38:	4629      	mov	r1, r5
 8005d3a:	f7fa fe5d 	bl	80009f8 <__aeabi_dcmpgt>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f43f af76 	beq.w	8005c30 <_strtod_l+0xa00>
 8005d44:	e4a1      	b.n	800568a <_strtod_l+0x45a>
 8005d46:	bf00      	nop
 8005d48:	94a03595 	.word	0x94a03595
 8005d4c:	3fdfffff 	.word	0x3fdfffff
 8005d50:	35afe535 	.word	0x35afe535
 8005d54:	3fe00000 	.word	0x3fe00000
 8005d58:	000fffff 	.word	0x000fffff
 8005d5c:	7ff00000 	.word	0x7ff00000
 8005d60:	7fefffff 	.word	0x7fefffff
 8005d64:	39500000 	.word	0x39500000
 8005d68:	3ff00000 	.word	0x3ff00000
 8005d6c:	7fe00000 	.word	0x7fe00000
 8005d70:	7c9fffff 	.word	0x7c9fffff
 8005d74:	3fe00000 	.word	0x3fe00000
 8005d78:	bff00000 	.word	0xbff00000
 8005d7c:	9b05      	ldr	r3, [sp, #20]
 8005d7e:	b313      	cbz	r3, 8005dc6 <_strtod_l+0xb96>
 8005d80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d86:	d81e      	bhi.n	8005dc6 <_strtod_l+0xb96>
 8005d88:	a325      	add	r3, pc, #148	; (adr r3, 8005e20 <_strtod_l+0xbf0>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	4620      	mov	r0, r4
 8005d90:	4629      	mov	r1, r5
 8005d92:	f7fa fe1d 	bl	80009d0 <__aeabi_dcmple>
 8005d96:	b190      	cbz	r0, 8005dbe <_strtod_l+0xb8e>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f7fa fe74 	bl	8000a88 <__aeabi_d2uiz>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	bf08      	it	eq
 8005da4:	2001      	moveq	r0, #1
 8005da6:	f7fa fb1d 	bl	80003e4 <__aeabi_ui2d>
 8005daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dac:	4604      	mov	r4, r0
 8005dae:	460d      	mov	r5, r1
 8005db0:	b9d3      	cbnz	r3, 8005de8 <_strtod_l+0xbb8>
 8005db2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005db6:	9012      	str	r0, [sp, #72]	; 0x48
 8005db8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dba:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005dbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dc0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005dc4:	1a9f      	subs	r7, r3, r2
 8005dc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dca:	f001 fd4b 	bl	8007864 <__ulp>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	f7fa fb7f 	bl	80004d8 <__aeabi_dmul>
 8005dda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005dde:	f7fa f9c5 	bl	800016c <__adddf3>
 8005de2:	4681      	mov	r9, r0
 8005de4:	468a      	mov	sl, r1
 8005de6:	e777      	b.n	8005cd8 <_strtod_l+0xaa8>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005df0:	e7e3      	b.n	8005dba <_strtod_l+0xb8a>
 8005df2:	a30d      	add	r3, pc, #52	; (adr r3, 8005e28 <_strtod_l+0xbf8>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa fde0 	bl	80009bc <__aeabi_dcmplt>
 8005dfc:	e79f      	b.n	8005d3e <_strtod_l+0xb0e>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	930d      	str	r3, [sp, #52]	; 0x34
 8005e02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	f7ff ba55 	b.w	80052b6 <_strtod_l+0x86>
 8005e0c:	2b65      	cmp	r3, #101	; 0x65
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	f43f ab42 	beq.w	800549a <_strtod_l+0x26a>
 8005e16:	2101      	movs	r1, #1
 8005e18:	4614      	mov	r4, r2
 8005e1a:	9105      	str	r1, [sp, #20]
 8005e1c:	f7ff babf 	b.w	800539e <_strtod_l+0x16e>
 8005e20:	ffc00000 	.word	0xffc00000
 8005e24:	41dfffff 	.word	0x41dfffff
 8005e28:	94a03595 	.word	0x94a03595
 8005e2c:	3fcfffff 	.word	0x3fcfffff

08005e30 <_strtod_r>:
 8005e30:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <_strtod_r+0x18>)
 8005e32:	b410      	push	{r4}
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4c05      	ldr	r4, [pc, #20]	; (8005e4c <_strtod_r+0x1c>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bf08      	it	eq
 8005e3e:	4623      	moveq	r3, r4
 8005e40:	bc10      	pop	{r4}
 8005e42:	f7ff b9f5 	b.w	8005230 <_strtod_l>
 8005e46:	bf00      	nop
 8005e48:	2000000c 	.word	0x2000000c
 8005e4c:	20000070 	.word	0x20000070

08005e50 <_strtol_l.isra.0>:
 8005e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	4680      	mov	r8, r0
 8005e56:	4689      	mov	r9, r1
 8005e58:	4692      	mov	sl, r2
 8005e5a:	461e      	mov	r6, r3
 8005e5c:	460f      	mov	r7, r1
 8005e5e:	463d      	mov	r5, r7
 8005e60:	9808      	ldr	r0, [sp, #32]
 8005e62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e66:	f001 f9eb 	bl	8007240 <__locale_ctype_ptr_l>
 8005e6a:	4420      	add	r0, r4
 8005e6c:	7843      	ldrb	r3, [r0, #1]
 8005e6e:	f013 0308 	ands.w	r3, r3, #8
 8005e72:	d132      	bne.n	8005eda <_strtol_l.isra.0+0x8a>
 8005e74:	2c2d      	cmp	r4, #45	; 0x2d
 8005e76:	d132      	bne.n	8005ede <_strtol_l.isra.0+0x8e>
 8005e78:	2201      	movs	r2, #1
 8005e7a:	787c      	ldrb	r4, [r7, #1]
 8005e7c:	1cbd      	adds	r5, r7, #2
 8005e7e:	2e00      	cmp	r6, #0
 8005e80:	d05d      	beq.n	8005f3e <_strtol_l.isra.0+0xee>
 8005e82:	2e10      	cmp	r6, #16
 8005e84:	d109      	bne.n	8005e9a <_strtol_l.isra.0+0x4a>
 8005e86:	2c30      	cmp	r4, #48	; 0x30
 8005e88:	d107      	bne.n	8005e9a <_strtol_l.isra.0+0x4a>
 8005e8a:	782b      	ldrb	r3, [r5, #0]
 8005e8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e90:	2b58      	cmp	r3, #88	; 0x58
 8005e92:	d14f      	bne.n	8005f34 <_strtol_l.isra.0+0xe4>
 8005e94:	2610      	movs	r6, #16
 8005e96:	786c      	ldrb	r4, [r5, #1]
 8005e98:	3502      	adds	r5, #2
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	bf14      	ite	ne
 8005e9e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005ea2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005ea6:	2700      	movs	r7, #0
 8005ea8:	fbb1 fcf6 	udiv	ip, r1, r6
 8005eac:	4638      	mov	r0, r7
 8005eae:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005eb2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005eb6:	2b09      	cmp	r3, #9
 8005eb8:	d817      	bhi.n	8005eea <_strtol_l.isra.0+0x9a>
 8005eba:	461c      	mov	r4, r3
 8005ebc:	42a6      	cmp	r6, r4
 8005ebe:	dd23      	ble.n	8005f08 <_strtol_l.isra.0+0xb8>
 8005ec0:	1c7b      	adds	r3, r7, #1
 8005ec2:	d007      	beq.n	8005ed4 <_strtol_l.isra.0+0x84>
 8005ec4:	4584      	cmp	ip, r0
 8005ec6:	d31c      	bcc.n	8005f02 <_strtol_l.isra.0+0xb2>
 8005ec8:	d101      	bne.n	8005ece <_strtol_l.isra.0+0x7e>
 8005eca:	45a6      	cmp	lr, r4
 8005ecc:	db19      	blt.n	8005f02 <_strtol_l.isra.0+0xb2>
 8005ece:	2701      	movs	r7, #1
 8005ed0:	fb00 4006 	mla	r0, r0, r6, r4
 8005ed4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ed8:	e7eb      	b.n	8005eb2 <_strtol_l.isra.0+0x62>
 8005eda:	462f      	mov	r7, r5
 8005edc:	e7bf      	b.n	8005e5e <_strtol_l.isra.0+0xe>
 8005ede:	2c2b      	cmp	r4, #43	; 0x2b
 8005ee0:	bf04      	itt	eq
 8005ee2:	1cbd      	addeq	r5, r7, #2
 8005ee4:	787c      	ldrbeq	r4, [r7, #1]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	e7c9      	b.n	8005e7e <_strtol_l.isra.0+0x2e>
 8005eea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005eee:	2b19      	cmp	r3, #25
 8005ef0:	d801      	bhi.n	8005ef6 <_strtol_l.isra.0+0xa6>
 8005ef2:	3c37      	subs	r4, #55	; 0x37
 8005ef4:	e7e2      	b.n	8005ebc <_strtol_l.isra.0+0x6c>
 8005ef6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005efa:	2b19      	cmp	r3, #25
 8005efc:	d804      	bhi.n	8005f08 <_strtol_l.isra.0+0xb8>
 8005efe:	3c57      	subs	r4, #87	; 0x57
 8005f00:	e7dc      	b.n	8005ebc <_strtol_l.isra.0+0x6c>
 8005f02:	f04f 37ff 	mov.w	r7, #4294967295
 8005f06:	e7e5      	b.n	8005ed4 <_strtol_l.isra.0+0x84>
 8005f08:	1c7b      	adds	r3, r7, #1
 8005f0a:	d108      	bne.n	8005f1e <_strtol_l.isra.0+0xce>
 8005f0c:	2322      	movs	r3, #34	; 0x22
 8005f0e:	4608      	mov	r0, r1
 8005f10:	f8c8 3000 	str.w	r3, [r8]
 8005f14:	f1ba 0f00 	cmp.w	sl, #0
 8005f18:	d107      	bne.n	8005f2a <_strtol_l.isra.0+0xda>
 8005f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1e:	b102      	cbz	r2, 8005f22 <_strtol_l.isra.0+0xd2>
 8005f20:	4240      	negs	r0, r0
 8005f22:	f1ba 0f00 	cmp.w	sl, #0
 8005f26:	d0f8      	beq.n	8005f1a <_strtol_l.isra.0+0xca>
 8005f28:	b10f      	cbz	r7, 8005f2e <_strtol_l.isra.0+0xde>
 8005f2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8005f2e:	f8ca 9000 	str.w	r9, [sl]
 8005f32:	e7f2      	b.n	8005f1a <_strtol_l.isra.0+0xca>
 8005f34:	2430      	movs	r4, #48	; 0x30
 8005f36:	2e00      	cmp	r6, #0
 8005f38:	d1af      	bne.n	8005e9a <_strtol_l.isra.0+0x4a>
 8005f3a:	2608      	movs	r6, #8
 8005f3c:	e7ad      	b.n	8005e9a <_strtol_l.isra.0+0x4a>
 8005f3e:	2c30      	cmp	r4, #48	; 0x30
 8005f40:	d0a3      	beq.n	8005e8a <_strtol_l.isra.0+0x3a>
 8005f42:	260a      	movs	r6, #10
 8005f44:	e7a9      	b.n	8005e9a <_strtol_l.isra.0+0x4a>
	...

08005f48 <_strtol_r>:
 8005f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f4a:	4c06      	ldr	r4, [pc, #24]	; (8005f64 <_strtol_r+0x1c>)
 8005f4c:	4d06      	ldr	r5, [pc, #24]	; (8005f68 <_strtol_r+0x20>)
 8005f4e:	6824      	ldr	r4, [r4, #0]
 8005f50:	6a24      	ldr	r4, [r4, #32]
 8005f52:	2c00      	cmp	r4, #0
 8005f54:	bf08      	it	eq
 8005f56:	462c      	moveq	r4, r5
 8005f58:	9400      	str	r4, [sp, #0]
 8005f5a:	f7ff ff79 	bl	8005e50 <_strtol_l.isra.0>
 8005f5e:	b003      	add	sp, #12
 8005f60:	bd30      	pop	{r4, r5, pc}
 8005f62:	bf00      	nop
 8005f64:	2000000c 	.word	0x2000000c
 8005f68:	20000070 	.word	0x20000070

08005f6c <quorem>:
 8005f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f70:	6903      	ldr	r3, [r0, #16]
 8005f72:	690c      	ldr	r4, [r1, #16]
 8005f74:	4680      	mov	r8, r0
 8005f76:	42a3      	cmp	r3, r4
 8005f78:	f2c0 8084 	blt.w	8006084 <quorem+0x118>
 8005f7c:	3c01      	subs	r4, #1
 8005f7e:	f101 0714 	add.w	r7, r1, #20
 8005f82:	f100 0614 	add.w	r6, r0, #20
 8005f86:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f8a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f8e:	3501      	adds	r5, #1
 8005f90:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f94:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005f98:	eb06 030c 	add.w	r3, r6, ip
 8005f9c:	eb07 090c 	add.w	r9, r7, ip
 8005fa0:	9301      	str	r3, [sp, #4]
 8005fa2:	b39d      	cbz	r5, 800600c <quorem+0xa0>
 8005fa4:	f04f 0a00 	mov.w	sl, #0
 8005fa8:	4638      	mov	r0, r7
 8005faa:	46b6      	mov	lr, r6
 8005fac:	46d3      	mov	fp, sl
 8005fae:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fb2:	b293      	uxth	r3, r2
 8005fb4:	fb05 a303 	mla	r3, r5, r3, sl
 8005fb8:	0c12      	lsrs	r2, r2, #16
 8005fba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fbe:	fb05 a202 	mla	r2, r5, r2, sl
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	ebab 0303 	sub.w	r3, fp, r3
 8005fc8:	f8de b000 	ldr.w	fp, [lr]
 8005fcc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005fd0:	fa1f fb8b 	uxth.w	fp, fp
 8005fd4:	445b      	add	r3, fp
 8005fd6:	fa1f fb82 	uxth.w	fp, r2
 8005fda:	f8de 2000 	ldr.w	r2, [lr]
 8005fde:	4581      	cmp	r9, r0
 8005fe0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005fe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fee:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005ff2:	f84e 3b04 	str.w	r3, [lr], #4
 8005ff6:	d2da      	bcs.n	8005fae <quorem+0x42>
 8005ff8:	f856 300c 	ldr.w	r3, [r6, ip]
 8005ffc:	b933      	cbnz	r3, 800600c <quorem+0xa0>
 8005ffe:	9b01      	ldr	r3, [sp, #4]
 8006000:	3b04      	subs	r3, #4
 8006002:	429e      	cmp	r6, r3
 8006004:	461a      	mov	r2, r3
 8006006:	d331      	bcc.n	800606c <quorem+0x100>
 8006008:	f8c8 4010 	str.w	r4, [r8, #16]
 800600c:	4640      	mov	r0, r8
 800600e:	f001 fbb1 	bl	8007774 <__mcmp>
 8006012:	2800      	cmp	r0, #0
 8006014:	db26      	blt.n	8006064 <quorem+0xf8>
 8006016:	4630      	mov	r0, r6
 8006018:	f04f 0c00 	mov.w	ip, #0
 800601c:	3501      	adds	r5, #1
 800601e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006022:	f8d0 e000 	ldr.w	lr, [r0]
 8006026:	b28b      	uxth	r3, r1
 8006028:	ebac 0303 	sub.w	r3, ip, r3
 800602c:	fa1f f28e 	uxth.w	r2, lr
 8006030:	4413      	add	r3, r2
 8006032:	0c0a      	lsrs	r2, r1, #16
 8006034:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006038:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006042:	45b9      	cmp	r9, r7
 8006044:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006048:	f840 3b04 	str.w	r3, [r0], #4
 800604c:	d2e7      	bcs.n	800601e <quorem+0xb2>
 800604e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006052:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006056:	b92a      	cbnz	r2, 8006064 <quorem+0xf8>
 8006058:	3b04      	subs	r3, #4
 800605a:	429e      	cmp	r6, r3
 800605c:	461a      	mov	r2, r3
 800605e:	d30b      	bcc.n	8006078 <quorem+0x10c>
 8006060:	f8c8 4010 	str.w	r4, [r8, #16]
 8006064:	4628      	mov	r0, r5
 8006066:	b003      	add	sp, #12
 8006068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	3b04      	subs	r3, #4
 8006070:	2a00      	cmp	r2, #0
 8006072:	d1c9      	bne.n	8006008 <quorem+0x9c>
 8006074:	3c01      	subs	r4, #1
 8006076:	e7c4      	b.n	8006002 <quorem+0x96>
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	3b04      	subs	r3, #4
 800607c:	2a00      	cmp	r2, #0
 800607e:	d1ef      	bne.n	8006060 <quorem+0xf4>
 8006080:	3c01      	subs	r4, #1
 8006082:	e7ea      	b.n	800605a <quorem+0xee>
 8006084:	2000      	movs	r0, #0
 8006086:	e7ee      	b.n	8006066 <quorem+0xfa>

08006088 <_dtoa_r>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	4616      	mov	r6, r2
 800608e:	461f      	mov	r7, r3
 8006090:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006092:	b095      	sub	sp, #84	; 0x54
 8006094:	4604      	mov	r4, r0
 8006096:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800609a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800609e:	b93d      	cbnz	r5, 80060b0 <_dtoa_r+0x28>
 80060a0:	2010      	movs	r0, #16
 80060a2:	f001 f8e1 	bl	8007268 <malloc>
 80060a6:	6260      	str	r0, [r4, #36]	; 0x24
 80060a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060ac:	6005      	str	r5, [r0, #0]
 80060ae:	60c5      	str	r5, [r0, #12]
 80060b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b2:	6819      	ldr	r1, [r3, #0]
 80060b4:	b151      	cbz	r1, 80060cc <_dtoa_r+0x44>
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	2301      	movs	r3, #1
 80060ba:	4093      	lsls	r3, r2
 80060bc:	604a      	str	r2, [r1, #4]
 80060be:	608b      	str	r3, [r1, #8]
 80060c0:	4620      	mov	r0, r4
 80060c2:	f001 f938 	bl	8007336 <_Bfree>
 80060c6:	2200      	movs	r2, #0
 80060c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	1e3b      	subs	r3, r7, #0
 80060ce:	bfaf      	iteee	ge
 80060d0:	2300      	movge	r3, #0
 80060d2:	2201      	movlt	r2, #1
 80060d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060d8:	9303      	strlt	r3, [sp, #12]
 80060da:	bfac      	ite	ge
 80060dc:	f8c8 3000 	strge.w	r3, [r8]
 80060e0:	f8c8 2000 	strlt.w	r2, [r8]
 80060e4:	4bae      	ldr	r3, [pc, #696]	; (80063a0 <_dtoa_r+0x318>)
 80060e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80060ea:	ea33 0308 	bics.w	r3, r3, r8
 80060ee:	d11b      	bne.n	8006128 <_dtoa_r+0xa0>
 80060f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80060f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	9b02      	ldr	r3, [sp, #8]
 80060fa:	b923      	cbnz	r3, 8006106 <_dtoa_r+0x7e>
 80060fc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006100:	2800      	cmp	r0, #0
 8006102:	f000 8545 	beq.w	8006b90 <_dtoa_r+0xb08>
 8006106:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006108:	b953      	cbnz	r3, 8006120 <_dtoa_r+0x98>
 800610a:	4ba6      	ldr	r3, [pc, #664]	; (80063a4 <_dtoa_r+0x31c>)
 800610c:	e021      	b.n	8006152 <_dtoa_r+0xca>
 800610e:	4ba6      	ldr	r3, [pc, #664]	; (80063a8 <_dtoa_r+0x320>)
 8006110:	9306      	str	r3, [sp, #24]
 8006112:	3308      	adds	r3, #8
 8006114:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	9806      	ldr	r0, [sp, #24]
 800611a:	b015      	add	sp, #84	; 0x54
 800611c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006120:	4ba0      	ldr	r3, [pc, #640]	; (80063a4 <_dtoa_r+0x31c>)
 8006122:	9306      	str	r3, [sp, #24]
 8006124:	3303      	adds	r3, #3
 8006126:	e7f5      	b.n	8006114 <_dtoa_r+0x8c>
 8006128:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800612c:	2200      	movs	r2, #0
 800612e:	2300      	movs	r3, #0
 8006130:	4630      	mov	r0, r6
 8006132:	4639      	mov	r1, r7
 8006134:	f7fa fc38 	bl	80009a8 <__aeabi_dcmpeq>
 8006138:	4682      	mov	sl, r0
 800613a:	b160      	cbz	r0, 8006156 <_dtoa_r+0xce>
 800613c:	2301      	movs	r3, #1
 800613e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8520 	beq.w	8006b8a <_dtoa_r+0xb02>
 800614a:	4b98      	ldr	r3, [pc, #608]	; (80063ac <_dtoa_r+0x324>)
 800614c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	3b01      	subs	r3, #1
 8006152:	9306      	str	r3, [sp, #24]
 8006154:	e7e0      	b.n	8006118 <_dtoa_r+0x90>
 8006156:	ab12      	add	r3, sp, #72	; 0x48
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	ab13      	add	r3, sp, #76	; 0x4c
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	4632      	mov	r2, r6
 8006160:	463b      	mov	r3, r7
 8006162:	4620      	mov	r0, r4
 8006164:	f001 fbf4 	bl	8007950 <__d2b>
 8006168:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800616c:	4683      	mov	fp, r0
 800616e:	2d00      	cmp	r5, #0
 8006170:	d07d      	beq.n	800626e <_dtoa_r+0x1e6>
 8006172:	46b0      	mov	r8, r6
 8006174:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006178:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800617c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006180:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006184:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006188:	2200      	movs	r2, #0
 800618a:	4b89      	ldr	r3, [pc, #548]	; (80063b0 <_dtoa_r+0x328>)
 800618c:	4640      	mov	r0, r8
 800618e:	4649      	mov	r1, r9
 8006190:	f7f9 ffea 	bl	8000168 <__aeabi_dsub>
 8006194:	a37c      	add	r3, pc, #496	; (adr r3, 8006388 <_dtoa_r+0x300>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f7fa f99d 	bl	80004d8 <__aeabi_dmul>
 800619e:	a37c      	add	r3, pc, #496	; (adr r3, 8006390 <_dtoa_r+0x308>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7f9 ffe2 	bl	800016c <__adddf3>
 80061a8:	4606      	mov	r6, r0
 80061aa:	4628      	mov	r0, r5
 80061ac:	460f      	mov	r7, r1
 80061ae:	f7fa f929 	bl	8000404 <__aeabi_i2d>
 80061b2:	a379      	add	r3, pc, #484	; (adr r3, 8006398 <_dtoa_r+0x310>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa f98e 	bl	80004d8 <__aeabi_dmul>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7f9 ffd2 	bl	800016c <__adddf3>
 80061c8:	4606      	mov	r6, r0
 80061ca:	460f      	mov	r7, r1
 80061cc:	f7fa fc34 	bl	8000a38 <__aeabi_d2iz>
 80061d0:	2200      	movs	r2, #0
 80061d2:	4682      	mov	sl, r0
 80061d4:	2300      	movs	r3, #0
 80061d6:	4630      	mov	r0, r6
 80061d8:	4639      	mov	r1, r7
 80061da:	f7fa fbef 	bl	80009bc <__aeabi_dcmplt>
 80061de:	b148      	cbz	r0, 80061f4 <_dtoa_r+0x16c>
 80061e0:	4650      	mov	r0, sl
 80061e2:	f7fa f90f 	bl	8000404 <__aeabi_i2d>
 80061e6:	4632      	mov	r2, r6
 80061e8:	463b      	mov	r3, r7
 80061ea:	f7fa fbdd 	bl	80009a8 <__aeabi_dcmpeq>
 80061ee:	b908      	cbnz	r0, 80061f4 <_dtoa_r+0x16c>
 80061f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061f4:	f1ba 0f16 	cmp.w	sl, #22
 80061f8:	d85a      	bhi.n	80062b0 <_dtoa_r+0x228>
 80061fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061fe:	496d      	ldr	r1, [pc, #436]	; (80063b4 <_dtoa_r+0x32c>)
 8006200:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006208:	f7fa fbf6 	bl	80009f8 <__aeabi_dcmpgt>
 800620c:	2800      	cmp	r0, #0
 800620e:	d051      	beq.n	80062b4 <_dtoa_r+0x22c>
 8006210:	2300      	movs	r3, #0
 8006212:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006216:	930d      	str	r3, [sp, #52]	; 0x34
 8006218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800621a:	1b5d      	subs	r5, r3, r5
 800621c:	1e6b      	subs	r3, r5, #1
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	bf43      	ittte	mi
 8006222:	2300      	movmi	r3, #0
 8006224:	f1c5 0901 	rsbmi	r9, r5, #1
 8006228:	9307      	strmi	r3, [sp, #28]
 800622a:	f04f 0900 	movpl.w	r9, #0
 800622e:	f1ba 0f00 	cmp.w	sl, #0
 8006232:	db41      	blt.n	80062b8 <_dtoa_r+0x230>
 8006234:	9b07      	ldr	r3, [sp, #28]
 8006236:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800623a:	4453      	add	r3, sl
 800623c:	9307      	str	r3, [sp, #28]
 800623e:	2300      	movs	r3, #0
 8006240:	9308      	str	r3, [sp, #32]
 8006242:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006244:	2b09      	cmp	r3, #9
 8006246:	f200 808f 	bhi.w	8006368 <_dtoa_r+0x2e0>
 800624a:	2b05      	cmp	r3, #5
 800624c:	bfc4      	itt	gt
 800624e:	3b04      	subgt	r3, #4
 8006250:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006252:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006254:	bfc8      	it	gt
 8006256:	2500      	movgt	r5, #0
 8006258:	f1a3 0302 	sub.w	r3, r3, #2
 800625c:	bfd8      	it	le
 800625e:	2501      	movle	r5, #1
 8006260:	2b03      	cmp	r3, #3
 8006262:	f200 808d 	bhi.w	8006380 <_dtoa_r+0x2f8>
 8006266:	e8df f003 	tbb	[pc, r3]
 800626a:	7d7b      	.short	0x7d7b
 800626c:	6f2f      	.short	0x6f2f
 800626e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006272:	441d      	add	r5, r3
 8006274:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006278:	2820      	cmp	r0, #32
 800627a:	dd13      	ble.n	80062a4 <_dtoa_r+0x21c>
 800627c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006280:	9b02      	ldr	r3, [sp, #8]
 8006282:	fa08 f800 	lsl.w	r8, r8, r0
 8006286:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800628a:	fa23 f000 	lsr.w	r0, r3, r0
 800628e:	ea48 0000 	orr.w	r0, r8, r0
 8006292:	f7fa f8a7 	bl	80003e4 <__aeabi_ui2d>
 8006296:	2301      	movs	r3, #1
 8006298:	4680      	mov	r8, r0
 800629a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800629e:	3d01      	subs	r5, #1
 80062a0:	9310      	str	r3, [sp, #64]	; 0x40
 80062a2:	e771      	b.n	8006188 <_dtoa_r+0x100>
 80062a4:	9b02      	ldr	r3, [sp, #8]
 80062a6:	f1c0 0020 	rsb	r0, r0, #32
 80062aa:	fa03 f000 	lsl.w	r0, r3, r0
 80062ae:	e7f0      	b.n	8006292 <_dtoa_r+0x20a>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e7b0      	b.n	8006216 <_dtoa_r+0x18e>
 80062b4:	900d      	str	r0, [sp, #52]	; 0x34
 80062b6:	e7af      	b.n	8006218 <_dtoa_r+0x190>
 80062b8:	f1ca 0300 	rsb	r3, sl, #0
 80062bc:	9308      	str	r3, [sp, #32]
 80062be:	2300      	movs	r3, #0
 80062c0:	eba9 090a 	sub.w	r9, r9, sl
 80062c4:	930c      	str	r3, [sp, #48]	; 0x30
 80062c6:	e7bc      	b.n	8006242 <_dtoa_r+0x1ba>
 80062c8:	2301      	movs	r3, #1
 80062ca:	9309      	str	r3, [sp, #36]	; 0x24
 80062cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dd74      	ble.n	80063bc <_dtoa_r+0x334>
 80062d2:	4698      	mov	r8, r3
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	2200      	movs	r2, #0
 80062d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062da:	6072      	str	r2, [r6, #4]
 80062dc:	2204      	movs	r2, #4
 80062de:	f102 0014 	add.w	r0, r2, #20
 80062e2:	4298      	cmp	r0, r3
 80062e4:	6871      	ldr	r1, [r6, #4]
 80062e6:	d96e      	bls.n	80063c6 <_dtoa_r+0x33e>
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 fff0 	bl	80072ce <_Balloc>
 80062ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062f0:	6030      	str	r0, [r6, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f1b8 0f0e 	cmp.w	r8, #14
 80062f8:	9306      	str	r3, [sp, #24]
 80062fa:	f200 80ed 	bhi.w	80064d8 <_dtoa_r+0x450>
 80062fe:	2d00      	cmp	r5, #0
 8006300:	f000 80ea 	beq.w	80064d8 <_dtoa_r+0x450>
 8006304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006308:	f1ba 0f00 	cmp.w	sl, #0
 800630c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006310:	dd77      	ble.n	8006402 <_dtoa_r+0x37a>
 8006312:	4a28      	ldr	r2, [pc, #160]	; (80063b4 <_dtoa_r+0x32c>)
 8006314:	f00a 030f 	and.w	r3, sl, #15
 8006318:	ea4f 162a 	mov.w	r6, sl, asr #4
 800631c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006320:	06f0      	lsls	r0, r6, #27
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800632a:	d568      	bpl.n	80063fe <_dtoa_r+0x376>
 800632c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006330:	4b21      	ldr	r3, [pc, #132]	; (80063b8 <_dtoa_r+0x330>)
 8006332:	2503      	movs	r5, #3
 8006334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006338:	f7fa f9f8 	bl	800072c <__aeabi_ddiv>
 800633c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006340:	f006 060f 	and.w	r6, r6, #15
 8006344:	4f1c      	ldr	r7, [pc, #112]	; (80063b8 <_dtoa_r+0x330>)
 8006346:	e04f      	b.n	80063e8 <_dtoa_r+0x360>
 8006348:	2301      	movs	r3, #1
 800634a:	9309      	str	r3, [sp, #36]	; 0x24
 800634c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800634e:	4453      	add	r3, sl
 8006350:	f103 0801 	add.w	r8, r3, #1
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	4643      	mov	r3, r8
 8006358:	2b01      	cmp	r3, #1
 800635a:	bfb8      	it	lt
 800635c:	2301      	movlt	r3, #1
 800635e:	e7ba      	b.n	80062d6 <_dtoa_r+0x24e>
 8006360:	2300      	movs	r3, #0
 8006362:	e7b2      	b.n	80062ca <_dtoa_r+0x242>
 8006364:	2300      	movs	r3, #0
 8006366:	e7f0      	b.n	800634a <_dtoa_r+0x2c2>
 8006368:	2501      	movs	r5, #1
 800636a:	2300      	movs	r3, #0
 800636c:	9509      	str	r5, [sp, #36]	; 0x24
 800636e:	931e      	str	r3, [sp, #120]	; 0x78
 8006370:	f04f 33ff 	mov.w	r3, #4294967295
 8006374:	2200      	movs	r2, #0
 8006376:	9304      	str	r3, [sp, #16]
 8006378:	4698      	mov	r8, r3
 800637a:	2312      	movs	r3, #18
 800637c:	921f      	str	r2, [sp, #124]	; 0x7c
 800637e:	e7aa      	b.n	80062d6 <_dtoa_r+0x24e>
 8006380:	2301      	movs	r3, #1
 8006382:	9309      	str	r3, [sp, #36]	; 0x24
 8006384:	e7f4      	b.n	8006370 <_dtoa_r+0x2e8>
 8006386:	bf00      	nop
 8006388:	636f4361 	.word	0x636f4361
 800638c:	3fd287a7 	.word	0x3fd287a7
 8006390:	8b60c8b3 	.word	0x8b60c8b3
 8006394:	3fc68a28 	.word	0x3fc68a28
 8006398:	509f79fb 	.word	0x509f79fb
 800639c:	3fd34413 	.word	0x3fd34413
 80063a0:	7ff00000 	.word	0x7ff00000
 80063a4:	08008431 	.word	0x08008431
 80063a8:	08008428 	.word	0x08008428
 80063ac:	080083a9 	.word	0x080083a9
 80063b0:	3ff80000 	.word	0x3ff80000
 80063b4:	08008468 	.word	0x08008468
 80063b8:	08008440 	.word	0x08008440
 80063bc:	2301      	movs	r3, #1
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	4698      	mov	r8, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	e7da      	b.n	800637c <_dtoa_r+0x2f4>
 80063c6:	3101      	adds	r1, #1
 80063c8:	6071      	str	r1, [r6, #4]
 80063ca:	0052      	lsls	r2, r2, #1
 80063cc:	e787      	b.n	80062de <_dtoa_r+0x256>
 80063ce:	07f1      	lsls	r1, r6, #31
 80063d0:	d508      	bpl.n	80063e4 <_dtoa_r+0x35c>
 80063d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063da:	f7fa f87d 	bl	80004d8 <__aeabi_dmul>
 80063de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063e2:	3501      	adds	r5, #1
 80063e4:	1076      	asrs	r6, r6, #1
 80063e6:	3708      	adds	r7, #8
 80063e8:	2e00      	cmp	r6, #0
 80063ea:	d1f0      	bne.n	80063ce <_dtoa_r+0x346>
 80063ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f4:	f7fa f99a 	bl	800072c <__aeabi_ddiv>
 80063f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063fc:	e01b      	b.n	8006436 <_dtoa_r+0x3ae>
 80063fe:	2502      	movs	r5, #2
 8006400:	e7a0      	b.n	8006344 <_dtoa_r+0x2bc>
 8006402:	f000 80a4 	beq.w	800654e <_dtoa_r+0x4c6>
 8006406:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800640a:	f1ca 0600 	rsb	r6, sl, #0
 800640e:	4ba0      	ldr	r3, [pc, #640]	; (8006690 <_dtoa_r+0x608>)
 8006410:	f006 020f 	and.w	r2, r6, #15
 8006414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7fa f85c 	bl	80004d8 <__aeabi_dmul>
 8006420:	2502      	movs	r5, #2
 8006422:	2300      	movs	r3, #0
 8006424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006428:	4f9a      	ldr	r7, [pc, #616]	; (8006694 <_dtoa_r+0x60c>)
 800642a:	1136      	asrs	r6, r6, #4
 800642c:	2e00      	cmp	r6, #0
 800642e:	f040 8083 	bne.w	8006538 <_dtoa_r+0x4b0>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e0      	bne.n	80063f8 <_dtoa_r+0x370>
 8006436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 808a 	beq.w	8006552 <_dtoa_r+0x4ca>
 800643e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006442:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006446:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800644a:	2200      	movs	r2, #0
 800644c:	4b92      	ldr	r3, [pc, #584]	; (8006698 <_dtoa_r+0x610>)
 800644e:	f7fa fab5 	bl	80009bc <__aeabi_dcmplt>
 8006452:	2800      	cmp	r0, #0
 8006454:	d07d      	beq.n	8006552 <_dtoa_r+0x4ca>
 8006456:	f1b8 0f00 	cmp.w	r8, #0
 800645a:	d07a      	beq.n	8006552 <_dtoa_r+0x4ca>
 800645c:	9b04      	ldr	r3, [sp, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	dd36      	ble.n	80064d0 <_dtoa_r+0x448>
 8006462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006466:	2200      	movs	r2, #0
 8006468:	4b8c      	ldr	r3, [pc, #560]	; (800669c <_dtoa_r+0x614>)
 800646a:	f7fa f835 	bl	80004d8 <__aeabi_dmul>
 800646e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006472:	9e04      	ldr	r6, [sp, #16]
 8006474:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006478:	3501      	adds	r5, #1
 800647a:	4628      	mov	r0, r5
 800647c:	f7f9 ffc2 	bl	8000404 <__aeabi_i2d>
 8006480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006484:	f7fa f828 	bl	80004d8 <__aeabi_dmul>
 8006488:	2200      	movs	r2, #0
 800648a:	4b85      	ldr	r3, [pc, #532]	; (80066a0 <_dtoa_r+0x618>)
 800648c:	f7f9 fe6e 	bl	800016c <__adddf3>
 8006490:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006494:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006498:	950b      	str	r5, [sp, #44]	; 0x2c
 800649a:	2e00      	cmp	r6, #0
 800649c:	d15c      	bne.n	8006558 <_dtoa_r+0x4d0>
 800649e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a2:	2200      	movs	r2, #0
 80064a4:	4b7f      	ldr	r3, [pc, #508]	; (80066a4 <_dtoa_r+0x61c>)
 80064a6:	f7f9 fe5f 	bl	8000168 <__aeabi_dsub>
 80064aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ac:	462b      	mov	r3, r5
 80064ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b2:	f7fa faa1 	bl	80009f8 <__aeabi_dcmpgt>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f040 8281 	bne.w	80069be <_dtoa_r+0x936>
 80064bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80064c6:	f7fa fa79 	bl	80009bc <__aeabi_dcmplt>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	f040 8275 	bne.w	80069ba <_dtoa_r+0x932>
 80064d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80064d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f2c0 814b 	blt.w	8006776 <_dtoa_r+0x6ee>
 80064e0:	f1ba 0f0e 	cmp.w	sl, #14
 80064e4:	f300 8147 	bgt.w	8006776 <_dtoa_r+0x6ee>
 80064e8:	4b69      	ldr	r3, [pc, #420]	; (8006690 <_dtoa_r+0x608>)
 80064ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f280 80d7 	bge.w	80066ac <_dtoa_r+0x624>
 80064fe:	f1b8 0f00 	cmp.w	r8, #0
 8006502:	f300 80d3 	bgt.w	80066ac <_dtoa_r+0x624>
 8006506:	f040 8257 	bne.w	80069b8 <_dtoa_r+0x930>
 800650a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800650e:	2200      	movs	r2, #0
 8006510:	4b64      	ldr	r3, [pc, #400]	; (80066a4 <_dtoa_r+0x61c>)
 8006512:	f7f9 ffe1 	bl	80004d8 <__aeabi_dmul>
 8006516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800651a:	f7fa fa63 	bl	80009e4 <__aeabi_dcmpge>
 800651e:	4646      	mov	r6, r8
 8006520:	4647      	mov	r7, r8
 8006522:	2800      	cmp	r0, #0
 8006524:	f040 822d 	bne.w	8006982 <_dtoa_r+0x8fa>
 8006528:	9b06      	ldr	r3, [sp, #24]
 800652a:	9a06      	ldr	r2, [sp, #24]
 800652c:	1c5d      	adds	r5, r3, #1
 800652e:	2331      	movs	r3, #49	; 0x31
 8006530:	f10a 0a01 	add.w	sl, sl, #1
 8006534:	7013      	strb	r3, [r2, #0]
 8006536:	e228      	b.n	800698a <_dtoa_r+0x902>
 8006538:	07f2      	lsls	r2, r6, #31
 800653a:	d505      	bpl.n	8006548 <_dtoa_r+0x4c0>
 800653c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006540:	f7f9 ffca 	bl	80004d8 <__aeabi_dmul>
 8006544:	2301      	movs	r3, #1
 8006546:	3501      	adds	r5, #1
 8006548:	1076      	asrs	r6, r6, #1
 800654a:	3708      	adds	r7, #8
 800654c:	e76e      	b.n	800642c <_dtoa_r+0x3a4>
 800654e:	2502      	movs	r5, #2
 8006550:	e771      	b.n	8006436 <_dtoa_r+0x3ae>
 8006552:	4657      	mov	r7, sl
 8006554:	4646      	mov	r6, r8
 8006556:	e790      	b.n	800647a <_dtoa_r+0x3f2>
 8006558:	4b4d      	ldr	r3, [pc, #308]	; (8006690 <_dtoa_r+0x608>)
 800655a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800655e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d048      	beq.n	80065fa <_dtoa_r+0x572>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	2000      	movs	r0, #0
 800656e:	494e      	ldr	r1, [pc, #312]	; (80066a8 <_dtoa_r+0x620>)
 8006570:	f7fa f8dc 	bl	800072c <__aeabi_ddiv>
 8006574:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006578:	f7f9 fdf6 	bl	8000168 <__aeabi_dsub>
 800657c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006580:	9d06      	ldr	r5, [sp, #24]
 8006582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006586:	f7fa fa57 	bl	8000a38 <__aeabi_d2iz>
 800658a:	9011      	str	r0, [sp, #68]	; 0x44
 800658c:	f7f9 ff3a 	bl	8000404 <__aeabi_i2d>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006598:	f7f9 fde6 	bl	8000168 <__aeabi_dsub>
 800659c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800659e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a2:	3330      	adds	r3, #48	; 0x30
 80065a4:	f805 3b01 	strb.w	r3, [r5], #1
 80065a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065ac:	f7fa fa06 	bl	80009bc <__aeabi_dcmplt>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d163      	bne.n	800667c <_dtoa_r+0x5f4>
 80065b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065b8:	2000      	movs	r0, #0
 80065ba:	4937      	ldr	r1, [pc, #220]	; (8006698 <_dtoa_r+0x610>)
 80065bc:	f7f9 fdd4 	bl	8000168 <__aeabi_dsub>
 80065c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065c4:	f7fa f9fa 	bl	80009bc <__aeabi_dcmplt>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	f040 80b5 	bne.w	8006738 <_dtoa_r+0x6b0>
 80065ce:	9b06      	ldr	r3, [sp, #24]
 80065d0:	1aeb      	subs	r3, r5, r3
 80065d2:	429e      	cmp	r6, r3
 80065d4:	f77f af7c 	ble.w	80064d0 <_dtoa_r+0x448>
 80065d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065dc:	2200      	movs	r2, #0
 80065de:	4b2f      	ldr	r3, [pc, #188]	; (800669c <_dtoa_r+0x614>)
 80065e0:	f7f9 ff7a 	bl	80004d8 <__aeabi_dmul>
 80065e4:	2200      	movs	r2, #0
 80065e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ee:	4b2b      	ldr	r3, [pc, #172]	; (800669c <_dtoa_r+0x614>)
 80065f0:	f7f9 ff72 	bl	80004d8 <__aeabi_dmul>
 80065f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f8:	e7c3      	b.n	8006582 <_dtoa_r+0x4fa>
 80065fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065fe:	f7f9 ff6b 	bl	80004d8 <__aeabi_dmul>
 8006602:	9b06      	ldr	r3, [sp, #24]
 8006604:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006608:	199d      	adds	r5, r3, r6
 800660a:	461e      	mov	r6, r3
 800660c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006610:	f7fa fa12 	bl	8000a38 <__aeabi_d2iz>
 8006614:	9011      	str	r0, [sp, #68]	; 0x44
 8006616:	f7f9 fef5 	bl	8000404 <__aeabi_i2d>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006622:	f7f9 fda1 	bl	8000168 <__aeabi_dsub>
 8006626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662c:	3330      	adds	r3, #48	; 0x30
 800662e:	f806 3b01 	strb.w	r3, [r6], #1
 8006632:	42ae      	cmp	r6, r5
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	d124      	bne.n	8006684 <_dtoa_r+0x5fc>
 800663a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800663e:	4b1a      	ldr	r3, [pc, #104]	; (80066a8 <_dtoa_r+0x620>)
 8006640:	f7f9 fd94 	bl	800016c <__adddf3>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800664c:	f7fa f9d4 	bl	80009f8 <__aeabi_dcmpgt>
 8006650:	2800      	cmp	r0, #0
 8006652:	d171      	bne.n	8006738 <_dtoa_r+0x6b0>
 8006654:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006658:	2000      	movs	r0, #0
 800665a:	4913      	ldr	r1, [pc, #76]	; (80066a8 <_dtoa_r+0x620>)
 800665c:	f7f9 fd84 	bl	8000168 <__aeabi_dsub>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006668:	f7fa f9a8 	bl	80009bc <__aeabi_dcmplt>
 800666c:	2800      	cmp	r0, #0
 800666e:	f43f af2f 	beq.w	80064d0 <_dtoa_r+0x448>
 8006672:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006676:	1e6a      	subs	r2, r5, #1
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d001      	beq.n	8006680 <_dtoa_r+0x5f8>
 800667c:	46ba      	mov	sl, r7
 800667e:	e04a      	b.n	8006716 <_dtoa_r+0x68e>
 8006680:	4615      	mov	r5, r2
 8006682:	e7f6      	b.n	8006672 <_dtoa_r+0x5ea>
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <_dtoa_r+0x614>)
 8006686:	f7f9 ff27 	bl	80004d8 <__aeabi_dmul>
 800668a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800668e:	e7bd      	b.n	800660c <_dtoa_r+0x584>
 8006690:	08008468 	.word	0x08008468
 8006694:	08008440 	.word	0x08008440
 8006698:	3ff00000 	.word	0x3ff00000
 800669c:	40240000 	.word	0x40240000
 80066a0:	401c0000 	.word	0x401c0000
 80066a4:	40140000 	.word	0x40140000
 80066a8:	3fe00000 	.word	0x3fe00000
 80066ac:	9d06      	ldr	r5, [sp, #24]
 80066ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b6:	4630      	mov	r0, r6
 80066b8:	4639      	mov	r1, r7
 80066ba:	f7fa f837 	bl	800072c <__aeabi_ddiv>
 80066be:	f7fa f9bb 	bl	8000a38 <__aeabi_d2iz>
 80066c2:	4681      	mov	r9, r0
 80066c4:	f7f9 fe9e 	bl	8000404 <__aeabi_i2d>
 80066c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066cc:	f7f9 ff04 	bl	80004d8 <__aeabi_dmul>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4630      	mov	r0, r6
 80066d6:	4639      	mov	r1, r7
 80066d8:	f7f9 fd46 	bl	8000168 <__aeabi_dsub>
 80066dc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80066e0:	f805 6b01 	strb.w	r6, [r5], #1
 80066e4:	9e06      	ldr	r6, [sp, #24]
 80066e6:	4602      	mov	r2, r0
 80066e8:	1bae      	subs	r6, r5, r6
 80066ea:	45b0      	cmp	r8, r6
 80066ec:	460b      	mov	r3, r1
 80066ee:	d135      	bne.n	800675c <_dtoa_r+0x6d4>
 80066f0:	f7f9 fd3c 	bl	800016c <__adddf3>
 80066f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f8:	4606      	mov	r6, r0
 80066fa:	460f      	mov	r7, r1
 80066fc:	f7fa f97c 	bl	80009f8 <__aeabi_dcmpgt>
 8006700:	b9c8      	cbnz	r0, 8006736 <_dtoa_r+0x6ae>
 8006702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006706:	4630      	mov	r0, r6
 8006708:	4639      	mov	r1, r7
 800670a:	f7fa f94d 	bl	80009a8 <__aeabi_dcmpeq>
 800670e:	b110      	cbz	r0, 8006716 <_dtoa_r+0x68e>
 8006710:	f019 0f01 	tst.w	r9, #1
 8006714:	d10f      	bne.n	8006736 <_dtoa_r+0x6ae>
 8006716:	4659      	mov	r1, fp
 8006718:	4620      	mov	r0, r4
 800671a:	f000 fe0c 	bl	8007336 <_Bfree>
 800671e:	2300      	movs	r3, #0
 8006720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006722:	702b      	strb	r3, [r5, #0]
 8006724:	f10a 0301 	add.w	r3, sl, #1
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800672c:	2b00      	cmp	r3, #0
 800672e:	f43f acf3 	beq.w	8006118 <_dtoa_r+0x90>
 8006732:	601d      	str	r5, [r3, #0]
 8006734:	e4f0      	b.n	8006118 <_dtoa_r+0x90>
 8006736:	4657      	mov	r7, sl
 8006738:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800673c:	1e6b      	subs	r3, r5, #1
 800673e:	2a39      	cmp	r2, #57	; 0x39
 8006740:	d106      	bne.n	8006750 <_dtoa_r+0x6c8>
 8006742:	9a06      	ldr	r2, [sp, #24]
 8006744:	429a      	cmp	r2, r3
 8006746:	d107      	bne.n	8006758 <_dtoa_r+0x6d0>
 8006748:	2330      	movs	r3, #48	; 0x30
 800674a:	7013      	strb	r3, [r2, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	3701      	adds	r7, #1
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	3201      	adds	r2, #1
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	e791      	b.n	800667c <_dtoa_r+0x5f4>
 8006758:	461d      	mov	r5, r3
 800675a:	e7ed      	b.n	8006738 <_dtoa_r+0x6b0>
 800675c:	2200      	movs	r2, #0
 800675e:	4b99      	ldr	r3, [pc, #612]	; (80069c4 <_dtoa_r+0x93c>)
 8006760:	f7f9 feba 	bl	80004d8 <__aeabi_dmul>
 8006764:	2200      	movs	r2, #0
 8006766:	2300      	movs	r3, #0
 8006768:	4606      	mov	r6, r0
 800676a:	460f      	mov	r7, r1
 800676c:	f7fa f91c 	bl	80009a8 <__aeabi_dcmpeq>
 8006770:	2800      	cmp	r0, #0
 8006772:	d09e      	beq.n	80066b2 <_dtoa_r+0x62a>
 8006774:	e7cf      	b.n	8006716 <_dtoa_r+0x68e>
 8006776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006778:	2a00      	cmp	r2, #0
 800677a:	f000 8088 	beq.w	800688e <_dtoa_r+0x806>
 800677e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006780:	2a01      	cmp	r2, #1
 8006782:	dc6d      	bgt.n	8006860 <_dtoa_r+0x7d8>
 8006784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006786:	2a00      	cmp	r2, #0
 8006788:	d066      	beq.n	8006858 <_dtoa_r+0x7d0>
 800678a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800678e:	464d      	mov	r5, r9
 8006790:	9e08      	ldr	r6, [sp, #32]
 8006792:	9a07      	ldr	r2, [sp, #28]
 8006794:	2101      	movs	r1, #1
 8006796:	441a      	add	r2, r3
 8006798:	4620      	mov	r0, r4
 800679a:	4499      	add	r9, r3
 800679c:	9207      	str	r2, [sp, #28]
 800679e:	f000 fea8 	bl	80074f2 <__i2b>
 80067a2:	4607      	mov	r7, r0
 80067a4:	2d00      	cmp	r5, #0
 80067a6:	dd0b      	ble.n	80067c0 <_dtoa_r+0x738>
 80067a8:	9b07      	ldr	r3, [sp, #28]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dd08      	ble.n	80067c0 <_dtoa_r+0x738>
 80067ae:	42ab      	cmp	r3, r5
 80067b0:	bfa8      	it	ge
 80067b2:	462b      	movge	r3, r5
 80067b4:	9a07      	ldr	r2, [sp, #28]
 80067b6:	eba9 0903 	sub.w	r9, r9, r3
 80067ba:	1aed      	subs	r5, r5, r3
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	9307      	str	r3, [sp, #28]
 80067c0:	9b08      	ldr	r3, [sp, #32]
 80067c2:	b1eb      	cbz	r3, 8006800 <_dtoa_r+0x778>
 80067c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d065      	beq.n	8006896 <_dtoa_r+0x80e>
 80067ca:	b18e      	cbz	r6, 80067f0 <_dtoa_r+0x768>
 80067cc:	4639      	mov	r1, r7
 80067ce:	4632      	mov	r2, r6
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 ff2d 	bl	8007630 <__pow5mult>
 80067d6:	465a      	mov	r2, fp
 80067d8:	4601      	mov	r1, r0
 80067da:	4607      	mov	r7, r0
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 fe91 	bl	8007504 <__multiply>
 80067e2:	4659      	mov	r1, fp
 80067e4:	900a      	str	r0, [sp, #40]	; 0x28
 80067e6:	4620      	mov	r0, r4
 80067e8:	f000 fda5 	bl	8007336 <_Bfree>
 80067ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ee:	469b      	mov	fp, r3
 80067f0:	9b08      	ldr	r3, [sp, #32]
 80067f2:	1b9a      	subs	r2, r3, r6
 80067f4:	d004      	beq.n	8006800 <_dtoa_r+0x778>
 80067f6:	4659      	mov	r1, fp
 80067f8:	4620      	mov	r0, r4
 80067fa:	f000 ff19 	bl	8007630 <__pow5mult>
 80067fe:	4683      	mov	fp, r0
 8006800:	2101      	movs	r1, #1
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fe75 	bl	80074f2 <__i2b>
 8006808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800680a:	4606      	mov	r6, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 81c6 	beq.w	8006b9e <_dtoa_r+0xb16>
 8006812:	461a      	mov	r2, r3
 8006814:	4601      	mov	r1, r0
 8006816:	4620      	mov	r0, r4
 8006818:	f000 ff0a 	bl	8007630 <__pow5mult>
 800681c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800681e:	4606      	mov	r6, r0
 8006820:	2b01      	cmp	r3, #1
 8006822:	dc3e      	bgt.n	80068a2 <_dtoa_r+0x81a>
 8006824:	9b02      	ldr	r3, [sp, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d137      	bne.n	800689a <_dtoa_r+0x812>
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006830:	2b00      	cmp	r3, #0
 8006832:	d134      	bne.n	800689e <_dtoa_r+0x816>
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800683a:	0d1b      	lsrs	r3, r3, #20
 800683c:	051b      	lsls	r3, r3, #20
 800683e:	b12b      	cbz	r3, 800684c <_dtoa_r+0x7c4>
 8006840:	9b07      	ldr	r3, [sp, #28]
 8006842:	f109 0901 	add.w	r9, r9, #1
 8006846:	3301      	adds	r3, #1
 8006848:	9307      	str	r3, [sp, #28]
 800684a:	2301      	movs	r3, #1
 800684c:	9308      	str	r3, [sp, #32]
 800684e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006850:	2b00      	cmp	r3, #0
 8006852:	d128      	bne.n	80068a6 <_dtoa_r+0x81e>
 8006854:	2001      	movs	r0, #1
 8006856:	e02e      	b.n	80068b6 <_dtoa_r+0x82e>
 8006858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800685a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800685e:	e796      	b.n	800678e <_dtoa_r+0x706>
 8006860:	9b08      	ldr	r3, [sp, #32]
 8006862:	f108 36ff 	add.w	r6, r8, #4294967295
 8006866:	42b3      	cmp	r3, r6
 8006868:	bfb7      	itett	lt
 800686a:	9b08      	ldrlt	r3, [sp, #32]
 800686c:	1b9e      	subge	r6, r3, r6
 800686e:	1af2      	sublt	r2, r6, r3
 8006870:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006872:	bfbf      	itttt	lt
 8006874:	9608      	strlt	r6, [sp, #32]
 8006876:	189b      	addlt	r3, r3, r2
 8006878:	930c      	strlt	r3, [sp, #48]	; 0x30
 800687a:	2600      	movlt	r6, #0
 800687c:	f1b8 0f00 	cmp.w	r8, #0
 8006880:	bfb9      	ittee	lt
 8006882:	eba9 0508 	sublt.w	r5, r9, r8
 8006886:	2300      	movlt	r3, #0
 8006888:	464d      	movge	r5, r9
 800688a:	4643      	movge	r3, r8
 800688c:	e781      	b.n	8006792 <_dtoa_r+0x70a>
 800688e:	9e08      	ldr	r6, [sp, #32]
 8006890:	464d      	mov	r5, r9
 8006892:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006894:	e786      	b.n	80067a4 <_dtoa_r+0x71c>
 8006896:	9a08      	ldr	r2, [sp, #32]
 8006898:	e7ad      	b.n	80067f6 <_dtoa_r+0x76e>
 800689a:	2300      	movs	r3, #0
 800689c:	e7d6      	b.n	800684c <_dtoa_r+0x7c4>
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	e7d4      	b.n	800684c <_dtoa_r+0x7c4>
 80068a2:	2300      	movs	r3, #0
 80068a4:	9308      	str	r3, [sp, #32]
 80068a6:	6933      	ldr	r3, [r6, #16]
 80068a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068ac:	6918      	ldr	r0, [r3, #16]
 80068ae:	f000 fdd2 	bl	8007456 <__hi0bits>
 80068b2:	f1c0 0020 	rsb	r0, r0, #32
 80068b6:	9b07      	ldr	r3, [sp, #28]
 80068b8:	4418      	add	r0, r3
 80068ba:	f010 001f 	ands.w	r0, r0, #31
 80068be:	d047      	beq.n	8006950 <_dtoa_r+0x8c8>
 80068c0:	f1c0 0320 	rsb	r3, r0, #32
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	dd3b      	ble.n	8006940 <_dtoa_r+0x8b8>
 80068c8:	9b07      	ldr	r3, [sp, #28]
 80068ca:	f1c0 001c 	rsb	r0, r0, #28
 80068ce:	4481      	add	r9, r0
 80068d0:	4405      	add	r5, r0
 80068d2:	4403      	add	r3, r0
 80068d4:	9307      	str	r3, [sp, #28]
 80068d6:	f1b9 0f00 	cmp.w	r9, #0
 80068da:	dd05      	ble.n	80068e8 <_dtoa_r+0x860>
 80068dc:	4659      	mov	r1, fp
 80068de:	464a      	mov	r2, r9
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fef3 	bl	80076cc <__lshift>
 80068e6:	4683      	mov	fp, r0
 80068e8:	9b07      	ldr	r3, [sp, #28]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dd05      	ble.n	80068fa <_dtoa_r+0x872>
 80068ee:	4631      	mov	r1, r6
 80068f0:	461a      	mov	r2, r3
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 feea 	bl	80076cc <__lshift>
 80068f8:	4606      	mov	r6, r0
 80068fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068fc:	b353      	cbz	r3, 8006954 <_dtoa_r+0x8cc>
 80068fe:	4631      	mov	r1, r6
 8006900:	4658      	mov	r0, fp
 8006902:	f000 ff37 	bl	8007774 <__mcmp>
 8006906:	2800      	cmp	r0, #0
 8006908:	da24      	bge.n	8006954 <_dtoa_r+0x8cc>
 800690a:	2300      	movs	r3, #0
 800690c:	4659      	mov	r1, fp
 800690e:	220a      	movs	r2, #10
 8006910:	4620      	mov	r0, r4
 8006912:	f000 fd27 	bl	8007364 <__multadd>
 8006916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006918:	f10a 3aff 	add.w	sl, sl, #4294967295
 800691c:	4683      	mov	fp, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8144 	beq.w	8006bac <_dtoa_r+0xb24>
 8006924:	2300      	movs	r3, #0
 8006926:	4639      	mov	r1, r7
 8006928:	220a      	movs	r2, #10
 800692a:	4620      	mov	r0, r4
 800692c:	f000 fd1a 	bl	8007364 <__multadd>
 8006930:	9b04      	ldr	r3, [sp, #16]
 8006932:	4607      	mov	r7, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	dc4d      	bgt.n	80069d4 <_dtoa_r+0x94c>
 8006938:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800693a:	2b02      	cmp	r3, #2
 800693c:	dd4a      	ble.n	80069d4 <_dtoa_r+0x94c>
 800693e:	e011      	b.n	8006964 <_dtoa_r+0x8dc>
 8006940:	d0c9      	beq.n	80068d6 <_dtoa_r+0x84e>
 8006942:	9a07      	ldr	r2, [sp, #28]
 8006944:	331c      	adds	r3, #28
 8006946:	441a      	add	r2, r3
 8006948:	4499      	add	r9, r3
 800694a:	441d      	add	r5, r3
 800694c:	4613      	mov	r3, r2
 800694e:	e7c1      	b.n	80068d4 <_dtoa_r+0x84c>
 8006950:	4603      	mov	r3, r0
 8006952:	e7f6      	b.n	8006942 <_dtoa_r+0x8ba>
 8006954:	f1b8 0f00 	cmp.w	r8, #0
 8006958:	dc36      	bgt.n	80069c8 <_dtoa_r+0x940>
 800695a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800695c:	2b02      	cmp	r3, #2
 800695e:	dd33      	ble.n	80069c8 <_dtoa_r+0x940>
 8006960:	f8cd 8010 	str.w	r8, [sp, #16]
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	b963      	cbnz	r3, 8006982 <_dtoa_r+0x8fa>
 8006968:	4631      	mov	r1, r6
 800696a:	2205      	movs	r2, #5
 800696c:	4620      	mov	r0, r4
 800696e:	f000 fcf9 	bl	8007364 <__multadd>
 8006972:	4601      	mov	r1, r0
 8006974:	4606      	mov	r6, r0
 8006976:	4658      	mov	r0, fp
 8006978:	f000 fefc 	bl	8007774 <__mcmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	f73f add3 	bgt.w	8006528 <_dtoa_r+0x4a0>
 8006982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006984:	9d06      	ldr	r5, [sp, #24]
 8006986:	ea6f 0a03 	mvn.w	sl, r3
 800698a:	f04f 0900 	mov.w	r9, #0
 800698e:	4631      	mov	r1, r6
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fcd0 	bl	8007336 <_Bfree>
 8006996:	2f00      	cmp	r7, #0
 8006998:	f43f aebd 	beq.w	8006716 <_dtoa_r+0x68e>
 800699c:	f1b9 0f00 	cmp.w	r9, #0
 80069a0:	d005      	beq.n	80069ae <_dtoa_r+0x926>
 80069a2:	45b9      	cmp	r9, r7
 80069a4:	d003      	beq.n	80069ae <_dtoa_r+0x926>
 80069a6:	4649      	mov	r1, r9
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 fcc4 	bl	8007336 <_Bfree>
 80069ae:	4639      	mov	r1, r7
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 fcc0 	bl	8007336 <_Bfree>
 80069b6:	e6ae      	b.n	8006716 <_dtoa_r+0x68e>
 80069b8:	2600      	movs	r6, #0
 80069ba:	4637      	mov	r7, r6
 80069bc:	e7e1      	b.n	8006982 <_dtoa_r+0x8fa>
 80069be:	46ba      	mov	sl, r7
 80069c0:	4637      	mov	r7, r6
 80069c2:	e5b1      	b.n	8006528 <_dtoa_r+0x4a0>
 80069c4:	40240000 	.word	0x40240000
 80069c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 80f3 	beq.w	8006bba <_dtoa_r+0xb32>
 80069d4:	2d00      	cmp	r5, #0
 80069d6:	dd05      	ble.n	80069e4 <_dtoa_r+0x95c>
 80069d8:	4639      	mov	r1, r7
 80069da:	462a      	mov	r2, r5
 80069dc:	4620      	mov	r0, r4
 80069de:	f000 fe75 	bl	80076cc <__lshift>
 80069e2:	4607      	mov	r7, r0
 80069e4:	9b08      	ldr	r3, [sp, #32]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d04c      	beq.n	8006a84 <_dtoa_r+0x9fc>
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 fc6e 	bl	80072ce <_Balloc>
 80069f2:	4605      	mov	r5, r0
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	f107 010c 	add.w	r1, r7, #12
 80069fa:	3202      	adds	r2, #2
 80069fc:	0092      	lsls	r2, r2, #2
 80069fe:	300c      	adds	r0, #12
 8006a00:	f000 fc5a 	bl	80072b8 <memcpy>
 8006a04:	2201      	movs	r2, #1
 8006a06:	4629      	mov	r1, r5
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fe5f 	bl	80076cc <__lshift>
 8006a0e:	46b9      	mov	r9, r7
 8006a10:	4607      	mov	r7, r0
 8006a12:	9b06      	ldr	r3, [sp, #24]
 8006a14:	9307      	str	r3, [sp, #28]
 8006a16:	9b02      	ldr	r3, [sp, #8]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	9308      	str	r3, [sp, #32]
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4658      	mov	r0, fp
 8006a22:	f7ff faa3 	bl	8005f6c <quorem>
 8006a26:	4649      	mov	r1, r9
 8006a28:	4605      	mov	r5, r0
 8006a2a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a2e:	4658      	mov	r0, fp
 8006a30:	f000 fea0 	bl	8007774 <__mcmp>
 8006a34:	463a      	mov	r2, r7
 8006a36:	9002      	str	r0, [sp, #8]
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 feb4 	bl	80077a8 <__mdiff>
 8006a40:	68c3      	ldr	r3, [r0, #12]
 8006a42:	4602      	mov	r2, r0
 8006a44:	bb03      	cbnz	r3, 8006a88 <_dtoa_r+0xa00>
 8006a46:	4601      	mov	r1, r0
 8006a48:	9009      	str	r0, [sp, #36]	; 0x24
 8006a4a:	4658      	mov	r0, fp
 8006a4c:	f000 fe92 	bl	8007774 <__mcmp>
 8006a50:	4603      	mov	r3, r0
 8006a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a54:	4611      	mov	r1, r2
 8006a56:	4620      	mov	r0, r4
 8006a58:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5a:	f000 fc6c 	bl	8007336 <_Bfree>
 8006a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a60:	b9a3      	cbnz	r3, 8006a8c <_dtoa_r+0xa04>
 8006a62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a64:	b992      	cbnz	r2, 8006a8c <_dtoa_r+0xa04>
 8006a66:	9a08      	ldr	r2, [sp, #32]
 8006a68:	b982      	cbnz	r2, 8006a8c <_dtoa_r+0xa04>
 8006a6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a6e:	d029      	beq.n	8006ac4 <_dtoa_r+0xa3c>
 8006a70:	9b02      	ldr	r3, [sp, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dd01      	ble.n	8006a7a <_dtoa_r+0x9f2>
 8006a76:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006a7a:	9b07      	ldr	r3, [sp, #28]
 8006a7c:	1c5d      	adds	r5, r3, #1
 8006a7e:	f883 8000 	strb.w	r8, [r3]
 8006a82:	e784      	b.n	800698e <_dtoa_r+0x906>
 8006a84:	4638      	mov	r0, r7
 8006a86:	e7c2      	b.n	8006a0e <_dtoa_r+0x986>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e7e3      	b.n	8006a54 <_dtoa_r+0x9cc>
 8006a8c:	9a02      	ldr	r2, [sp, #8]
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	db04      	blt.n	8006a9c <_dtoa_r+0xa14>
 8006a92:	d123      	bne.n	8006adc <_dtoa_r+0xa54>
 8006a94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a96:	bb0a      	cbnz	r2, 8006adc <_dtoa_r+0xa54>
 8006a98:	9a08      	ldr	r2, [sp, #32]
 8006a9a:	b9fa      	cbnz	r2, 8006adc <_dtoa_r+0xa54>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	ddec      	ble.n	8006a7a <_dtoa_r+0x9f2>
 8006aa0:	4659      	mov	r1, fp
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fe11 	bl	80076cc <__lshift>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4683      	mov	fp, r0
 8006aae:	f000 fe61 	bl	8007774 <__mcmp>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	dc03      	bgt.n	8006abe <_dtoa_r+0xa36>
 8006ab6:	d1e0      	bne.n	8006a7a <_dtoa_r+0x9f2>
 8006ab8:	f018 0f01 	tst.w	r8, #1
 8006abc:	d0dd      	beq.n	8006a7a <_dtoa_r+0x9f2>
 8006abe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ac2:	d1d8      	bne.n	8006a76 <_dtoa_r+0x9ee>
 8006ac4:	9b07      	ldr	r3, [sp, #28]
 8006ac6:	9a07      	ldr	r2, [sp, #28]
 8006ac8:	1c5d      	adds	r5, r3, #1
 8006aca:	2339      	movs	r3, #57	; 0x39
 8006acc:	7013      	strb	r3, [r2, #0]
 8006ace:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ad2:	1e6a      	subs	r2, r5, #1
 8006ad4:	2b39      	cmp	r3, #57	; 0x39
 8006ad6:	d04d      	beq.n	8006b74 <_dtoa_r+0xaec>
 8006ad8:	3301      	adds	r3, #1
 8006ada:	e052      	b.n	8006b82 <_dtoa_r+0xafa>
 8006adc:	9a07      	ldr	r2, [sp, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f102 0501 	add.w	r5, r2, #1
 8006ae4:	dd06      	ble.n	8006af4 <_dtoa_r+0xa6c>
 8006ae6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006aea:	d0eb      	beq.n	8006ac4 <_dtoa_r+0xa3c>
 8006aec:	f108 0801 	add.w	r8, r8, #1
 8006af0:	9b07      	ldr	r3, [sp, #28]
 8006af2:	e7c4      	b.n	8006a7e <_dtoa_r+0x9f6>
 8006af4:	9b06      	ldr	r3, [sp, #24]
 8006af6:	9a04      	ldr	r2, [sp, #16]
 8006af8:	1aeb      	subs	r3, r5, r3
 8006afa:	4293      	cmp	r3, r2
 8006afc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b00:	d021      	beq.n	8006b46 <_dtoa_r+0xabe>
 8006b02:	4659      	mov	r1, fp
 8006b04:	2300      	movs	r3, #0
 8006b06:	220a      	movs	r2, #10
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 fc2b 	bl	8007364 <__multadd>
 8006b0e:	45b9      	cmp	r9, r7
 8006b10:	4683      	mov	fp, r0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	f04f 020a 	mov.w	r2, #10
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	d105      	bne.n	8006b2c <_dtoa_r+0xaa4>
 8006b20:	f000 fc20 	bl	8007364 <__multadd>
 8006b24:	4681      	mov	r9, r0
 8006b26:	4607      	mov	r7, r0
 8006b28:	9507      	str	r5, [sp, #28]
 8006b2a:	e778      	b.n	8006a1e <_dtoa_r+0x996>
 8006b2c:	f000 fc1a 	bl	8007364 <__multadd>
 8006b30:	4639      	mov	r1, r7
 8006b32:	4681      	mov	r9, r0
 8006b34:	2300      	movs	r3, #0
 8006b36:	220a      	movs	r2, #10
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fc13 	bl	8007364 <__multadd>
 8006b3e:	4607      	mov	r7, r0
 8006b40:	e7f2      	b.n	8006b28 <_dtoa_r+0xaa0>
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	4659      	mov	r1, fp
 8006b48:	2201      	movs	r2, #1
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 fdbe 	bl	80076cc <__lshift>
 8006b50:	4631      	mov	r1, r6
 8006b52:	4683      	mov	fp, r0
 8006b54:	f000 fe0e 	bl	8007774 <__mcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	dcb8      	bgt.n	8006ace <_dtoa_r+0xa46>
 8006b5c:	d102      	bne.n	8006b64 <_dtoa_r+0xadc>
 8006b5e:	f018 0f01 	tst.w	r8, #1
 8006b62:	d1b4      	bne.n	8006ace <_dtoa_r+0xa46>
 8006b64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b68:	1e6a      	subs	r2, r5, #1
 8006b6a:	2b30      	cmp	r3, #48	; 0x30
 8006b6c:	f47f af0f 	bne.w	800698e <_dtoa_r+0x906>
 8006b70:	4615      	mov	r5, r2
 8006b72:	e7f7      	b.n	8006b64 <_dtoa_r+0xadc>
 8006b74:	9b06      	ldr	r3, [sp, #24]
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d105      	bne.n	8006b86 <_dtoa_r+0xafe>
 8006b7a:	2331      	movs	r3, #49	; 0x31
 8006b7c:	9a06      	ldr	r2, [sp, #24]
 8006b7e:	f10a 0a01 	add.w	sl, sl, #1
 8006b82:	7013      	strb	r3, [r2, #0]
 8006b84:	e703      	b.n	800698e <_dtoa_r+0x906>
 8006b86:	4615      	mov	r5, r2
 8006b88:	e7a1      	b.n	8006ace <_dtoa_r+0xa46>
 8006b8a:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <_dtoa_r+0xb60>)
 8006b8c:	f7ff bae1 	b.w	8006152 <_dtoa_r+0xca>
 8006b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f47f aabb 	bne.w	800610e <_dtoa_r+0x86>
 8006b98:	4b14      	ldr	r3, [pc, #80]	; (8006bec <_dtoa_r+0xb64>)
 8006b9a:	f7ff bada 	b.w	8006152 <_dtoa_r+0xca>
 8006b9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	f77f ae3f 	ble.w	8006824 <_dtoa_r+0x79c>
 8006ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ba8:	9308      	str	r3, [sp, #32]
 8006baa:	e653      	b.n	8006854 <_dtoa_r+0x7cc>
 8006bac:	9b04      	ldr	r3, [sp, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dc03      	bgt.n	8006bba <_dtoa_r+0xb32>
 8006bb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	f73f aed5 	bgt.w	8006964 <_dtoa_r+0x8dc>
 8006bba:	9d06      	ldr	r5, [sp, #24]
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	f7ff f9d4 	bl	8005f6c <quorem>
 8006bc4:	9b06      	ldr	r3, [sp, #24]
 8006bc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006bca:	f805 8b01 	strb.w	r8, [r5], #1
 8006bce:	9a04      	ldr	r2, [sp, #16]
 8006bd0:	1aeb      	subs	r3, r5, r3
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	ddb5      	ble.n	8006b42 <_dtoa_r+0xaba>
 8006bd6:	4659      	mov	r1, fp
 8006bd8:	2300      	movs	r3, #0
 8006bda:	220a      	movs	r2, #10
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fbc1 	bl	8007364 <__multadd>
 8006be2:	4683      	mov	fp, r0
 8006be4:	e7ea      	b.n	8006bbc <_dtoa_r+0xb34>
 8006be6:	bf00      	nop
 8006be8:	080083a8 	.word	0x080083a8
 8006bec:	08008428 	.word	0x08008428

08006bf0 <rshift>:
 8006bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bf2:	6906      	ldr	r6, [r0, #16]
 8006bf4:	114b      	asrs	r3, r1, #5
 8006bf6:	429e      	cmp	r6, r3
 8006bf8:	f100 0414 	add.w	r4, r0, #20
 8006bfc:	dd31      	ble.n	8006c62 <rshift+0x72>
 8006bfe:	f011 011f 	ands.w	r1, r1, #31
 8006c02:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c06:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006c0a:	d108      	bne.n	8006c1e <rshift+0x2e>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	42b2      	cmp	r2, r6
 8006c10:	460b      	mov	r3, r1
 8006c12:	d211      	bcs.n	8006c38 <rshift+0x48>
 8006c14:	f852 3b04 	ldr.w	r3, [r2], #4
 8006c18:	f841 3b04 	str.w	r3, [r1], #4
 8006c1c:	e7f7      	b.n	8006c0e <rshift+0x1e>
 8006c1e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006c22:	4623      	mov	r3, r4
 8006c24:	f1c1 0c20 	rsb	ip, r1, #32
 8006c28:	40cd      	lsrs	r5, r1
 8006c2a:	3204      	adds	r2, #4
 8006c2c:	42b2      	cmp	r2, r6
 8006c2e:	4617      	mov	r7, r2
 8006c30:	d30d      	bcc.n	8006c4e <rshift+0x5e>
 8006c32:	601d      	str	r5, [r3, #0]
 8006c34:	b105      	cbz	r5, 8006c38 <rshift+0x48>
 8006c36:	3304      	adds	r3, #4
 8006c38:	42a3      	cmp	r3, r4
 8006c3a:	eba3 0204 	sub.w	r2, r3, r4
 8006c3e:	bf08      	it	eq
 8006c40:	2300      	moveq	r3, #0
 8006c42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c46:	6102      	str	r2, [r0, #16]
 8006c48:	bf08      	it	eq
 8006c4a:	6143      	streq	r3, [r0, #20]
 8006c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c4e:	683f      	ldr	r7, [r7, #0]
 8006c50:	fa07 f70c 	lsl.w	r7, r7, ip
 8006c54:	433d      	orrs	r5, r7
 8006c56:	f843 5b04 	str.w	r5, [r3], #4
 8006c5a:	f852 5b04 	ldr.w	r5, [r2], #4
 8006c5e:	40cd      	lsrs	r5, r1
 8006c60:	e7e4      	b.n	8006c2c <rshift+0x3c>
 8006c62:	4623      	mov	r3, r4
 8006c64:	e7e8      	b.n	8006c38 <rshift+0x48>

08006c66 <__hexdig_fun>:
 8006c66:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006c6a:	2b09      	cmp	r3, #9
 8006c6c:	d802      	bhi.n	8006c74 <__hexdig_fun+0xe>
 8006c6e:	3820      	subs	r0, #32
 8006c70:	b2c0      	uxtb	r0, r0
 8006c72:	4770      	bx	lr
 8006c74:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	d801      	bhi.n	8006c80 <__hexdig_fun+0x1a>
 8006c7c:	3847      	subs	r0, #71	; 0x47
 8006c7e:	e7f7      	b.n	8006c70 <__hexdig_fun+0xa>
 8006c80:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006c84:	2b05      	cmp	r3, #5
 8006c86:	d801      	bhi.n	8006c8c <__hexdig_fun+0x26>
 8006c88:	3827      	subs	r0, #39	; 0x27
 8006c8a:	e7f1      	b.n	8006c70 <__hexdig_fun+0xa>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	4770      	bx	lr

08006c90 <__gethex>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	b08b      	sub	sp, #44	; 0x2c
 8006c96:	9002      	str	r0, [sp, #8]
 8006c98:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006c9a:	468a      	mov	sl, r1
 8006c9c:	4690      	mov	r8, r2
 8006c9e:	9306      	str	r3, [sp, #24]
 8006ca0:	f000 fad1 	bl	8007246 <__localeconv_l>
 8006ca4:	6803      	ldr	r3, [r0, #0]
 8006ca6:	f04f 0b00 	mov.w	fp, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	f7f9 fa4f 	bl	8000150 <strlen>
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	9001      	str	r0, [sp, #4]
 8006cb6:	4403      	add	r3, r0
 8006cb8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006cbc:	9307      	str	r3, [sp, #28]
 8006cbe:	f8da 3000 	ldr.w	r3, [sl]
 8006cc2:	3302      	adds	r3, #2
 8006cc4:	461f      	mov	r7, r3
 8006cc6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006cca:	2830      	cmp	r0, #48	; 0x30
 8006ccc:	d06c      	beq.n	8006da8 <__gethex+0x118>
 8006cce:	f7ff ffca 	bl	8006c66 <__hexdig_fun>
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d16a      	bne.n	8006dae <__gethex+0x11e>
 8006cd8:	9a01      	ldr	r2, [sp, #4]
 8006cda:	9903      	ldr	r1, [sp, #12]
 8006cdc:	4638      	mov	r0, r7
 8006cde:	f001 f905 	bl	8007eec <strncmp>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d166      	bne.n	8006db4 <__gethex+0x124>
 8006ce6:	9b01      	ldr	r3, [sp, #4]
 8006ce8:	5cf8      	ldrb	r0, [r7, r3]
 8006cea:	18fe      	adds	r6, r7, r3
 8006cec:	f7ff ffbb 	bl	8006c66 <__hexdig_fun>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d062      	beq.n	8006dba <__gethex+0x12a>
 8006cf4:	4633      	mov	r3, r6
 8006cf6:	7818      	ldrb	r0, [r3, #0]
 8006cf8:	461f      	mov	r7, r3
 8006cfa:	2830      	cmp	r0, #48	; 0x30
 8006cfc:	f103 0301 	add.w	r3, r3, #1
 8006d00:	d0f9      	beq.n	8006cf6 <__gethex+0x66>
 8006d02:	f7ff ffb0 	bl	8006c66 <__hexdig_fun>
 8006d06:	fab0 f580 	clz	r5, r0
 8006d0a:	4634      	mov	r4, r6
 8006d0c:	f04f 0b01 	mov.w	fp, #1
 8006d10:	096d      	lsrs	r5, r5, #5
 8006d12:	463a      	mov	r2, r7
 8006d14:	4616      	mov	r6, r2
 8006d16:	7830      	ldrb	r0, [r6, #0]
 8006d18:	3201      	adds	r2, #1
 8006d1a:	f7ff ffa4 	bl	8006c66 <__hexdig_fun>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d1f8      	bne.n	8006d14 <__gethex+0x84>
 8006d22:	9a01      	ldr	r2, [sp, #4]
 8006d24:	9903      	ldr	r1, [sp, #12]
 8006d26:	4630      	mov	r0, r6
 8006d28:	f001 f8e0 	bl	8007eec <strncmp>
 8006d2c:	b950      	cbnz	r0, 8006d44 <__gethex+0xb4>
 8006d2e:	b954      	cbnz	r4, 8006d46 <__gethex+0xb6>
 8006d30:	9b01      	ldr	r3, [sp, #4]
 8006d32:	18f4      	adds	r4, r6, r3
 8006d34:	4622      	mov	r2, r4
 8006d36:	4616      	mov	r6, r2
 8006d38:	7830      	ldrb	r0, [r6, #0]
 8006d3a:	3201      	adds	r2, #1
 8006d3c:	f7ff ff93 	bl	8006c66 <__hexdig_fun>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d1f8      	bne.n	8006d36 <__gethex+0xa6>
 8006d44:	b10c      	cbz	r4, 8006d4a <__gethex+0xba>
 8006d46:	1ba4      	subs	r4, r4, r6
 8006d48:	00a4      	lsls	r4, r4, #2
 8006d4a:	7833      	ldrb	r3, [r6, #0]
 8006d4c:	2b50      	cmp	r3, #80	; 0x50
 8006d4e:	d001      	beq.n	8006d54 <__gethex+0xc4>
 8006d50:	2b70      	cmp	r3, #112	; 0x70
 8006d52:	d140      	bne.n	8006dd6 <__gethex+0x146>
 8006d54:	7873      	ldrb	r3, [r6, #1]
 8006d56:	2b2b      	cmp	r3, #43	; 0x2b
 8006d58:	d031      	beq.n	8006dbe <__gethex+0x12e>
 8006d5a:	2b2d      	cmp	r3, #45	; 0x2d
 8006d5c:	d033      	beq.n	8006dc6 <__gethex+0x136>
 8006d5e:	f04f 0900 	mov.w	r9, #0
 8006d62:	1c71      	adds	r1, r6, #1
 8006d64:	7808      	ldrb	r0, [r1, #0]
 8006d66:	f7ff ff7e 	bl	8006c66 <__hexdig_fun>
 8006d6a:	1e43      	subs	r3, r0, #1
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b18      	cmp	r3, #24
 8006d70:	d831      	bhi.n	8006dd6 <__gethex+0x146>
 8006d72:	f1a0 0210 	sub.w	r2, r0, #16
 8006d76:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d7a:	f7ff ff74 	bl	8006c66 <__hexdig_fun>
 8006d7e:	1e43      	subs	r3, r0, #1
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b18      	cmp	r3, #24
 8006d84:	d922      	bls.n	8006dcc <__gethex+0x13c>
 8006d86:	f1b9 0f00 	cmp.w	r9, #0
 8006d8a:	d000      	beq.n	8006d8e <__gethex+0xfe>
 8006d8c:	4252      	negs	r2, r2
 8006d8e:	4414      	add	r4, r2
 8006d90:	f8ca 1000 	str.w	r1, [sl]
 8006d94:	b30d      	cbz	r5, 8006dda <__gethex+0x14a>
 8006d96:	f1bb 0f00 	cmp.w	fp, #0
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2706      	moveq	r7, #6
 8006d9e:	2700      	movne	r7, #0
 8006da0:	4638      	mov	r0, r7
 8006da2:	b00b      	add	sp, #44	; 0x2c
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	f10b 0b01 	add.w	fp, fp, #1
 8006dac:	e78a      	b.n	8006cc4 <__gethex+0x34>
 8006dae:	2500      	movs	r5, #0
 8006db0:	462c      	mov	r4, r5
 8006db2:	e7ae      	b.n	8006d12 <__gethex+0x82>
 8006db4:	463e      	mov	r6, r7
 8006db6:	2501      	movs	r5, #1
 8006db8:	e7c7      	b.n	8006d4a <__gethex+0xba>
 8006dba:	4604      	mov	r4, r0
 8006dbc:	e7fb      	b.n	8006db6 <__gethex+0x126>
 8006dbe:	f04f 0900 	mov.w	r9, #0
 8006dc2:	1cb1      	adds	r1, r6, #2
 8006dc4:	e7ce      	b.n	8006d64 <__gethex+0xd4>
 8006dc6:	f04f 0901 	mov.w	r9, #1
 8006dca:	e7fa      	b.n	8006dc2 <__gethex+0x132>
 8006dcc:	230a      	movs	r3, #10
 8006dce:	fb03 0202 	mla	r2, r3, r2, r0
 8006dd2:	3a10      	subs	r2, #16
 8006dd4:	e7cf      	b.n	8006d76 <__gethex+0xe6>
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	e7da      	b.n	8006d90 <__gethex+0x100>
 8006dda:	4629      	mov	r1, r5
 8006ddc:	1bf3      	subs	r3, r6, r7
 8006dde:	3b01      	subs	r3, #1
 8006de0:	2b07      	cmp	r3, #7
 8006de2:	dc49      	bgt.n	8006e78 <__gethex+0x1e8>
 8006de4:	9802      	ldr	r0, [sp, #8]
 8006de6:	f000 fa72 	bl	80072ce <_Balloc>
 8006dea:	f04f 0b00 	mov.w	fp, #0
 8006dee:	4605      	mov	r5, r0
 8006df0:	46da      	mov	sl, fp
 8006df2:	9b01      	ldr	r3, [sp, #4]
 8006df4:	f100 0914 	add.w	r9, r0, #20
 8006df8:	f1c3 0301 	rsb	r3, r3, #1
 8006dfc:	f8cd 9010 	str.w	r9, [sp, #16]
 8006e00:	9308      	str	r3, [sp, #32]
 8006e02:	42b7      	cmp	r7, r6
 8006e04:	d33b      	bcc.n	8006e7e <__gethex+0x1ee>
 8006e06:	9804      	ldr	r0, [sp, #16]
 8006e08:	f840 ab04 	str.w	sl, [r0], #4
 8006e0c:	eba0 0009 	sub.w	r0, r0, r9
 8006e10:	1080      	asrs	r0, r0, #2
 8006e12:	6128      	str	r0, [r5, #16]
 8006e14:	0147      	lsls	r7, r0, #5
 8006e16:	4650      	mov	r0, sl
 8006e18:	f000 fb1d 	bl	8007456 <__hi0bits>
 8006e1c:	f8d8 6000 	ldr.w	r6, [r8]
 8006e20:	1a3f      	subs	r7, r7, r0
 8006e22:	42b7      	cmp	r7, r6
 8006e24:	dd64      	ble.n	8006ef0 <__gethex+0x260>
 8006e26:	1bbf      	subs	r7, r7, r6
 8006e28:	4639      	mov	r1, r7
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 fe27 	bl	8007a7e <__any_on>
 8006e30:	4682      	mov	sl, r0
 8006e32:	b178      	cbz	r0, 8006e54 <__gethex+0x1c4>
 8006e34:	f04f 0a01 	mov.w	sl, #1
 8006e38:	1e7b      	subs	r3, r7, #1
 8006e3a:	1159      	asrs	r1, r3, #5
 8006e3c:	f003 021f 	and.w	r2, r3, #31
 8006e40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006e44:	fa0a f202 	lsl.w	r2, sl, r2
 8006e48:	420a      	tst	r2, r1
 8006e4a:	d003      	beq.n	8006e54 <__gethex+0x1c4>
 8006e4c:	4553      	cmp	r3, sl
 8006e4e:	dc46      	bgt.n	8006ede <__gethex+0x24e>
 8006e50:	f04f 0a02 	mov.w	sl, #2
 8006e54:	4639      	mov	r1, r7
 8006e56:	4628      	mov	r0, r5
 8006e58:	f7ff feca 	bl	8006bf0 <rshift>
 8006e5c:	443c      	add	r4, r7
 8006e5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	da52      	bge.n	8006f0c <__gethex+0x27c>
 8006e66:	4629      	mov	r1, r5
 8006e68:	9802      	ldr	r0, [sp, #8]
 8006e6a:	f000 fa64 	bl	8007336 <_Bfree>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e72:	27a3      	movs	r7, #163	; 0xa3
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e793      	b.n	8006da0 <__gethex+0x110>
 8006e78:	3101      	adds	r1, #1
 8006e7a:	105b      	asrs	r3, r3, #1
 8006e7c:	e7b0      	b.n	8006de0 <__gethex+0x150>
 8006e7e:	1e73      	subs	r3, r6, #1
 8006e80:	9305      	str	r3, [sp, #20]
 8006e82:	9a07      	ldr	r2, [sp, #28]
 8006e84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d018      	beq.n	8006ebe <__gethex+0x22e>
 8006e8c:	f1bb 0f20 	cmp.w	fp, #32
 8006e90:	d107      	bne.n	8006ea2 <__gethex+0x212>
 8006e92:	9b04      	ldr	r3, [sp, #16]
 8006e94:	f8c3 a000 	str.w	sl, [r3]
 8006e98:	f04f 0a00 	mov.w	sl, #0
 8006e9c:	46d3      	mov	fp, sl
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006ea6:	f7ff fede 	bl	8006c66 <__hexdig_fun>
 8006eaa:	f000 000f 	and.w	r0, r0, #15
 8006eae:	fa00 f00b 	lsl.w	r0, r0, fp
 8006eb2:	ea4a 0a00 	orr.w	sl, sl, r0
 8006eb6:	f10b 0b04 	add.w	fp, fp, #4
 8006eba:	9b05      	ldr	r3, [sp, #20]
 8006ebc:	e00d      	b.n	8006eda <__gethex+0x24a>
 8006ebe:	9b05      	ldr	r3, [sp, #20]
 8006ec0:	9a08      	ldr	r2, [sp, #32]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	42bb      	cmp	r3, r7
 8006ec6:	d3e1      	bcc.n	8006e8c <__gethex+0x1fc>
 8006ec8:	4618      	mov	r0, r3
 8006eca:	9a01      	ldr	r2, [sp, #4]
 8006ecc:	9903      	ldr	r1, [sp, #12]
 8006ece:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed0:	f001 f80c 	bl	8007eec <strncmp>
 8006ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d1d8      	bne.n	8006e8c <__gethex+0x1fc>
 8006eda:	461e      	mov	r6, r3
 8006edc:	e791      	b.n	8006e02 <__gethex+0x172>
 8006ede:	1eb9      	subs	r1, r7, #2
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f000 fdcc 	bl	8007a7e <__any_on>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d0b2      	beq.n	8006e50 <__gethex+0x1c0>
 8006eea:	f04f 0a03 	mov.w	sl, #3
 8006eee:	e7b1      	b.n	8006e54 <__gethex+0x1c4>
 8006ef0:	da09      	bge.n	8006f06 <__gethex+0x276>
 8006ef2:	1bf7      	subs	r7, r6, r7
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	463a      	mov	r2, r7
 8006ef8:	9802      	ldr	r0, [sp, #8]
 8006efa:	f000 fbe7 	bl	80076cc <__lshift>
 8006efe:	4605      	mov	r5, r0
 8006f00:	1be4      	subs	r4, r4, r7
 8006f02:	f100 0914 	add.w	r9, r0, #20
 8006f06:	f04f 0a00 	mov.w	sl, #0
 8006f0a:	e7a8      	b.n	8006e5e <__gethex+0x1ce>
 8006f0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f10:	42a0      	cmp	r0, r4
 8006f12:	dd6b      	ble.n	8006fec <__gethex+0x35c>
 8006f14:	1b04      	subs	r4, r0, r4
 8006f16:	42a6      	cmp	r6, r4
 8006f18:	dc2e      	bgt.n	8006f78 <__gethex+0x2e8>
 8006f1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d022      	beq.n	8006f68 <__gethex+0x2d8>
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d024      	beq.n	8006f70 <__gethex+0x2e0>
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d115      	bne.n	8006f56 <__gethex+0x2c6>
 8006f2a:	42a6      	cmp	r6, r4
 8006f2c:	d113      	bne.n	8006f56 <__gethex+0x2c6>
 8006f2e:	2e01      	cmp	r6, #1
 8006f30:	dc0b      	bgt.n	8006f4a <__gethex+0x2ba>
 8006f32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f36:	9a06      	ldr	r2, [sp, #24]
 8006f38:	2762      	movs	r7, #98	; 0x62
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	612b      	str	r3, [r5, #16]
 8006f40:	f8c9 3000 	str.w	r3, [r9]
 8006f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f46:	601d      	str	r5, [r3, #0]
 8006f48:	e72a      	b.n	8006da0 <__gethex+0x110>
 8006f4a:	1e71      	subs	r1, r6, #1
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 fd96 	bl	8007a7e <__any_on>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d1ed      	bne.n	8006f32 <__gethex+0x2a2>
 8006f56:	4629      	mov	r1, r5
 8006f58:	9802      	ldr	r0, [sp, #8]
 8006f5a:	f000 f9ec 	bl	8007336 <_Bfree>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f62:	2750      	movs	r7, #80	; 0x50
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e71b      	b.n	8006da0 <__gethex+0x110>
 8006f68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0e1      	beq.n	8006f32 <__gethex+0x2a2>
 8006f6e:	e7f2      	b.n	8006f56 <__gethex+0x2c6>
 8006f70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1dd      	bne.n	8006f32 <__gethex+0x2a2>
 8006f76:	e7ee      	b.n	8006f56 <__gethex+0x2c6>
 8006f78:	1e67      	subs	r7, r4, #1
 8006f7a:	f1ba 0f00 	cmp.w	sl, #0
 8006f7e:	d132      	bne.n	8006fe6 <__gethex+0x356>
 8006f80:	b127      	cbz	r7, 8006f8c <__gethex+0x2fc>
 8006f82:	4639      	mov	r1, r7
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 fd7a 	bl	8007a7e <__any_on>
 8006f8a:	4682      	mov	sl, r0
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	117a      	asrs	r2, r7, #5
 8006f90:	f007 071f 	and.w	r7, r7, #31
 8006f94:	fa03 f707 	lsl.w	r7, r3, r7
 8006f98:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	421f      	tst	r7, r3
 8006fa0:	f04f 0702 	mov.w	r7, #2
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	bf18      	it	ne
 8006fa8:	f04a 0a02 	orrne.w	sl, sl, #2
 8006fac:	1b36      	subs	r6, r6, r4
 8006fae:	f7ff fe1f 	bl	8006bf0 <rshift>
 8006fb2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006fb6:	f1ba 0f00 	cmp.w	sl, #0
 8006fba:	d048      	beq.n	800704e <__gethex+0x3be>
 8006fbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d015      	beq.n	8006ff0 <__gethex+0x360>
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d017      	beq.n	8006ff8 <__gethex+0x368>
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d109      	bne.n	8006fe0 <__gethex+0x350>
 8006fcc:	f01a 0f02 	tst.w	sl, #2
 8006fd0:	d006      	beq.n	8006fe0 <__gethex+0x350>
 8006fd2:	f8d9 3000 	ldr.w	r3, [r9]
 8006fd6:	ea4a 0a03 	orr.w	sl, sl, r3
 8006fda:	f01a 0f01 	tst.w	sl, #1
 8006fde:	d10e      	bne.n	8006ffe <__gethex+0x36e>
 8006fe0:	f047 0710 	orr.w	r7, r7, #16
 8006fe4:	e033      	b.n	800704e <__gethex+0x3be>
 8006fe6:	f04f 0a01 	mov.w	sl, #1
 8006fea:	e7cf      	b.n	8006f8c <__gethex+0x2fc>
 8006fec:	2701      	movs	r7, #1
 8006fee:	e7e2      	b.n	8006fb6 <__gethex+0x326>
 8006ff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ff2:	f1c3 0301 	rsb	r3, r3, #1
 8006ff6:	9315      	str	r3, [sp, #84]	; 0x54
 8006ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0f0      	beq.n	8006fe0 <__gethex+0x350>
 8006ffe:	f04f 0c00 	mov.w	ip, #0
 8007002:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007006:	f105 0314 	add.w	r3, r5, #20
 800700a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800700e:	eb03 010a 	add.w	r1, r3, sl
 8007012:	4618      	mov	r0, r3
 8007014:	f853 2b04 	ldr.w	r2, [r3], #4
 8007018:	f1b2 3fff 	cmp.w	r2, #4294967295
 800701c:	d01c      	beq.n	8007058 <__gethex+0x3c8>
 800701e:	3201      	adds	r2, #1
 8007020:	6002      	str	r2, [r0, #0]
 8007022:	2f02      	cmp	r7, #2
 8007024:	f105 0314 	add.w	r3, r5, #20
 8007028:	d138      	bne.n	800709c <__gethex+0x40c>
 800702a:	f8d8 2000 	ldr.w	r2, [r8]
 800702e:	3a01      	subs	r2, #1
 8007030:	42b2      	cmp	r2, r6
 8007032:	d10a      	bne.n	800704a <__gethex+0x3ba>
 8007034:	2201      	movs	r2, #1
 8007036:	1171      	asrs	r1, r6, #5
 8007038:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800703c:	f006 061f 	and.w	r6, r6, #31
 8007040:	fa02 f606 	lsl.w	r6, r2, r6
 8007044:	421e      	tst	r6, r3
 8007046:	bf18      	it	ne
 8007048:	4617      	movne	r7, r2
 800704a:	f047 0720 	orr.w	r7, r7, #32
 800704e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007050:	601d      	str	r5, [r3, #0]
 8007052:	9b06      	ldr	r3, [sp, #24]
 8007054:	601c      	str	r4, [r3, #0]
 8007056:	e6a3      	b.n	8006da0 <__gethex+0x110>
 8007058:	4299      	cmp	r1, r3
 800705a:	f843 cc04 	str.w	ip, [r3, #-4]
 800705e:	d8d8      	bhi.n	8007012 <__gethex+0x382>
 8007060:	68ab      	ldr	r3, [r5, #8]
 8007062:	4599      	cmp	r9, r3
 8007064:	db12      	blt.n	800708c <__gethex+0x3fc>
 8007066:	6869      	ldr	r1, [r5, #4]
 8007068:	9802      	ldr	r0, [sp, #8]
 800706a:	3101      	adds	r1, #1
 800706c:	f000 f92f 	bl	80072ce <_Balloc>
 8007070:	4683      	mov	fp, r0
 8007072:	692a      	ldr	r2, [r5, #16]
 8007074:	f105 010c 	add.w	r1, r5, #12
 8007078:	3202      	adds	r2, #2
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	300c      	adds	r0, #12
 800707e:	f000 f91b 	bl	80072b8 <memcpy>
 8007082:	4629      	mov	r1, r5
 8007084:	9802      	ldr	r0, [sp, #8]
 8007086:	f000 f956 	bl	8007336 <_Bfree>
 800708a:	465d      	mov	r5, fp
 800708c:	692b      	ldr	r3, [r5, #16]
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	612a      	str	r2, [r5, #16]
 8007092:	2201      	movs	r2, #1
 8007094:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007098:	615a      	str	r2, [r3, #20]
 800709a:	e7c2      	b.n	8007022 <__gethex+0x392>
 800709c:	692a      	ldr	r2, [r5, #16]
 800709e:	454a      	cmp	r2, r9
 80070a0:	dd0b      	ble.n	80070ba <__gethex+0x42a>
 80070a2:	2101      	movs	r1, #1
 80070a4:	4628      	mov	r0, r5
 80070a6:	f7ff fda3 	bl	8006bf0 <rshift>
 80070aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070ae:	3401      	adds	r4, #1
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	f6ff aed8 	blt.w	8006e66 <__gethex+0x1d6>
 80070b6:	2701      	movs	r7, #1
 80070b8:	e7c7      	b.n	800704a <__gethex+0x3ba>
 80070ba:	f016 061f 	ands.w	r6, r6, #31
 80070be:	d0fa      	beq.n	80070b6 <__gethex+0x426>
 80070c0:	449a      	add	sl, r3
 80070c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80070c6:	f000 f9c6 	bl	8007456 <__hi0bits>
 80070ca:	f1c6 0620 	rsb	r6, r6, #32
 80070ce:	42b0      	cmp	r0, r6
 80070d0:	dbe7      	blt.n	80070a2 <__gethex+0x412>
 80070d2:	e7f0      	b.n	80070b6 <__gethex+0x426>

080070d4 <L_shift>:
 80070d4:	f1c2 0208 	rsb	r2, r2, #8
 80070d8:	0092      	lsls	r2, r2, #2
 80070da:	b570      	push	{r4, r5, r6, lr}
 80070dc:	f1c2 0620 	rsb	r6, r2, #32
 80070e0:	6843      	ldr	r3, [r0, #4]
 80070e2:	6804      	ldr	r4, [r0, #0]
 80070e4:	fa03 f506 	lsl.w	r5, r3, r6
 80070e8:	432c      	orrs	r4, r5
 80070ea:	40d3      	lsrs	r3, r2
 80070ec:	6004      	str	r4, [r0, #0]
 80070ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80070f2:	4288      	cmp	r0, r1
 80070f4:	d3f4      	bcc.n	80070e0 <L_shift+0xc>
 80070f6:	bd70      	pop	{r4, r5, r6, pc}

080070f8 <__match>:
 80070f8:	b530      	push	{r4, r5, lr}
 80070fa:	6803      	ldr	r3, [r0, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007102:	b914      	cbnz	r4, 800710a <__match+0x12>
 8007104:	6003      	str	r3, [r0, #0]
 8007106:	2001      	movs	r0, #1
 8007108:	bd30      	pop	{r4, r5, pc}
 800710a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800710e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007112:	2d19      	cmp	r5, #25
 8007114:	bf98      	it	ls
 8007116:	3220      	addls	r2, #32
 8007118:	42a2      	cmp	r2, r4
 800711a:	d0f0      	beq.n	80070fe <__match+0x6>
 800711c:	2000      	movs	r0, #0
 800711e:	e7f3      	b.n	8007108 <__match+0x10>

08007120 <__hexnan>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	2500      	movs	r5, #0
 8007126:	680b      	ldr	r3, [r1, #0]
 8007128:	4682      	mov	sl, r0
 800712a:	115f      	asrs	r7, r3, #5
 800712c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007130:	f013 031f 	ands.w	r3, r3, #31
 8007134:	bf18      	it	ne
 8007136:	3704      	addne	r7, #4
 8007138:	1f3e      	subs	r6, r7, #4
 800713a:	4690      	mov	r8, r2
 800713c:	46b1      	mov	r9, r6
 800713e:	4634      	mov	r4, r6
 8007140:	46ab      	mov	fp, r5
 8007142:	b087      	sub	sp, #28
 8007144:	6801      	ldr	r1, [r0, #0]
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	f847 5c04 	str.w	r5, [r7, #-4]
 800714c:	9502      	str	r5, [sp, #8]
 800714e:	784a      	ldrb	r2, [r1, #1]
 8007150:	1c4b      	adds	r3, r1, #1
 8007152:	9303      	str	r3, [sp, #12]
 8007154:	b342      	cbz	r2, 80071a8 <__hexnan+0x88>
 8007156:	4610      	mov	r0, r2
 8007158:	9105      	str	r1, [sp, #20]
 800715a:	9204      	str	r2, [sp, #16]
 800715c:	f7ff fd83 	bl	8006c66 <__hexdig_fun>
 8007160:	2800      	cmp	r0, #0
 8007162:	d143      	bne.n	80071ec <__hexnan+0xcc>
 8007164:	9a04      	ldr	r2, [sp, #16]
 8007166:	9905      	ldr	r1, [sp, #20]
 8007168:	2a20      	cmp	r2, #32
 800716a:	d818      	bhi.n	800719e <__hexnan+0x7e>
 800716c:	9b02      	ldr	r3, [sp, #8]
 800716e:	459b      	cmp	fp, r3
 8007170:	dd13      	ble.n	800719a <__hexnan+0x7a>
 8007172:	454c      	cmp	r4, r9
 8007174:	d206      	bcs.n	8007184 <__hexnan+0x64>
 8007176:	2d07      	cmp	r5, #7
 8007178:	dc04      	bgt.n	8007184 <__hexnan+0x64>
 800717a:	462a      	mov	r2, r5
 800717c:	4649      	mov	r1, r9
 800717e:	4620      	mov	r0, r4
 8007180:	f7ff ffa8 	bl	80070d4 <L_shift>
 8007184:	4544      	cmp	r4, r8
 8007186:	d944      	bls.n	8007212 <__hexnan+0xf2>
 8007188:	2300      	movs	r3, #0
 800718a:	f1a4 0904 	sub.w	r9, r4, #4
 800718e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007192:	461d      	mov	r5, r3
 8007194:	464c      	mov	r4, r9
 8007196:	f8cd b008 	str.w	fp, [sp, #8]
 800719a:	9903      	ldr	r1, [sp, #12]
 800719c:	e7d7      	b.n	800714e <__hexnan+0x2e>
 800719e:	2a29      	cmp	r2, #41	; 0x29
 80071a0:	d14a      	bne.n	8007238 <__hexnan+0x118>
 80071a2:	3102      	adds	r1, #2
 80071a4:	f8ca 1000 	str.w	r1, [sl]
 80071a8:	f1bb 0f00 	cmp.w	fp, #0
 80071ac:	d044      	beq.n	8007238 <__hexnan+0x118>
 80071ae:	454c      	cmp	r4, r9
 80071b0:	d206      	bcs.n	80071c0 <__hexnan+0xa0>
 80071b2:	2d07      	cmp	r5, #7
 80071b4:	dc04      	bgt.n	80071c0 <__hexnan+0xa0>
 80071b6:	462a      	mov	r2, r5
 80071b8:	4649      	mov	r1, r9
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7ff ff8a 	bl	80070d4 <L_shift>
 80071c0:	4544      	cmp	r4, r8
 80071c2:	d928      	bls.n	8007216 <__hexnan+0xf6>
 80071c4:	4643      	mov	r3, r8
 80071c6:	f854 2b04 	ldr.w	r2, [r4], #4
 80071ca:	42a6      	cmp	r6, r4
 80071cc:	f843 2b04 	str.w	r2, [r3], #4
 80071d0:	d2f9      	bcs.n	80071c6 <__hexnan+0xa6>
 80071d2:	2200      	movs	r2, #0
 80071d4:	f843 2b04 	str.w	r2, [r3], #4
 80071d8:	429e      	cmp	r6, r3
 80071da:	d2fb      	bcs.n	80071d4 <__hexnan+0xb4>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	b91b      	cbnz	r3, 80071e8 <__hexnan+0xc8>
 80071e0:	4546      	cmp	r6, r8
 80071e2:	d127      	bne.n	8007234 <__hexnan+0x114>
 80071e4:	2301      	movs	r3, #1
 80071e6:	6033      	str	r3, [r6, #0]
 80071e8:	2005      	movs	r0, #5
 80071ea:	e026      	b.n	800723a <__hexnan+0x11a>
 80071ec:	3501      	adds	r5, #1
 80071ee:	2d08      	cmp	r5, #8
 80071f0:	f10b 0b01 	add.w	fp, fp, #1
 80071f4:	dd06      	ble.n	8007204 <__hexnan+0xe4>
 80071f6:	4544      	cmp	r4, r8
 80071f8:	d9cf      	bls.n	800719a <__hexnan+0x7a>
 80071fa:	2300      	movs	r3, #0
 80071fc:	2501      	movs	r5, #1
 80071fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007202:	3c04      	subs	r4, #4
 8007204:	6822      	ldr	r2, [r4, #0]
 8007206:	f000 000f 	and.w	r0, r0, #15
 800720a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800720e:	6020      	str	r0, [r4, #0]
 8007210:	e7c3      	b.n	800719a <__hexnan+0x7a>
 8007212:	2508      	movs	r5, #8
 8007214:	e7c1      	b.n	800719a <__hexnan+0x7a>
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0df      	beq.n	80071dc <__hexnan+0xbc>
 800721c:	f04f 32ff 	mov.w	r2, #4294967295
 8007220:	f1c3 0320 	rsb	r3, r3, #32
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800722c:	401a      	ands	r2, r3
 800722e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007232:	e7d3      	b.n	80071dc <__hexnan+0xbc>
 8007234:	3e04      	subs	r6, #4
 8007236:	e7d1      	b.n	80071dc <__hexnan+0xbc>
 8007238:	2004      	movs	r0, #4
 800723a:	b007      	add	sp, #28
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007240 <__locale_ctype_ptr_l>:
 8007240:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007244:	4770      	bx	lr

08007246 <__localeconv_l>:
 8007246:	30f0      	adds	r0, #240	; 0xf0
 8007248:	4770      	bx	lr
	...

0800724c <_localeconv_r>:
 800724c:	4b04      	ldr	r3, [pc, #16]	; (8007260 <_localeconv_r+0x14>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6a18      	ldr	r0, [r3, #32]
 8007252:	4b04      	ldr	r3, [pc, #16]	; (8007264 <_localeconv_r+0x18>)
 8007254:	2800      	cmp	r0, #0
 8007256:	bf08      	it	eq
 8007258:	4618      	moveq	r0, r3
 800725a:	30f0      	adds	r0, #240	; 0xf0
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	2000000c 	.word	0x2000000c
 8007264:	20000070 	.word	0x20000070

08007268 <malloc>:
 8007268:	4b02      	ldr	r3, [pc, #8]	; (8007274 <malloc+0xc>)
 800726a:	4601      	mov	r1, r0
 800726c:	6818      	ldr	r0, [r3, #0]
 800726e:	f000 bc81 	b.w	8007b74 <_malloc_r>
 8007272:	bf00      	nop
 8007274:	2000000c 	.word	0x2000000c

08007278 <__ascii_mbtowc>:
 8007278:	b082      	sub	sp, #8
 800727a:	b901      	cbnz	r1, 800727e <__ascii_mbtowc+0x6>
 800727c:	a901      	add	r1, sp, #4
 800727e:	b142      	cbz	r2, 8007292 <__ascii_mbtowc+0x1a>
 8007280:	b14b      	cbz	r3, 8007296 <__ascii_mbtowc+0x1e>
 8007282:	7813      	ldrb	r3, [r2, #0]
 8007284:	600b      	str	r3, [r1, #0]
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	1c10      	adds	r0, r2, #0
 800728a:	bf18      	it	ne
 800728c:	2001      	movne	r0, #1
 800728e:	b002      	add	sp, #8
 8007290:	4770      	bx	lr
 8007292:	4610      	mov	r0, r2
 8007294:	e7fb      	b.n	800728e <__ascii_mbtowc+0x16>
 8007296:	f06f 0001 	mvn.w	r0, #1
 800729a:	e7f8      	b.n	800728e <__ascii_mbtowc+0x16>

0800729c <memchr>:
 800729c:	b510      	push	{r4, lr}
 800729e:	b2c9      	uxtb	r1, r1
 80072a0:	4402      	add	r2, r0
 80072a2:	4290      	cmp	r0, r2
 80072a4:	4603      	mov	r3, r0
 80072a6:	d101      	bne.n	80072ac <memchr+0x10>
 80072a8:	2300      	movs	r3, #0
 80072aa:	e003      	b.n	80072b4 <memchr+0x18>
 80072ac:	781c      	ldrb	r4, [r3, #0]
 80072ae:	3001      	adds	r0, #1
 80072b0:	428c      	cmp	r4, r1
 80072b2:	d1f6      	bne.n	80072a2 <memchr+0x6>
 80072b4:	4618      	mov	r0, r3
 80072b6:	bd10      	pop	{r4, pc}

080072b8 <memcpy>:
 80072b8:	b510      	push	{r4, lr}
 80072ba:	1e43      	subs	r3, r0, #1
 80072bc:	440a      	add	r2, r1
 80072be:	4291      	cmp	r1, r2
 80072c0:	d100      	bne.n	80072c4 <memcpy+0xc>
 80072c2:	bd10      	pop	{r4, pc}
 80072c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072cc:	e7f7      	b.n	80072be <memcpy+0x6>

080072ce <_Balloc>:
 80072ce:	b570      	push	{r4, r5, r6, lr}
 80072d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072d2:	4604      	mov	r4, r0
 80072d4:	460e      	mov	r6, r1
 80072d6:	b93d      	cbnz	r5, 80072e8 <_Balloc+0x1a>
 80072d8:	2010      	movs	r0, #16
 80072da:	f7ff ffc5 	bl	8007268 <malloc>
 80072de:	6260      	str	r0, [r4, #36]	; 0x24
 80072e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072e4:	6005      	str	r5, [r0, #0]
 80072e6:	60c5      	str	r5, [r0, #12]
 80072e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072ea:	68eb      	ldr	r3, [r5, #12]
 80072ec:	b183      	cbz	r3, 8007310 <_Balloc+0x42>
 80072ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80072f6:	b9b8      	cbnz	r0, 8007328 <_Balloc+0x5a>
 80072f8:	2101      	movs	r1, #1
 80072fa:	fa01 f506 	lsl.w	r5, r1, r6
 80072fe:	1d6a      	adds	r2, r5, #5
 8007300:	0092      	lsls	r2, r2, #2
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fbdc 	bl	8007ac0 <_calloc_r>
 8007308:	b160      	cbz	r0, 8007324 <_Balloc+0x56>
 800730a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800730e:	e00e      	b.n	800732e <_Balloc+0x60>
 8007310:	2221      	movs	r2, #33	; 0x21
 8007312:	2104      	movs	r1, #4
 8007314:	4620      	mov	r0, r4
 8007316:	f000 fbd3 	bl	8007ac0 <_calloc_r>
 800731a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800731c:	60e8      	str	r0, [r5, #12]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e4      	bne.n	80072ee <_Balloc+0x20>
 8007324:	2000      	movs	r0, #0
 8007326:	bd70      	pop	{r4, r5, r6, pc}
 8007328:	6802      	ldr	r2, [r0, #0]
 800732a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800732e:	2300      	movs	r3, #0
 8007330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007334:	e7f7      	b.n	8007326 <_Balloc+0x58>

08007336 <_Bfree>:
 8007336:	b570      	push	{r4, r5, r6, lr}
 8007338:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800733a:	4606      	mov	r6, r0
 800733c:	460d      	mov	r5, r1
 800733e:	b93c      	cbnz	r4, 8007350 <_Bfree+0x1a>
 8007340:	2010      	movs	r0, #16
 8007342:	f7ff ff91 	bl	8007268 <malloc>
 8007346:	6270      	str	r0, [r6, #36]	; 0x24
 8007348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800734c:	6004      	str	r4, [r0, #0]
 800734e:	60c4      	str	r4, [r0, #12]
 8007350:	b13d      	cbz	r5, 8007362 <_Bfree+0x2c>
 8007352:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007354:	686a      	ldr	r2, [r5, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800735c:	6029      	str	r1, [r5, #0]
 800735e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007362:	bd70      	pop	{r4, r5, r6, pc}

08007364 <__multadd>:
 8007364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007368:	461f      	mov	r7, r3
 800736a:	4606      	mov	r6, r0
 800736c:	460c      	mov	r4, r1
 800736e:	2300      	movs	r3, #0
 8007370:	690d      	ldr	r5, [r1, #16]
 8007372:	f101 0c14 	add.w	ip, r1, #20
 8007376:	f8dc 0000 	ldr.w	r0, [ip]
 800737a:	3301      	adds	r3, #1
 800737c:	b281      	uxth	r1, r0
 800737e:	fb02 7101 	mla	r1, r2, r1, r7
 8007382:	0c00      	lsrs	r0, r0, #16
 8007384:	0c0f      	lsrs	r7, r1, #16
 8007386:	fb02 7000 	mla	r0, r2, r0, r7
 800738a:	b289      	uxth	r1, r1
 800738c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007390:	429d      	cmp	r5, r3
 8007392:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007396:	f84c 1b04 	str.w	r1, [ip], #4
 800739a:	dcec      	bgt.n	8007376 <__multadd+0x12>
 800739c:	b1d7      	cbz	r7, 80073d4 <__multadd+0x70>
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	42ab      	cmp	r3, r5
 80073a2:	dc12      	bgt.n	80073ca <__multadd+0x66>
 80073a4:	6861      	ldr	r1, [r4, #4]
 80073a6:	4630      	mov	r0, r6
 80073a8:	3101      	adds	r1, #1
 80073aa:	f7ff ff90 	bl	80072ce <_Balloc>
 80073ae:	4680      	mov	r8, r0
 80073b0:	6922      	ldr	r2, [r4, #16]
 80073b2:	f104 010c 	add.w	r1, r4, #12
 80073b6:	3202      	adds	r2, #2
 80073b8:	0092      	lsls	r2, r2, #2
 80073ba:	300c      	adds	r0, #12
 80073bc:	f7ff ff7c 	bl	80072b8 <memcpy>
 80073c0:	4621      	mov	r1, r4
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7ff ffb7 	bl	8007336 <_Bfree>
 80073c8:	4644      	mov	r4, r8
 80073ca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073ce:	3501      	adds	r5, #1
 80073d0:	615f      	str	r7, [r3, #20]
 80073d2:	6125      	str	r5, [r4, #16]
 80073d4:	4620      	mov	r0, r4
 80073d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073da <__s2b>:
 80073da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073de:	4615      	mov	r5, r2
 80073e0:	2209      	movs	r2, #9
 80073e2:	461f      	mov	r7, r3
 80073e4:	3308      	adds	r3, #8
 80073e6:	460c      	mov	r4, r1
 80073e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ec:	4606      	mov	r6, r0
 80073ee:	2201      	movs	r2, #1
 80073f0:	2100      	movs	r1, #0
 80073f2:	429a      	cmp	r2, r3
 80073f4:	db20      	blt.n	8007438 <__s2b+0x5e>
 80073f6:	4630      	mov	r0, r6
 80073f8:	f7ff ff69 	bl	80072ce <_Balloc>
 80073fc:	9b08      	ldr	r3, [sp, #32]
 80073fe:	2d09      	cmp	r5, #9
 8007400:	6143      	str	r3, [r0, #20]
 8007402:	f04f 0301 	mov.w	r3, #1
 8007406:	6103      	str	r3, [r0, #16]
 8007408:	dd19      	ble.n	800743e <__s2b+0x64>
 800740a:	f104 0809 	add.w	r8, r4, #9
 800740e:	46c1      	mov	r9, r8
 8007410:	442c      	add	r4, r5
 8007412:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007416:	4601      	mov	r1, r0
 8007418:	3b30      	subs	r3, #48	; 0x30
 800741a:	220a      	movs	r2, #10
 800741c:	4630      	mov	r0, r6
 800741e:	f7ff ffa1 	bl	8007364 <__multadd>
 8007422:	45a1      	cmp	r9, r4
 8007424:	d1f5      	bne.n	8007412 <__s2b+0x38>
 8007426:	eb08 0405 	add.w	r4, r8, r5
 800742a:	3c08      	subs	r4, #8
 800742c:	1b2d      	subs	r5, r5, r4
 800742e:	1963      	adds	r3, r4, r5
 8007430:	42bb      	cmp	r3, r7
 8007432:	db07      	blt.n	8007444 <__s2b+0x6a>
 8007434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007438:	0052      	lsls	r2, r2, #1
 800743a:	3101      	adds	r1, #1
 800743c:	e7d9      	b.n	80073f2 <__s2b+0x18>
 800743e:	340a      	adds	r4, #10
 8007440:	2509      	movs	r5, #9
 8007442:	e7f3      	b.n	800742c <__s2b+0x52>
 8007444:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007448:	4601      	mov	r1, r0
 800744a:	3b30      	subs	r3, #48	; 0x30
 800744c:	220a      	movs	r2, #10
 800744e:	4630      	mov	r0, r6
 8007450:	f7ff ff88 	bl	8007364 <__multadd>
 8007454:	e7eb      	b.n	800742e <__s2b+0x54>

08007456 <__hi0bits>:
 8007456:	0c02      	lsrs	r2, r0, #16
 8007458:	0412      	lsls	r2, r2, #16
 800745a:	4603      	mov	r3, r0
 800745c:	b9b2      	cbnz	r2, 800748c <__hi0bits+0x36>
 800745e:	0403      	lsls	r3, r0, #16
 8007460:	2010      	movs	r0, #16
 8007462:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007466:	bf04      	itt	eq
 8007468:	021b      	lsleq	r3, r3, #8
 800746a:	3008      	addeq	r0, #8
 800746c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007470:	bf04      	itt	eq
 8007472:	011b      	lsleq	r3, r3, #4
 8007474:	3004      	addeq	r0, #4
 8007476:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800747a:	bf04      	itt	eq
 800747c:	009b      	lsleq	r3, r3, #2
 800747e:	3002      	addeq	r0, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	db06      	blt.n	8007492 <__hi0bits+0x3c>
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	d503      	bpl.n	8007490 <__hi0bits+0x3a>
 8007488:	3001      	adds	r0, #1
 800748a:	4770      	bx	lr
 800748c:	2000      	movs	r0, #0
 800748e:	e7e8      	b.n	8007462 <__hi0bits+0xc>
 8007490:	2020      	movs	r0, #32
 8007492:	4770      	bx	lr

08007494 <__lo0bits>:
 8007494:	6803      	ldr	r3, [r0, #0]
 8007496:	4601      	mov	r1, r0
 8007498:	f013 0207 	ands.w	r2, r3, #7
 800749c:	d00b      	beq.n	80074b6 <__lo0bits+0x22>
 800749e:	07da      	lsls	r2, r3, #31
 80074a0:	d423      	bmi.n	80074ea <__lo0bits+0x56>
 80074a2:	0798      	lsls	r0, r3, #30
 80074a4:	bf49      	itett	mi
 80074a6:	085b      	lsrmi	r3, r3, #1
 80074a8:	089b      	lsrpl	r3, r3, #2
 80074aa:	2001      	movmi	r0, #1
 80074ac:	600b      	strmi	r3, [r1, #0]
 80074ae:	bf5c      	itt	pl
 80074b0:	600b      	strpl	r3, [r1, #0]
 80074b2:	2002      	movpl	r0, #2
 80074b4:	4770      	bx	lr
 80074b6:	b298      	uxth	r0, r3
 80074b8:	b9a8      	cbnz	r0, 80074e6 <__lo0bits+0x52>
 80074ba:	2010      	movs	r0, #16
 80074bc:	0c1b      	lsrs	r3, r3, #16
 80074be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074c2:	bf04      	itt	eq
 80074c4:	0a1b      	lsreq	r3, r3, #8
 80074c6:	3008      	addeq	r0, #8
 80074c8:	071a      	lsls	r2, r3, #28
 80074ca:	bf04      	itt	eq
 80074cc:	091b      	lsreq	r3, r3, #4
 80074ce:	3004      	addeq	r0, #4
 80074d0:	079a      	lsls	r2, r3, #30
 80074d2:	bf04      	itt	eq
 80074d4:	089b      	lsreq	r3, r3, #2
 80074d6:	3002      	addeq	r0, #2
 80074d8:	07da      	lsls	r2, r3, #31
 80074da:	d402      	bmi.n	80074e2 <__lo0bits+0x4e>
 80074dc:	085b      	lsrs	r3, r3, #1
 80074de:	d006      	beq.n	80074ee <__lo0bits+0x5a>
 80074e0:	3001      	adds	r0, #1
 80074e2:	600b      	str	r3, [r1, #0]
 80074e4:	4770      	bx	lr
 80074e6:	4610      	mov	r0, r2
 80074e8:	e7e9      	b.n	80074be <__lo0bits+0x2a>
 80074ea:	2000      	movs	r0, #0
 80074ec:	4770      	bx	lr
 80074ee:	2020      	movs	r0, #32
 80074f0:	4770      	bx	lr

080074f2 <__i2b>:
 80074f2:	b510      	push	{r4, lr}
 80074f4:	460c      	mov	r4, r1
 80074f6:	2101      	movs	r1, #1
 80074f8:	f7ff fee9 	bl	80072ce <_Balloc>
 80074fc:	2201      	movs	r2, #1
 80074fe:	6144      	str	r4, [r0, #20]
 8007500:	6102      	str	r2, [r0, #16]
 8007502:	bd10      	pop	{r4, pc}

08007504 <__multiply>:
 8007504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	4614      	mov	r4, r2
 800750a:	690a      	ldr	r2, [r1, #16]
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	4688      	mov	r8, r1
 8007510:	429a      	cmp	r2, r3
 8007512:	bfbe      	ittt	lt
 8007514:	460b      	movlt	r3, r1
 8007516:	46a0      	movlt	r8, r4
 8007518:	461c      	movlt	r4, r3
 800751a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800751e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007522:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007526:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800752a:	eb07 0609 	add.w	r6, r7, r9
 800752e:	42b3      	cmp	r3, r6
 8007530:	bfb8      	it	lt
 8007532:	3101      	addlt	r1, #1
 8007534:	f7ff fecb 	bl	80072ce <_Balloc>
 8007538:	f100 0514 	add.w	r5, r0, #20
 800753c:	462b      	mov	r3, r5
 800753e:	2200      	movs	r2, #0
 8007540:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007544:	4573      	cmp	r3, lr
 8007546:	d316      	bcc.n	8007576 <__multiply+0x72>
 8007548:	f104 0214 	add.w	r2, r4, #20
 800754c:	f108 0114 	add.w	r1, r8, #20
 8007550:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007554:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	9b00      	ldr	r3, [sp, #0]
 800755c:	9201      	str	r2, [sp, #4]
 800755e:	4293      	cmp	r3, r2
 8007560:	d80c      	bhi.n	800757c <__multiply+0x78>
 8007562:	2e00      	cmp	r6, #0
 8007564:	dd03      	ble.n	800756e <__multiply+0x6a>
 8007566:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800756a:	2b00      	cmp	r3, #0
 800756c:	d05d      	beq.n	800762a <__multiply+0x126>
 800756e:	6106      	str	r6, [r0, #16]
 8007570:	b003      	add	sp, #12
 8007572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007576:	f843 2b04 	str.w	r2, [r3], #4
 800757a:	e7e3      	b.n	8007544 <__multiply+0x40>
 800757c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007580:	f1bb 0f00 	cmp.w	fp, #0
 8007584:	d023      	beq.n	80075ce <__multiply+0xca>
 8007586:	4689      	mov	r9, r1
 8007588:	46ac      	mov	ip, r5
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007592:	f8dc a000 	ldr.w	sl, [ip]
 8007596:	b2a3      	uxth	r3, r4
 8007598:	fa1f fa8a 	uxth.w	sl, sl
 800759c:	fb0b a303 	mla	r3, fp, r3, sl
 80075a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80075a4:	f8dc 4000 	ldr.w	r4, [ip]
 80075a8:	4443      	add	r3, r8
 80075aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80075ae:	fb0b 840a 	mla	r4, fp, sl, r8
 80075b2:	46e2      	mov	sl, ip
 80075b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80075be:	454f      	cmp	r7, r9
 80075c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80075c4:	f84a 3b04 	str.w	r3, [sl], #4
 80075c8:	d82b      	bhi.n	8007622 <__multiply+0x11e>
 80075ca:	f8cc 8004 	str.w	r8, [ip, #4]
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	3204      	adds	r2, #4
 80075d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80075d6:	f1ba 0f00 	cmp.w	sl, #0
 80075da:	d020      	beq.n	800761e <__multiply+0x11a>
 80075dc:	4689      	mov	r9, r1
 80075de:	46a8      	mov	r8, r5
 80075e0:	f04f 0b00 	mov.w	fp, #0
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	f8b9 c000 	ldrh.w	ip, [r9]
 80075ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	fb0a 440c 	mla	r4, sl, ip, r4
 80075f4:	46c4      	mov	ip, r8
 80075f6:	445c      	add	r4, fp
 80075f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80075fc:	f84c 3b04 	str.w	r3, [ip], #4
 8007600:	f859 3b04 	ldr.w	r3, [r9], #4
 8007604:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	fb0a b303 	mla	r3, sl, r3, fp
 800760e:	454f      	cmp	r7, r9
 8007610:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007614:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007618:	d805      	bhi.n	8007626 <__multiply+0x122>
 800761a:	f8c8 3004 	str.w	r3, [r8, #4]
 800761e:	3504      	adds	r5, #4
 8007620:	e79b      	b.n	800755a <__multiply+0x56>
 8007622:	46d4      	mov	ip, sl
 8007624:	e7b3      	b.n	800758e <__multiply+0x8a>
 8007626:	46e0      	mov	r8, ip
 8007628:	e7dd      	b.n	80075e6 <__multiply+0xe2>
 800762a:	3e01      	subs	r6, #1
 800762c:	e799      	b.n	8007562 <__multiply+0x5e>
	...

08007630 <__pow5mult>:
 8007630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007634:	4615      	mov	r5, r2
 8007636:	f012 0203 	ands.w	r2, r2, #3
 800763a:	4606      	mov	r6, r0
 800763c:	460f      	mov	r7, r1
 800763e:	d007      	beq.n	8007650 <__pow5mult+0x20>
 8007640:	4c21      	ldr	r4, [pc, #132]	; (80076c8 <__pow5mult+0x98>)
 8007642:	3a01      	subs	r2, #1
 8007644:	2300      	movs	r3, #0
 8007646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800764a:	f7ff fe8b 	bl	8007364 <__multadd>
 800764e:	4607      	mov	r7, r0
 8007650:	10ad      	asrs	r5, r5, #2
 8007652:	d035      	beq.n	80076c0 <__pow5mult+0x90>
 8007654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007656:	b93c      	cbnz	r4, 8007668 <__pow5mult+0x38>
 8007658:	2010      	movs	r0, #16
 800765a:	f7ff fe05 	bl	8007268 <malloc>
 800765e:	6270      	str	r0, [r6, #36]	; 0x24
 8007660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007664:	6004      	str	r4, [r0, #0]
 8007666:	60c4      	str	r4, [r0, #12]
 8007668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800766c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007670:	b94c      	cbnz	r4, 8007686 <__pow5mult+0x56>
 8007672:	f240 2171 	movw	r1, #625	; 0x271
 8007676:	4630      	mov	r0, r6
 8007678:	f7ff ff3b 	bl	80074f2 <__i2b>
 800767c:	2300      	movs	r3, #0
 800767e:	4604      	mov	r4, r0
 8007680:	f8c8 0008 	str.w	r0, [r8, #8]
 8007684:	6003      	str	r3, [r0, #0]
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	07eb      	lsls	r3, r5, #31
 800768c:	d50a      	bpl.n	80076a4 <__pow5mult+0x74>
 800768e:	4639      	mov	r1, r7
 8007690:	4622      	mov	r2, r4
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ff36 	bl	8007504 <__multiply>
 8007698:	4681      	mov	r9, r0
 800769a:	4639      	mov	r1, r7
 800769c:	4630      	mov	r0, r6
 800769e:	f7ff fe4a 	bl	8007336 <_Bfree>
 80076a2:	464f      	mov	r7, r9
 80076a4:	106d      	asrs	r5, r5, #1
 80076a6:	d00b      	beq.n	80076c0 <__pow5mult+0x90>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	b938      	cbnz	r0, 80076bc <__pow5mult+0x8c>
 80076ac:	4622      	mov	r2, r4
 80076ae:	4621      	mov	r1, r4
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7ff ff27 	bl	8007504 <__multiply>
 80076b6:	6020      	str	r0, [r4, #0]
 80076b8:	f8c0 8000 	str.w	r8, [r0]
 80076bc:	4604      	mov	r4, r0
 80076be:	e7e4      	b.n	800768a <__pow5mult+0x5a>
 80076c0:	4638      	mov	r0, r7
 80076c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c6:	bf00      	nop
 80076c8:	08008530 	.word	0x08008530

080076cc <__lshift>:
 80076cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	460c      	mov	r4, r1
 80076d2:	4607      	mov	r7, r0
 80076d4:	4616      	mov	r6, r2
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076dc:	eb0a 0903 	add.w	r9, sl, r3
 80076e0:	6849      	ldr	r1, [r1, #4]
 80076e2:	68a3      	ldr	r3, [r4, #8]
 80076e4:	f109 0501 	add.w	r5, r9, #1
 80076e8:	42ab      	cmp	r3, r5
 80076ea:	db32      	blt.n	8007752 <__lshift+0x86>
 80076ec:	4638      	mov	r0, r7
 80076ee:	f7ff fdee 	bl	80072ce <_Balloc>
 80076f2:	2300      	movs	r3, #0
 80076f4:	4680      	mov	r8, r0
 80076f6:	461a      	mov	r2, r3
 80076f8:	f100 0114 	add.w	r1, r0, #20
 80076fc:	4553      	cmp	r3, sl
 80076fe:	db2b      	blt.n	8007758 <__lshift+0x8c>
 8007700:	6920      	ldr	r0, [r4, #16]
 8007702:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007706:	f104 0314 	add.w	r3, r4, #20
 800770a:	f016 021f 	ands.w	r2, r6, #31
 800770e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007712:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007716:	d025      	beq.n	8007764 <__lshift+0x98>
 8007718:	2000      	movs	r0, #0
 800771a:	f1c2 0e20 	rsb	lr, r2, #32
 800771e:	468a      	mov	sl, r1
 8007720:	681e      	ldr	r6, [r3, #0]
 8007722:	4096      	lsls	r6, r2
 8007724:	4330      	orrs	r0, r6
 8007726:	f84a 0b04 	str.w	r0, [sl], #4
 800772a:	f853 0b04 	ldr.w	r0, [r3], #4
 800772e:	459c      	cmp	ip, r3
 8007730:	fa20 f00e 	lsr.w	r0, r0, lr
 8007734:	d814      	bhi.n	8007760 <__lshift+0x94>
 8007736:	6048      	str	r0, [r1, #4]
 8007738:	b108      	cbz	r0, 800773e <__lshift+0x72>
 800773a:	f109 0502 	add.w	r5, r9, #2
 800773e:	3d01      	subs	r5, #1
 8007740:	4638      	mov	r0, r7
 8007742:	f8c8 5010 	str.w	r5, [r8, #16]
 8007746:	4621      	mov	r1, r4
 8007748:	f7ff fdf5 	bl	8007336 <_Bfree>
 800774c:	4640      	mov	r0, r8
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007752:	3101      	adds	r1, #1
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	e7c7      	b.n	80076e8 <__lshift+0x1c>
 8007758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800775c:	3301      	adds	r3, #1
 800775e:	e7cd      	b.n	80076fc <__lshift+0x30>
 8007760:	4651      	mov	r1, sl
 8007762:	e7dc      	b.n	800771e <__lshift+0x52>
 8007764:	3904      	subs	r1, #4
 8007766:	f853 2b04 	ldr.w	r2, [r3], #4
 800776a:	459c      	cmp	ip, r3
 800776c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007770:	d8f9      	bhi.n	8007766 <__lshift+0x9a>
 8007772:	e7e4      	b.n	800773e <__lshift+0x72>

08007774 <__mcmp>:
 8007774:	6903      	ldr	r3, [r0, #16]
 8007776:	690a      	ldr	r2, [r1, #16]
 8007778:	b530      	push	{r4, r5, lr}
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	d10c      	bne.n	8007798 <__mcmp+0x24>
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	3014      	adds	r0, #20
 8007782:	3114      	adds	r1, #20
 8007784:	1884      	adds	r4, r0, r2
 8007786:	4411      	add	r1, r2
 8007788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800778c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007790:	4295      	cmp	r5, r2
 8007792:	d003      	beq.n	800779c <__mcmp+0x28>
 8007794:	d305      	bcc.n	80077a2 <__mcmp+0x2e>
 8007796:	2301      	movs	r3, #1
 8007798:	4618      	mov	r0, r3
 800779a:	bd30      	pop	{r4, r5, pc}
 800779c:	42a0      	cmp	r0, r4
 800779e:	d3f3      	bcc.n	8007788 <__mcmp+0x14>
 80077a0:	e7fa      	b.n	8007798 <__mcmp+0x24>
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295
 80077a6:	e7f7      	b.n	8007798 <__mcmp+0x24>

080077a8 <__mdiff>:
 80077a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ac:	460d      	mov	r5, r1
 80077ae:	4607      	mov	r7, r0
 80077b0:	4611      	mov	r1, r2
 80077b2:	4628      	mov	r0, r5
 80077b4:	4614      	mov	r4, r2
 80077b6:	f7ff ffdd 	bl	8007774 <__mcmp>
 80077ba:	1e06      	subs	r6, r0, #0
 80077bc:	d108      	bne.n	80077d0 <__mdiff+0x28>
 80077be:	4631      	mov	r1, r6
 80077c0:	4638      	mov	r0, r7
 80077c2:	f7ff fd84 	bl	80072ce <_Balloc>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d0:	bfa4      	itt	ge
 80077d2:	4623      	movge	r3, r4
 80077d4:	462c      	movge	r4, r5
 80077d6:	4638      	mov	r0, r7
 80077d8:	6861      	ldr	r1, [r4, #4]
 80077da:	bfa6      	itte	ge
 80077dc:	461d      	movge	r5, r3
 80077de:	2600      	movge	r6, #0
 80077e0:	2601      	movlt	r6, #1
 80077e2:	f7ff fd74 	bl	80072ce <_Balloc>
 80077e6:	f04f 0e00 	mov.w	lr, #0
 80077ea:	60c6      	str	r6, [r0, #12]
 80077ec:	692b      	ldr	r3, [r5, #16]
 80077ee:	6926      	ldr	r6, [r4, #16]
 80077f0:	f104 0214 	add.w	r2, r4, #20
 80077f4:	f105 0914 	add.w	r9, r5, #20
 80077f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80077fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007800:	f100 0114 	add.w	r1, r0, #20
 8007804:	f852 ab04 	ldr.w	sl, [r2], #4
 8007808:	f859 5b04 	ldr.w	r5, [r9], #4
 800780c:	fa1f f38a 	uxth.w	r3, sl
 8007810:	4473      	add	r3, lr
 8007812:	b2ac      	uxth	r4, r5
 8007814:	1b1b      	subs	r3, r3, r4
 8007816:	0c2c      	lsrs	r4, r5, #16
 8007818:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800781c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007820:	b29b      	uxth	r3, r3
 8007822:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007826:	45c8      	cmp	r8, r9
 8007828:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800782c:	4694      	mov	ip, r2
 800782e:	f841 4b04 	str.w	r4, [r1], #4
 8007832:	d8e7      	bhi.n	8007804 <__mdiff+0x5c>
 8007834:	45bc      	cmp	ip, r7
 8007836:	d304      	bcc.n	8007842 <__mdiff+0x9a>
 8007838:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800783c:	b183      	cbz	r3, 8007860 <__mdiff+0xb8>
 800783e:	6106      	str	r6, [r0, #16]
 8007840:	e7c4      	b.n	80077cc <__mdiff+0x24>
 8007842:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007846:	b2a2      	uxth	r2, r4
 8007848:	4472      	add	r2, lr
 800784a:	1413      	asrs	r3, r2, #16
 800784c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007850:	b292      	uxth	r2, r2
 8007852:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007856:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800785a:	f841 2b04 	str.w	r2, [r1], #4
 800785e:	e7e9      	b.n	8007834 <__mdiff+0x8c>
 8007860:	3e01      	subs	r6, #1
 8007862:	e7e9      	b.n	8007838 <__mdiff+0x90>

08007864 <__ulp>:
 8007864:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <__ulp+0x44>)
 8007866:	400b      	ands	r3, r1
 8007868:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800786c:	2b00      	cmp	r3, #0
 800786e:	dd02      	ble.n	8007876 <__ulp+0x12>
 8007870:	2000      	movs	r0, #0
 8007872:	4619      	mov	r1, r3
 8007874:	4770      	bx	lr
 8007876:	425b      	negs	r3, r3
 8007878:	151b      	asrs	r3, r3, #20
 800787a:	2b13      	cmp	r3, #19
 800787c:	f04f 0000 	mov.w	r0, #0
 8007880:	f04f 0100 	mov.w	r1, #0
 8007884:	dc04      	bgt.n	8007890 <__ulp+0x2c>
 8007886:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800788a:	fa42 f103 	asr.w	r1, r2, r3
 800788e:	4770      	bx	lr
 8007890:	2201      	movs	r2, #1
 8007892:	3b14      	subs	r3, #20
 8007894:	2b1e      	cmp	r3, #30
 8007896:	bfce      	itee	gt
 8007898:	4613      	movgt	r3, r2
 800789a:	f1c3 031f 	rsble	r3, r3, #31
 800789e:	fa02 f303 	lslle.w	r3, r2, r3
 80078a2:	4618      	mov	r0, r3
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	7ff00000 	.word	0x7ff00000

080078ac <__b2d>:
 80078ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b0:	6907      	ldr	r7, [r0, #16]
 80078b2:	f100 0914 	add.w	r9, r0, #20
 80078b6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80078ba:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80078be:	f1a7 0804 	sub.w	r8, r7, #4
 80078c2:	4630      	mov	r0, r6
 80078c4:	f7ff fdc7 	bl	8007456 <__hi0bits>
 80078c8:	f1c0 0320 	rsb	r3, r0, #32
 80078cc:	280a      	cmp	r0, #10
 80078ce:	600b      	str	r3, [r1, #0]
 80078d0:	491e      	ldr	r1, [pc, #120]	; (800794c <__b2d+0xa0>)
 80078d2:	dc17      	bgt.n	8007904 <__b2d+0x58>
 80078d4:	45c1      	cmp	r9, r8
 80078d6:	bf28      	it	cs
 80078d8:	2200      	movcs	r2, #0
 80078da:	f1c0 0c0b 	rsb	ip, r0, #11
 80078de:	fa26 f30c 	lsr.w	r3, r6, ip
 80078e2:	bf38      	it	cc
 80078e4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80078e8:	ea43 0501 	orr.w	r5, r3, r1
 80078ec:	f100 0315 	add.w	r3, r0, #21
 80078f0:	fa06 f303 	lsl.w	r3, r6, r3
 80078f4:	fa22 f20c 	lsr.w	r2, r2, ip
 80078f8:	ea43 0402 	orr.w	r4, r3, r2
 80078fc:	4620      	mov	r0, r4
 80078fe:	4629      	mov	r1, r5
 8007900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007904:	45c1      	cmp	r9, r8
 8007906:	bf3a      	itte	cc
 8007908:	f1a7 0808 	subcc.w	r8, r7, #8
 800790c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007910:	2200      	movcs	r2, #0
 8007912:	f1b0 030b 	subs.w	r3, r0, #11
 8007916:	d015      	beq.n	8007944 <__b2d+0x98>
 8007918:	409e      	lsls	r6, r3
 800791a:	f1c3 0720 	rsb	r7, r3, #32
 800791e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007922:	fa22 f107 	lsr.w	r1, r2, r7
 8007926:	45c8      	cmp	r8, r9
 8007928:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800792c:	ea46 0501 	orr.w	r5, r6, r1
 8007930:	bf94      	ite	ls
 8007932:	2100      	movls	r1, #0
 8007934:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007938:	fa02 f003 	lsl.w	r0, r2, r3
 800793c:	40f9      	lsrs	r1, r7
 800793e:	ea40 0401 	orr.w	r4, r0, r1
 8007942:	e7db      	b.n	80078fc <__b2d+0x50>
 8007944:	ea46 0501 	orr.w	r5, r6, r1
 8007948:	4614      	mov	r4, r2
 800794a:	e7d7      	b.n	80078fc <__b2d+0x50>
 800794c:	3ff00000 	.word	0x3ff00000

08007950 <__d2b>:
 8007950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007954:	461c      	mov	r4, r3
 8007956:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800795a:	2101      	movs	r1, #1
 800795c:	4690      	mov	r8, r2
 800795e:	f7ff fcb6 	bl	80072ce <_Balloc>
 8007962:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007966:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800796a:	4607      	mov	r7, r0
 800796c:	bb34      	cbnz	r4, 80079bc <__d2b+0x6c>
 800796e:	9201      	str	r2, [sp, #4]
 8007970:	f1b8 0200 	subs.w	r2, r8, #0
 8007974:	d027      	beq.n	80079c6 <__d2b+0x76>
 8007976:	a802      	add	r0, sp, #8
 8007978:	f840 2d08 	str.w	r2, [r0, #-8]!
 800797c:	f7ff fd8a 	bl	8007494 <__lo0bits>
 8007980:	9900      	ldr	r1, [sp, #0]
 8007982:	b1f0      	cbz	r0, 80079c2 <__d2b+0x72>
 8007984:	9a01      	ldr	r2, [sp, #4]
 8007986:	f1c0 0320 	rsb	r3, r0, #32
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	430b      	orrs	r3, r1
 8007990:	40c2      	lsrs	r2, r0
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	9201      	str	r2, [sp, #4]
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	bf14      	ite	ne
 800799c:	2102      	movne	r1, #2
 800799e:	2101      	moveq	r1, #1
 80079a0:	61bb      	str	r3, [r7, #24]
 80079a2:	6139      	str	r1, [r7, #16]
 80079a4:	b1c4      	cbz	r4, 80079d8 <__d2b+0x88>
 80079a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80079aa:	4404      	add	r4, r0
 80079ac:	6034      	str	r4, [r6, #0]
 80079ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079b2:	6028      	str	r0, [r5, #0]
 80079b4:	4638      	mov	r0, r7
 80079b6:	b002      	add	sp, #8
 80079b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80079c0:	e7d5      	b.n	800796e <__d2b+0x1e>
 80079c2:	6179      	str	r1, [r7, #20]
 80079c4:	e7e7      	b.n	8007996 <__d2b+0x46>
 80079c6:	a801      	add	r0, sp, #4
 80079c8:	f7ff fd64 	bl	8007494 <__lo0bits>
 80079cc:	2101      	movs	r1, #1
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	6139      	str	r1, [r7, #16]
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	3020      	adds	r0, #32
 80079d6:	e7e5      	b.n	80079a4 <__d2b+0x54>
 80079d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079dc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80079e0:	6030      	str	r0, [r6, #0]
 80079e2:	6918      	ldr	r0, [r3, #16]
 80079e4:	f7ff fd37 	bl	8007456 <__hi0bits>
 80079e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80079ec:	e7e1      	b.n	80079b2 <__d2b+0x62>

080079ee <__ratio>:
 80079ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f2:	4688      	mov	r8, r1
 80079f4:	4669      	mov	r1, sp
 80079f6:	4681      	mov	r9, r0
 80079f8:	f7ff ff58 	bl	80078ac <__b2d>
 80079fc:	468b      	mov	fp, r1
 80079fe:	4606      	mov	r6, r0
 8007a00:	460f      	mov	r7, r1
 8007a02:	4640      	mov	r0, r8
 8007a04:	a901      	add	r1, sp, #4
 8007a06:	f7ff ff51 	bl	80078ac <__b2d>
 8007a0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a12:	460d      	mov	r5, r1
 8007a14:	eba3 0c02 	sub.w	ip, r3, r2
 8007a18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a1c:	1a9b      	subs	r3, r3, r2
 8007a1e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	bfd5      	itete	le
 8007a26:	460a      	movle	r2, r1
 8007a28:	463a      	movgt	r2, r7
 8007a2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a2e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007a32:	bfd8      	it	le
 8007a34:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007a38:	462b      	mov	r3, r5
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f7f8 fe74 	bl	800072c <__aeabi_ddiv>
 8007a44:	b003      	add	sp, #12
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a4a <__copybits>:
 8007a4a:	3901      	subs	r1, #1
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	1149      	asrs	r1, r1, #5
 8007a50:	6914      	ldr	r4, [r2, #16]
 8007a52:	3101      	adds	r1, #1
 8007a54:	f102 0314 	add.w	r3, r2, #20
 8007a58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	4602      	mov	r2, r0
 8007a64:	d303      	bcc.n	8007a6e <__copybits+0x24>
 8007a66:	2300      	movs	r3, #0
 8007a68:	428a      	cmp	r2, r1
 8007a6a:	d305      	bcc.n	8007a78 <__copybits+0x2e>
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a72:	f840 2b04 	str.w	r2, [r0], #4
 8007a76:	e7f3      	b.n	8007a60 <__copybits+0x16>
 8007a78:	f842 3b04 	str.w	r3, [r2], #4
 8007a7c:	e7f4      	b.n	8007a68 <__copybits+0x1e>

08007a7e <__any_on>:
 8007a7e:	f100 0214 	add.w	r2, r0, #20
 8007a82:	6900      	ldr	r0, [r0, #16]
 8007a84:	114b      	asrs	r3, r1, #5
 8007a86:	4298      	cmp	r0, r3
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	db11      	blt.n	8007ab0 <__any_on+0x32>
 8007a8c:	dd0a      	ble.n	8007aa4 <__any_on+0x26>
 8007a8e:	f011 011f 	ands.w	r1, r1, #31
 8007a92:	d007      	beq.n	8007aa4 <__any_on+0x26>
 8007a94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a98:	fa24 f001 	lsr.w	r0, r4, r1
 8007a9c:	fa00 f101 	lsl.w	r1, r0, r1
 8007aa0:	428c      	cmp	r4, r1
 8007aa2:	d10b      	bne.n	8007abc <__any_on+0x3e>
 8007aa4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d803      	bhi.n	8007ab4 <__any_on+0x36>
 8007aac:	2000      	movs	r0, #0
 8007aae:	bd10      	pop	{r4, pc}
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	e7f7      	b.n	8007aa4 <__any_on+0x26>
 8007ab4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ab8:	2900      	cmp	r1, #0
 8007aba:	d0f5      	beq.n	8007aa8 <__any_on+0x2a>
 8007abc:	2001      	movs	r0, #1
 8007abe:	e7f6      	b.n	8007aae <__any_on+0x30>

08007ac0 <_calloc_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	fb02 f401 	mul.w	r4, r2, r1
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	f000 f854 	bl	8007b74 <_malloc_r>
 8007acc:	4605      	mov	r5, r0
 8007ace:	b118      	cbz	r0, 8007ad8 <_calloc_r+0x18>
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	f7fc fd2c 	bl	8004530 <memset>
 8007ad8:	4628      	mov	r0, r5
 8007ada:	bd38      	pop	{r3, r4, r5, pc}

08007adc <_free_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4605      	mov	r5, r0
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d043      	beq.n	8007b6c <_free_r+0x90>
 8007ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae8:	1f0c      	subs	r4, r1, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bfb8      	it	lt
 8007aee:	18e4      	addlt	r4, r4, r3
 8007af0:	f000 fa34 	bl	8007f5c <__malloc_lock>
 8007af4:	4a1e      	ldr	r2, [pc, #120]	; (8007b70 <_free_r+0x94>)
 8007af6:	6813      	ldr	r3, [r2, #0]
 8007af8:	4610      	mov	r0, r2
 8007afa:	b933      	cbnz	r3, 8007b0a <_free_r+0x2e>
 8007afc:	6063      	str	r3, [r4, #4]
 8007afe:	6014      	str	r4, [r2, #0]
 8007b00:	4628      	mov	r0, r5
 8007b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b06:	f000 ba2a 	b.w	8007f5e <__malloc_unlock>
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	d90b      	bls.n	8007b26 <_free_r+0x4a>
 8007b0e:	6821      	ldr	r1, [r4, #0]
 8007b10:	1862      	adds	r2, r4, r1
 8007b12:	4293      	cmp	r3, r2
 8007b14:	bf01      	itttt	eq
 8007b16:	681a      	ldreq	r2, [r3, #0]
 8007b18:	685b      	ldreq	r3, [r3, #4]
 8007b1a:	1852      	addeq	r2, r2, r1
 8007b1c:	6022      	streq	r2, [r4, #0]
 8007b1e:	6063      	str	r3, [r4, #4]
 8007b20:	6004      	str	r4, [r0, #0]
 8007b22:	e7ed      	b.n	8007b00 <_free_r+0x24>
 8007b24:	4613      	mov	r3, r2
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	b10a      	cbz	r2, 8007b2e <_free_r+0x52>
 8007b2a:	42a2      	cmp	r2, r4
 8007b2c:	d9fa      	bls.n	8007b24 <_free_r+0x48>
 8007b2e:	6819      	ldr	r1, [r3, #0]
 8007b30:	1858      	adds	r0, r3, r1
 8007b32:	42a0      	cmp	r0, r4
 8007b34:	d10b      	bne.n	8007b4e <_free_r+0x72>
 8007b36:	6820      	ldr	r0, [r4, #0]
 8007b38:	4401      	add	r1, r0
 8007b3a:	1858      	adds	r0, r3, r1
 8007b3c:	4282      	cmp	r2, r0
 8007b3e:	6019      	str	r1, [r3, #0]
 8007b40:	d1de      	bne.n	8007b00 <_free_r+0x24>
 8007b42:	6810      	ldr	r0, [r2, #0]
 8007b44:	6852      	ldr	r2, [r2, #4]
 8007b46:	4401      	add	r1, r0
 8007b48:	6019      	str	r1, [r3, #0]
 8007b4a:	605a      	str	r2, [r3, #4]
 8007b4c:	e7d8      	b.n	8007b00 <_free_r+0x24>
 8007b4e:	d902      	bls.n	8007b56 <_free_r+0x7a>
 8007b50:	230c      	movs	r3, #12
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	e7d4      	b.n	8007b00 <_free_r+0x24>
 8007b56:	6820      	ldr	r0, [r4, #0]
 8007b58:	1821      	adds	r1, r4, r0
 8007b5a:	428a      	cmp	r2, r1
 8007b5c:	bf01      	itttt	eq
 8007b5e:	6811      	ldreq	r1, [r2, #0]
 8007b60:	6852      	ldreq	r2, [r2, #4]
 8007b62:	1809      	addeq	r1, r1, r0
 8007b64:	6021      	streq	r1, [r4, #0]
 8007b66:	6062      	str	r2, [r4, #4]
 8007b68:	605c      	str	r4, [r3, #4]
 8007b6a:	e7c9      	b.n	8007b00 <_free_r+0x24>
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000228 	.word	0x20000228

08007b74 <_malloc_r>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	1ccd      	adds	r5, r1, #3
 8007b78:	f025 0503 	bic.w	r5, r5, #3
 8007b7c:	3508      	adds	r5, #8
 8007b7e:	2d0c      	cmp	r5, #12
 8007b80:	bf38      	it	cc
 8007b82:	250c      	movcc	r5, #12
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	4606      	mov	r6, r0
 8007b88:	db01      	blt.n	8007b8e <_malloc_r+0x1a>
 8007b8a:	42a9      	cmp	r1, r5
 8007b8c:	d903      	bls.n	8007b96 <_malloc_r+0x22>
 8007b8e:	230c      	movs	r3, #12
 8007b90:	6033      	str	r3, [r6, #0]
 8007b92:	2000      	movs	r0, #0
 8007b94:	bd70      	pop	{r4, r5, r6, pc}
 8007b96:	f000 f9e1 	bl	8007f5c <__malloc_lock>
 8007b9a:	4a21      	ldr	r2, [pc, #132]	; (8007c20 <_malloc_r+0xac>)
 8007b9c:	6814      	ldr	r4, [r2, #0]
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	b991      	cbnz	r1, 8007bc8 <_malloc_r+0x54>
 8007ba2:	4c20      	ldr	r4, [pc, #128]	; (8007c24 <_malloc_r+0xb0>)
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	b91b      	cbnz	r3, 8007bb0 <_malloc_r+0x3c>
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f000 f98f 	bl	8007ecc <_sbrk_r>
 8007bae:	6020      	str	r0, [r4, #0]
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f000 f98a 	bl	8007ecc <_sbrk_r>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d124      	bne.n	8007c06 <_malloc_r+0x92>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	6033      	str	r3, [r6, #0]
 8007bc2:	f000 f9cc 	bl	8007f5e <__malloc_unlock>
 8007bc6:	e7e4      	b.n	8007b92 <_malloc_r+0x1e>
 8007bc8:	680b      	ldr	r3, [r1, #0]
 8007bca:	1b5b      	subs	r3, r3, r5
 8007bcc:	d418      	bmi.n	8007c00 <_malloc_r+0x8c>
 8007bce:	2b0b      	cmp	r3, #11
 8007bd0:	d90f      	bls.n	8007bf2 <_malloc_r+0x7e>
 8007bd2:	600b      	str	r3, [r1, #0]
 8007bd4:	18cc      	adds	r4, r1, r3
 8007bd6:	50cd      	str	r5, [r1, r3]
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f000 f9c0 	bl	8007f5e <__malloc_unlock>
 8007bde:	f104 000b 	add.w	r0, r4, #11
 8007be2:	1d23      	adds	r3, r4, #4
 8007be4:	f020 0007 	bic.w	r0, r0, #7
 8007be8:	1ac3      	subs	r3, r0, r3
 8007bea:	d0d3      	beq.n	8007b94 <_malloc_r+0x20>
 8007bec:	425a      	negs	r2, r3
 8007bee:	50e2      	str	r2, [r4, r3]
 8007bf0:	e7d0      	b.n	8007b94 <_malloc_r+0x20>
 8007bf2:	684b      	ldr	r3, [r1, #4]
 8007bf4:	428c      	cmp	r4, r1
 8007bf6:	bf16      	itet	ne
 8007bf8:	6063      	strne	r3, [r4, #4]
 8007bfa:	6013      	streq	r3, [r2, #0]
 8007bfc:	460c      	movne	r4, r1
 8007bfe:	e7eb      	b.n	8007bd8 <_malloc_r+0x64>
 8007c00:	460c      	mov	r4, r1
 8007c02:	6849      	ldr	r1, [r1, #4]
 8007c04:	e7cc      	b.n	8007ba0 <_malloc_r+0x2c>
 8007c06:	1cc4      	adds	r4, r0, #3
 8007c08:	f024 0403 	bic.w	r4, r4, #3
 8007c0c:	42a0      	cmp	r0, r4
 8007c0e:	d005      	beq.n	8007c1c <_malloc_r+0xa8>
 8007c10:	1a21      	subs	r1, r4, r0
 8007c12:	4630      	mov	r0, r6
 8007c14:	f000 f95a 	bl	8007ecc <_sbrk_r>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d0cf      	beq.n	8007bbc <_malloc_r+0x48>
 8007c1c:	6025      	str	r5, [r4, #0]
 8007c1e:	e7db      	b.n	8007bd8 <_malloc_r+0x64>
 8007c20:	20000228 	.word	0x20000228
 8007c24:	2000022c 	.word	0x2000022c

08007c28 <__ssputs_r>:
 8007c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	688e      	ldr	r6, [r1, #8]
 8007c2e:	4682      	mov	sl, r0
 8007c30:	429e      	cmp	r6, r3
 8007c32:	460c      	mov	r4, r1
 8007c34:	4690      	mov	r8, r2
 8007c36:	4699      	mov	r9, r3
 8007c38:	d837      	bhi.n	8007caa <__ssputs_r+0x82>
 8007c3a:	898a      	ldrh	r2, [r1, #12]
 8007c3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c40:	d031      	beq.n	8007ca6 <__ssputs_r+0x7e>
 8007c42:	2302      	movs	r3, #2
 8007c44:	6825      	ldr	r5, [r4, #0]
 8007c46:	6909      	ldr	r1, [r1, #16]
 8007c48:	1a6f      	subs	r7, r5, r1
 8007c4a:	6965      	ldr	r5, [r4, #20]
 8007c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c50:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c54:	f109 0301 	add.w	r3, r9, #1
 8007c58:	443b      	add	r3, r7
 8007c5a:	429d      	cmp	r5, r3
 8007c5c:	bf38      	it	cc
 8007c5e:	461d      	movcc	r5, r3
 8007c60:	0553      	lsls	r3, r2, #21
 8007c62:	d530      	bpl.n	8007cc6 <__ssputs_r+0x9e>
 8007c64:	4629      	mov	r1, r5
 8007c66:	f7ff ff85 	bl	8007b74 <_malloc_r>
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	b950      	cbnz	r0, 8007c84 <__ssputs_r+0x5c>
 8007c6e:	230c      	movs	r3, #12
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	f8ca 3000 	str.w	r3, [sl]
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c84:	463a      	mov	r2, r7
 8007c86:	6921      	ldr	r1, [r4, #16]
 8007c88:	f7ff fb16 	bl	80072b8 <memcpy>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c96:	81a3      	strh	r3, [r4, #12]
 8007c98:	6126      	str	r6, [r4, #16]
 8007c9a:	443e      	add	r6, r7
 8007c9c:	6026      	str	r6, [r4, #0]
 8007c9e:	464e      	mov	r6, r9
 8007ca0:	6165      	str	r5, [r4, #20]
 8007ca2:	1bed      	subs	r5, r5, r7
 8007ca4:	60a5      	str	r5, [r4, #8]
 8007ca6:	454e      	cmp	r6, r9
 8007ca8:	d900      	bls.n	8007cac <__ssputs_r+0x84>
 8007caa:	464e      	mov	r6, r9
 8007cac:	4632      	mov	r2, r6
 8007cae:	4641      	mov	r1, r8
 8007cb0:	6820      	ldr	r0, [r4, #0]
 8007cb2:	f000 f93a 	bl	8007f2a <memmove>
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	2000      	movs	r0, #0
 8007cba:	1b9b      	subs	r3, r3, r6
 8007cbc:	60a3      	str	r3, [r4, #8]
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	441e      	add	r6, r3
 8007cc2:	6026      	str	r6, [r4, #0]
 8007cc4:	e7dc      	b.n	8007c80 <__ssputs_r+0x58>
 8007cc6:	462a      	mov	r2, r5
 8007cc8:	f000 f94a 	bl	8007f60 <_realloc_r>
 8007ccc:	4606      	mov	r6, r0
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d1e2      	bne.n	8007c98 <__ssputs_r+0x70>
 8007cd2:	6921      	ldr	r1, [r4, #16]
 8007cd4:	4650      	mov	r0, sl
 8007cd6:	f7ff ff01 	bl	8007adc <_free_r>
 8007cda:	e7c8      	b.n	8007c6e <__ssputs_r+0x46>

08007cdc <_svfiprintf_r>:
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	461d      	mov	r5, r3
 8007ce2:	898b      	ldrh	r3, [r1, #12]
 8007ce4:	b09d      	sub	sp, #116	; 0x74
 8007ce6:	061f      	lsls	r7, r3, #24
 8007ce8:	4680      	mov	r8, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	4616      	mov	r6, r2
 8007cee:	d50f      	bpl.n	8007d10 <_svfiprintf_r+0x34>
 8007cf0:	690b      	ldr	r3, [r1, #16]
 8007cf2:	b96b      	cbnz	r3, 8007d10 <_svfiprintf_r+0x34>
 8007cf4:	2140      	movs	r1, #64	; 0x40
 8007cf6:	f7ff ff3d 	bl	8007b74 <_malloc_r>
 8007cfa:	6020      	str	r0, [r4, #0]
 8007cfc:	6120      	str	r0, [r4, #16]
 8007cfe:	b928      	cbnz	r0, 8007d0c <_svfiprintf_r+0x30>
 8007d00:	230c      	movs	r3, #12
 8007d02:	f8c8 3000 	str.w	r3, [r8]
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0a:	e0c8      	b.n	8007e9e <_svfiprintf_r+0x1c2>
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	6163      	str	r3, [r4, #20]
 8007d10:	2300      	movs	r3, #0
 8007d12:	9309      	str	r3, [sp, #36]	; 0x24
 8007d14:	2320      	movs	r3, #32
 8007d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d1a:	2330      	movs	r3, #48	; 0x30
 8007d1c:	f04f 0b01 	mov.w	fp, #1
 8007d20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d24:	9503      	str	r5, [sp, #12]
 8007d26:	4637      	mov	r7, r6
 8007d28:	463d      	mov	r5, r7
 8007d2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d2e:	b10b      	cbz	r3, 8007d34 <_svfiprintf_r+0x58>
 8007d30:	2b25      	cmp	r3, #37	; 0x25
 8007d32:	d13e      	bne.n	8007db2 <_svfiprintf_r+0xd6>
 8007d34:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d38:	d00b      	beq.n	8007d52 <_svfiprintf_r+0x76>
 8007d3a:	4653      	mov	r3, sl
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4640      	mov	r0, r8
 8007d42:	f7ff ff71 	bl	8007c28 <__ssputs_r>
 8007d46:	3001      	adds	r0, #1
 8007d48:	f000 80a4 	beq.w	8007e94 <_svfiprintf_r+0x1b8>
 8007d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4e:	4453      	add	r3, sl
 8007d50:	9309      	str	r3, [sp, #36]	; 0x24
 8007d52:	783b      	ldrb	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 809d 	beq.w	8007e94 <_svfiprintf_r+0x1b8>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	9307      	str	r3, [sp, #28]
 8007d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d6e:	462f      	mov	r7, r5
 8007d70:	2205      	movs	r2, #5
 8007d72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d76:	4850      	ldr	r0, [pc, #320]	; (8007eb8 <_svfiprintf_r+0x1dc>)
 8007d78:	f7ff fa90 	bl	800729c <memchr>
 8007d7c:	9b04      	ldr	r3, [sp, #16]
 8007d7e:	b9d0      	cbnz	r0, 8007db6 <_svfiprintf_r+0xda>
 8007d80:	06d9      	lsls	r1, r3, #27
 8007d82:	bf44      	itt	mi
 8007d84:	2220      	movmi	r2, #32
 8007d86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d8a:	071a      	lsls	r2, r3, #28
 8007d8c:	bf44      	itt	mi
 8007d8e:	222b      	movmi	r2, #43	; 0x2b
 8007d90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d94:	782a      	ldrb	r2, [r5, #0]
 8007d96:	2a2a      	cmp	r2, #42	; 0x2a
 8007d98:	d015      	beq.n	8007dc6 <_svfiprintf_r+0xea>
 8007d9a:	462f      	mov	r7, r5
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	250a      	movs	r5, #10
 8007da0:	9a07      	ldr	r2, [sp, #28]
 8007da2:	4639      	mov	r1, r7
 8007da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da8:	3b30      	subs	r3, #48	; 0x30
 8007daa:	2b09      	cmp	r3, #9
 8007dac:	d94d      	bls.n	8007e4a <_svfiprintf_r+0x16e>
 8007dae:	b1b8      	cbz	r0, 8007de0 <_svfiprintf_r+0x104>
 8007db0:	e00f      	b.n	8007dd2 <_svfiprintf_r+0xf6>
 8007db2:	462f      	mov	r7, r5
 8007db4:	e7b8      	b.n	8007d28 <_svfiprintf_r+0x4c>
 8007db6:	4a40      	ldr	r2, [pc, #256]	; (8007eb8 <_svfiprintf_r+0x1dc>)
 8007db8:	463d      	mov	r5, r7
 8007dba:	1a80      	subs	r0, r0, r2
 8007dbc:	fa0b f000 	lsl.w	r0, fp, r0
 8007dc0:	4318      	orrs	r0, r3
 8007dc2:	9004      	str	r0, [sp, #16]
 8007dc4:	e7d3      	b.n	8007d6e <_svfiprintf_r+0x92>
 8007dc6:	9a03      	ldr	r2, [sp, #12]
 8007dc8:	1d11      	adds	r1, r2, #4
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	9103      	str	r1, [sp, #12]
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	db01      	blt.n	8007dd6 <_svfiprintf_r+0xfa>
 8007dd2:	9207      	str	r2, [sp, #28]
 8007dd4:	e004      	b.n	8007de0 <_svfiprintf_r+0x104>
 8007dd6:	4252      	negs	r2, r2
 8007dd8:	f043 0302 	orr.w	r3, r3, #2
 8007ddc:	9207      	str	r2, [sp, #28]
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	783b      	ldrb	r3, [r7, #0]
 8007de2:	2b2e      	cmp	r3, #46	; 0x2e
 8007de4:	d10c      	bne.n	8007e00 <_svfiprintf_r+0x124>
 8007de6:	787b      	ldrb	r3, [r7, #1]
 8007de8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dea:	d133      	bne.n	8007e54 <_svfiprintf_r+0x178>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	3702      	adds	r7, #2
 8007df0:	1d1a      	adds	r2, r3, #4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	9203      	str	r2, [sp, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfb8      	it	lt
 8007dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dfe:	9305      	str	r3, [sp, #20]
 8007e00:	4d2e      	ldr	r5, [pc, #184]	; (8007ebc <_svfiprintf_r+0x1e0>)
 8007e02:	2203      	movs	r2, #3
 8007e04:	7839      	ldrb	r1, [r7, #0]
 8007e06:	4628      	mov	r0, r5
 8007e08:	f7ff fa48 	bl	800729c <memchr>
 8007e0c:	b138      	cbz	r0, 8007e1e <_svfiprintf_r+0x142>
 8007e0e:	2340      	movs	r3, #64	; 0x40
 8007e10:	1b40      	subs	r0, r0, r5
 8007e12:	fa03 f000 	lsl.w	r0, r3, r0
 8007e16:	9b04      	ldr	r3, [sp, #16]
 8007e18:	3701      	adds	r7, #1
 8007e1a:	4303      	orrs	r3, r0
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	7839      	ldrb	r1, [r7, #0]
 8007e20:	2206      	movs	r2, #6
 8007e22:	4827      	ldr	r0, [pc, #156]	; (8007ec0 <_svfiprintf_r+0x1e4>)
 8007e24:	1c7e      	adds	r6, r7, #1
 8007e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e2a:	f7ff fa37 	bl	800729c <memchr>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d038      	beq.n	8007ea4 <_svfiprintf_r+0x1c8>
 8007e32:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <_svfiprintf_r+0x1e8>)
 8007e34:	bb13      	cbnz	r3, 8007e7c <_svfiprintf_r+0x1a0>
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	3307      	adds	r3, #7
 8007e3a:	f023 0307 	bic.w	r3, r3, #7
 8007e3e:	3308      	adds	r3, #8
 8007e40:	9303      	str	r3, [sp, #12]
 8007e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e44:	444b      	add	r3, r9
 8007e46:	9309      	str	r3, [sp, #36]	; 0x24
 8007e48:	e76d      	b.n	8007d26 <_svfiprintf_r+0x4a>
 8007e4a:	fb05 3202 	mla	r2, r5, r2, r3
 8007e4e:	2001      	movs	r0, #1
 8007e50:	460f      	mov	r7, r1
 8007e52:	e7a6      	b.n	8007da2 <_svfiprintf_r+0xc6>
 8007e54:	2300      	movs	r3, #0
 8007e56:	250a      	movs	r5, #10
 8007e58:	4619      	mov	r1, r3
 8007e5a:	3701      	adds	r7, #1
 8007e5c:	9305      	str	r3, [sp, #20]
 8007e5e:	4638      	mov	r0, r7
 8007e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e64:	3a30      	subs	r2, #48	; 0x30
 8007e66:	2a09      	cmp	r2, #9
 8007e68:	d903      	bls.n	8007e72 <_svfiprintf_r+0x196>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0c8      	beq.n	8007e00 <_svfiprintf_r+0x124>
 8007e6e:	9105      	str	r1, [sp, #20]
 8007e70:	e7c6      	b.n	8007e00 <_svfiprintf_r+0x124>
 8007e72:	fb05 2101 	mla	r1, r5, r1, r2
 8007e76:	2301      	movs	r3, #1
 8007e78:	4607      	mov	r7, r0
 8007e7a:	e7f0      	b.n	8007e5e <_svfiprintf_r+0x182>
 8007e7c:	ab03      	add	r3, sp, #12
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	4622      	mov	r2, r4
 8007e82:	4b11      	ldr	r3, [pc, #68]	; (8007ec8 <_svfiprintf_r+0x1ec>)
 8007e84:	a904      	add	r1, sp, #16
 8007e86:	4640      	mov	r0, r8
 8007e88:	f7fc fbec 	bl	8004664 <_printf_float>
 8007e8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e90:	4681      	mov	r9, r0
 8007e92:	d1d6      	bne.n	8007e42 <_svfiprintf_r+0x166>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	065b      	lsls	r3, r3, #25
 8007e98:	f53f af35 	bmi.w	8007d06 <_svfiprintf_r+0x2a>
 8007e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e9e:	b01d      	add	sp, #116	; 0x74
 8007ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea4:	ab03      	add	r3, sp, #12
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <_svfiprintf_r+0x1ec>)
 8007eac:	a904      	add	r1, sp, #16
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f7fc fe84 	bl	8004bbc <_printf_i>
 8007eb4:	e7ea      	b.n	8007e8c <_svfiprintf_r+0x1b0>
 8007eb6:	bf00      	nop
 8007eb8:	0800853c 	.word	0x0800853c
 8007ebc:	08008542 	.word	0x08008542
 8007ec0:	08008546 	.word	0x08008546
 8007ec4:	08004665 	.word	0x08004665
 8007ec8:	08007c29 	.word	0x08007c29

08007ecc <_sbrk_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	2300      	movs	r3, #0
 8007ed0:	4c05      	ldr	r4, [pc, #20]	; (8007ee8 <_sbrk_r+0x1c>)
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	4608      	mov	r0, r1
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	f7f9 feee 	bl	8001cb8 <_sbrk>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d102      	bne.n	8007ee6 <_sbrk_r+0x1a>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	b103      	cbz	r3, 8007ee6 <_sbrk_r+0x1a>
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	200007ac 	.word	0x200007ac

08007eec <strncmp>:
 8007eec:	b510      	push	{r4, lr}
 8007eee:	b16a      	cbz	r2, 8007f0c <strncmp+0x20>
 8007ef0:	3901      	subs	r1, #1
 8007ef2:	1884      	adds	r4, r0, r2
 8007ef4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ef8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d103      	bne.n	8007f08 <strncmp+0x1c>
 8007f00:	42a0      	cmp	r0, r4
 8007f02:	d001      	beq.n	8007f08 <strncmp+0x1c>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1f5      	bne.n	8007ef4 <strncmp+0x8>
 8007f08:	1a98      	subs	r0, r3, r2
 8007f0a:	bd10      	pop	{r4, pc}
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	e7fc      	b.n	8007f0a <strncmp+0x1e>

08007f10 <__ascii_wctomb>:
 8007f10:	b149      	cbz	r1, 8007f26 <__ascii_wctomb+0x16>
 8007f12:	2aff      	cmp	r2, #255	; 0xff
 8007f14:	bf8b      	itete	hi
 8007f16:	238a      	movhi	r3, #138	; 0x8a
 8007f18:	700a      	strbls	r2, [r1, #0]
 8007f1a:	6003      	strhi	r3, [r0, #0]
 8007f1c:	2001      	movls	r0, #1
 8007f1e:	bf88      	it	hi
 8007f20:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f24:	4770      	bx	lr
 8007f26:	4608      	mov	r0, r1
 8007f28:	4770      	bx	lr

08007f2a <memmove>:
 8007f2a:	4288      	cmp	r0, r1
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	eb01 0302 	add.w	r3, r1, r2
 8007f32:	d807      	bhi.n	8007f44 <memmove+0x1a>
 8007f34:	1e42      	subs	r2, r0, #1
 8007f36:	4299      	cmp	r1, r3
 8007f38:	d00a      	beq.n	8007f50 <memmove+0x26>
 8007f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f3e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f42:	e7f8      	b.n	8007f36 <memmove+0xc>
 8007f44:	4283      	cmp	r3, r0
 8007f46:	d9f5      	bls.n	8007f34 <memmove+0xa>
 8007f48:	1881      	adds	r1, r0, r2
 8007f4a:	1ad2      	subs	r2, r2, r3
 8007f4c:	42d3      	cmn	r3, r2
 8007f4e:	d100      	bne.n	8007f52 <memmove+0x28>
 8007f50:	bd10      	pop	{r4, pc}
 8007f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f5a:	e7f7      	b.n	8007f4c <memmove+0x22>

08007f5c <__malloc_lock>:
 8007f5c:	4770      	bx	lr

08007f5e <__malloc_unlock>:
 8007f5e:	4770      	bx	lr

08007f60 <_realloc_r>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	4607      	mov	r7, r0
 8007f64:	4614      	mov	r4, r2
 8007f66:	460e      	mov	r6, r1
 8007f68:	b921      	cbnz	r1, 8007f74 <_realloc_r+0x14>
 8007f6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f6e:	4611      	mov	r1, r2
 8007f70:	f7ff be00 	b.w	8007b74 <_malloc_r>
 8007f74:	b922      	cbnz	r2, 8007f80 <_realloc_r+0x20>
 8007f76:	f7ff fdb1 	bl	8007adc <_free_r>
 8007f7a:	4625      	mov	r5, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f80:	f000 f814 	bl	8007fac <_malloc_usable_size_r>
 8007f84:	42a0      	cmp	r0, r4
 8007f86:	d20f      	bcs.n	8007fa8 <_realloc_r+0x48>
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f7ff fdf2 	bl	8007b74 <_malloc_r>
 8007f90:	4605      	mov	r5, r0
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d0f2      	beq.n	8007f7c <_realloc_r+0x1c>
 8007f96:	4631      	mov	r1, r6
 8007f98:	4622      	mov	r2, r4
 8007f9a:	f7ff f98d 	bl	80072b8 <memcpy>
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f7ff fd9b 	bl	8007adc <_free_r>
 8007fa6:	e7e9      	b.n	8007f7c <_realloc_r+0x1c>
 8007fa8:	4635      	mov	r5, r6
 8007faa:	e7e7      	b.n	8007f7c <_realloc_r+0x1c>

08007fac <_malloc_usable_size_r>:
 8007fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb0:	1f18      	subs	r0, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	bfbc      	itt	lt
 8007fb6:	580b      	ldrlt	r3, [r1, r0]
 8007fb8:	18c0      	addlt	r0, r0, r3
 8007fba:	4770      	bx	lr

08007fbc <_init>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr

08007fc8 <_fini>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr
